================== FILE TREE ==================

├── app
│   ├── (dashboard)
│   │   ├── DashboardAuthGuard.tsx
│   │   ├── TimeTrackingContext.tsx
│   │   ├── dashboard
│   │   │   ├── DashboardAuthGuard.tsx
│   │   │   ├── ai-pit-chief
│   │   │   │   └── page.tsx
│   │   │   ├── clients
│   │   │   │   ├── [clientId]
│   │   │   │   │   └── page.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── communication-hub
│   │   │   │   └── page.tsx
│   │   │   ├── customers
│   │   │   │   └── page.tsx
│   │   │   ├── financials
│   │   │   │   └── page.tsx
│   │   │   ├── inventory
│   │   │   │   └── page.tsx
│   │   │   ├── media
│   │   │   │   └── page.tsx
│   │   │   ├── my-tasks
│   │   │   │   └── page.tsx
│   │   │   ├── page.tsx
│   │   │   ├── parts
│   │   │   │   └── page.tsx
│   │   │   ├── performance
│   │   │   │   └── page.tsx
│   │   │   ├── projects
│   │   │   │   ├── [projectId]
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── new
│   │   │   │   │   └── page.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── reports
│   │   │   │   └── page.tsx
│   │   │   ├── schedule
│   │   │   │   └── page.tsx
│   │   │   ├── settings
│   │   │   │   ├── page.tsx
│   │   │   │   └── templates
│   │   │   │       └── page.tsx
│   │   │   ├── technicians
│   │   │   │   └── page.tsx
│   │   │   ├── timeline
│   │   │   │   └── page.tsx
│   │   │   └── workshop
│   │   │       └── page.tsx
│   │   └── layout.tsx
│   ├── (public)
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   └── projects
│   │       └── [projectId]
│   │           ├── build-book
│   │           │   └── page.tsx
│   │           └── page.tsx
│   ├── AuthContext.tsx
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   └── not-found.tsx
├── components
│   ├── ApprovalCenter.tsx
│   ├── ClientFinancialsSummary.tsx
│   ├── Footer.tsx
│   ├── Header.tsx
│   ├── MediaGallery.tsx
│   ├── ProgressCategory.tsx
│   ├── ProjectHeader.tsx
│   ├── Timeline.tsx
│   ├── dashboard
│   │   ├── ActionRequiredFeed.tsx
│   │   ├── ActivityFeed.tsx
│   │   ├── AddInvoiceModal.tsx
│   │   ├── AddPartFromInventoryModal.tsx
│   │   ├── AddTimelineForm.tsx
│   │   ├── AiSuggestions.tsx
│   │   ├── AlertsPanel.tsx
│   │   ├── BlockedProjects.tsx
│   │   ├── CashFlowGauge.tsx
│   │   ├── ChannelList.tsx
│   │   ├── ClientPendingActions.tsx
│   │   ├── ClockInOut.tsx
│   │   ├── DashboardHeader.tsx
│   │   ├── DashboardKanban.tsx
│   │   ├── DraggableTaskCard.tsx
│   │   ├── EditProjectModal.tsx
│   │   ├── ExceptionTiles.tsx
│   │   ├── FinancialsPanel.tsx
│   │   ├── InteractiveProgressCategory.tsx
│   │   ├── JobCardModal.tsx
│   │   ├── KeyPerformanceIndicators.tsx
│   │   ├── KpiDial.tsx
│   │   ├── LowStockAlerts.tsx
│   │   ├── MessageView.tsx
│   │   ├── MessagingCenter.tsx
│   │   ├── NotificationsCenter.tsx
│   │   ├── PartsBoard.tsx
│   │   ├── PendingApprovals.tsx
│   │   ├── PerformanceBarChart.tsx
│   │   ├── PhotoHighlights.tsx
│   │   ├── PredictiveAnalyticsChart.tsx
│   │   ├── ProjectStatusUpdater.tsx
│   │   ├── ProjectSummaryCard.tsx
│   │   ├── ProjectsKanbanView.tsx
│   │   ├── ProjectsListView.tsx
│   │   ├── QuickStats.tsx
│   │   ├── ScheduleTaskModal.tsx
│   │   ├── ScheduleView.tsx
│   │   ├── ShipmentsModal.tsx
│   │   ├── ShipmentsTracker.tsx
│   │   ├── Sidebar.tsx
│   │   ├── StatCard.tsx
│   │   ├── StatDetailModal.tsx
│   │   ├── TechnicianDetailModal.tsx
│   │   ├── TechnicianLiveFeed.tsx
│   │   ├── TechnicianPerformanceCard.tsx
│   │   ├── UniversalSearch.tsx
│   │   ├── UnscheduledTasksPanel.tsx
│   │   └── WorkshopKanban.tsx
│   └── ui
│       ├── Button.tsx
│       ├── ConfirmationModal.tsx
│       ├── Input.tsx
│       ├── ProgressBar.tsx
│       ├── ToggleSwitch.tsx
│       └── ViewSwitcher.tsx
└── lib
    ├── data-service.ts
    ├── mock-data.ts
    ├── mock-inventory.ts
    ├── mock-shifts.ts
    ├── project-templates.ts
    ├── types.ts
    └── utils.ts



================== FILE CONTENTS ==================


==================== app\AuthContext.tsx ====================

// [path]: app/AuthContext.tsx

'use client';

import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { UserRole, User } from '@/lib/types';
import { mockUsers } from '@/lib/mock-data';
import { useRouter } from 'next/navigation';

interface AuthContextType {
  user: User | null; // Changed from userRole to user
  login: (role: UserRole) => void;
  logout: () => void;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null); // Changed from userRole
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    try {
      const storedUser = localStorage.getItem('AAM_USER');
      if (storedUser) {
        setUser(JSON.parse(storedUser));
      }
    } catch (error) {
        console.error("Could not access localStorage:", error);
    }
    setIsLoading(false);
  }, []);

  const login = (role: UserRole) => {
    // Find the first mock user that matches the selected role
    const userToLogin = mockUsers.find(u => u.role === role);
    if (userToLogin) {
        try {
          localStorage.setItem('AAM_USER', JSON.stringify(userToLogin));
          setUser(userToLogin);
        } catch (error) {
          console.error("Could not set user in localStorage:", error);
        }
    } else {
        console.error("No mock user found for role:", role);
    }
  };

  const logout = () => {
    try {
      localStorage.removeItem('AAM_USER');
      setUser(null);
      router.push('/');
    } catch (error) {
      console.error("Could not remove user from localStorage:", error);
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, isLoading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

==================== app\favicon.ico ====================

[Binary or unreadable file content skipped]


==================== app\globals.css ====================

@import "tailwindcss";

:root {
  --background: #111111; /* Charcoal/Dark Gray */
  --foreground: #f1f1f1; /* Light Gray/White text */
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  
  /* Brand Colors - Red Accent */
  --color-primary-50: #fee2e2;
  --color-primary-100: #fecaca;
  --color-primary-200: #fca5a5;
  --color-primary-300: #f87171;
  --color-primary-400: #ef4444;
  --color-primary-500: #dc2626; /* Main Red Accent */
  --color-primary-600: #b91c1c;
  --color-primary-700: #991b1b;
  --color-primary-800: #7f1d1d;
  --color-primary-900: #450a0a;
  
  /* Enhanced Shadows (adjusted for dark theme) */
  --shadow-soft: 0 2px 15px -3px rgba(0, 0, 0, 0.2), 0 10px 20px -2px rgba(0, 0, 0, 0.1);
  --shadow-medium: 0 4px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
  --shadow-large: 0 10px 50px -12px rgba(0, 0, 0, 0.5);
  
  /* Container Widths */
  --container-sm: 640px;
  --container-md: 768px;
  --container-lg: 1024px;
  --container-xl: 1280px;
  --container-2xl: 1536px;
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-sans), system-ui, sans-serif;
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Grid pattern utility (adjusted for dark theme) */
.bg-grid-pattern {
  background-image: 
    linear-gradient(rgba(255, 255, 255, 0.07) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.07) 1px, transparent 1px);
  background-size: 25px 25px;
}

/* Custom utilities */
.text-balance {
  text-wrap: balance;
}

/* Focus styles */
.focus-ring {
  @apply focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-900;
}

==================== app\layout.tsx ====================

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "./AuthContext"; // Import the provider

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "All American Muscle | Project Tracker",
  description: "Live progress tracking for classic American muscle car restorations. See your dream car come to life, step by step.",
  keywords: ["classic car restoration", "muscle car", "auto restoration", "project tracking", "All American Muscle"],
  authors: [{ name: "All American Muscle" }],
  openGraph: {
    title: "All American Muscle | Project Tracker",
    description: "Live progress tracking for classic American muscle car restorations.",
    url: process.env.NEXT_PUBLIC_SITE_URL,
    siteName: "All American Muscle",
    type: "website",
    locale: "en_US",
  },
  twitter: {
    card: "summary_large_image",
    title: "All American Muscle | Project Tracker",
    description: "Live progress tracking for classic American muscle car restorations.",
  },
  robots: {
    index: true,
    follow: true,
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background text-foreground`}
      >
        {/* Wrap the entire app in the AuthProvider */}
        <AuthProvider>
          <main>{children}</main>
        </AuthProvider>
      </body>
    </html>
  );
}

==================== app\not-found.tsx ====================

'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { Home, ArrowLeft } from 'lucide-react';
import Link from 'next/link';

export default function NotFound() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center px-4">
      <div className="max-w-md w-full text-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="text-8xl font-bold text-blue-600 mb-4"
          >
            404
          </motion.div>
          
          <motion.h1
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="text-2xl font-bold text-gray-900 mb-4"
          >
            Page Not Found
          </motion.h1>
          
          <motion.p
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.6 }}
            className="text-gray-600 mb-8"
          >
            Sorry, we couldn&apos;t find the page you&apos;re looking for. 
            It might have been moved, deleted, or you entered the wrong URL.
          </motion.p>
          
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.8 }}
            className="flex flex-col sm:flex-row gap-4 justify-center"
          >
            <Link
              href="/"
              className="inline-flex items-center justify-center bg-blue-600 text-white px-6 py-3 rounded-full font-medium hover:bg-blue-700 transition-colors shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <Home className="w-4 h-4 mr-2" />
              Go Home
            </Link>
            
            <button
              onClick={() => window.history.back()}
              className="inline-flex items-center justify-center border-2 border-blue-600 text-blue-600 px-6 py-3 rounded-full font-medium hover:bg-blue-600 hover:text-white transition-colors"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Go Back
            </button>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}


==================== app\(dashboard)\DashboardAuthGuard.tsx ====================

// [path]: app/(dashboard)/DashboardAuthGuard.tsx

'use client';

import { useAuth } from '@/app/AuthContext';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

export default function DashboardAuthGuard({ children }: { children: React.ReactNode }) {
  const { user, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    // If the authentication check is complete and there's no user, redirect.
    if (!isLoading && !user) {
      router.push('/'); 
    }
  }, [user, isLoading, router]);

  // While checking, or if there's no user, show a loading state to prevent flashing content.
  if (isLoading || !user) {
    return (
        <div className="flex items-center justify-center h-screen bg-background text-foreground">
            <p className="text-gray-400">Authenticating...</p>
        </div>
    );
  }

  // If authenticated, render the children components (the actual dashboard).
  return <>{children}</>;
}

==================== app\(dashboard)\TimeTrackingContext.tsx ====================

// [path]: app/(dashboard)/TimeTrackingContext.tsx

'use client';

import React, { createContext, useState, useContext, useEffect, ReactNode, useCallback } from 'react';
import { useAuth } from '@/app/AuthContext';
import * as dataService from '@/lib/data-service';
import { BreakType } from '@/lib/types';

type Status = 'ClockedIn' | 'ClockedOut' | 'OnBreak';

interface TimeTrackingContextType {
  status: Status;
  shiftId: string | null;
  breakType: BreakType | null;
  handleClockIn: () => void;
  handleClockOut: () => void;
  handleStartBreak: (type: BreakType) => void;
  handleEndBreak: () => void;
}

const TimeTrackingContext = createContext<TimeTrackingContextType | undefined>(undefined);

export const TimeTrackingProvider = ({ children }: { children: ReactNode }) => {
  const { user } = useAuth();
  const [status, setStatus] = useState<Status>('ClockedOut');
  const [shiftId, setShiftId] = useState<string | null>(null);
  const [breakType, setBreakType] = useState<BreakType | null>(null);

  const fetchStatus = useCallback(() => {
    if (user && user.role !== 'Client') {
      const { status, shiftId, breakType } = dataService.getUserTimeTrackingStatus(user.id);
      setStatus(status);
      setShiftId(shiftId);
      setBreakType(breakType);
    }
  }, [user]);

  useEffect(() => {
    fetchStatus();
  }, [fetchStatus]);

  const handleClockIn = () => {
    if (user) {
      dataService.clockIn(user.id);
      fetchStatus();
    }
  };

  const handleClockOut = () => {
    if (shiftId) {
      dataService.clockOut(shiftId);
      fetchStatus();
    }
  };

  const handleStartBreak = (type: BreakType) => {
    if (shiftId) {
      dataService.startBreak(shiftId, type);
      fetchStatus();
    }
  };
  
  const handleEndBreak = () => {
    if (shiftId) {
      dataService.endBreak(shiftId);
      fetchStatus();
    }
  };

  return (
    <TimeTrackingContext.Provider value={{ status, shiftId, breakType, handleClockIn, handleClockOut, handleStartBreak, handleEndBreak }}>
      {children}
    </TimeTrackingContext.Provider>
  );
};

export const useTimeTracking = () => {
  const context = useContext(TimeTrackingContext);
  if (context === undefined) {
    throw new Error('useTimeTracking must be used within a TimeTrackingProvider');
  }
  return context;
};

==================== app\(dashboard)\layout.tsx ====================

// [path]: app/(dashboard)/layout.tsx

'use client';

import { useState } from 'react';
import Sidebar from '@/components/dashboard/Sidebar';
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import DashboardAuthGuard from './DashboardAuthGuard';
import { TimeTrackingProvider } from './TimeTrackingContext'; // <-- Import the new provider

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    <DashboardAuthGuard>
      <TimeTrackingProvider> {/* <-- Wrap the content in the provider */}
        <div className="flex h-screen bg-background text-foreground">
          <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />
          <div className="flex-1 flex flex-col overflow-hidden">
            <DashboardHeader onMenuClick={() => setIsSidebarOpen(true)} />
            <main className="flex-1 overflow-y-auto bg-grid-pattern">
              <div className="p-6 md:p-8">
                {children}
              </div>
            </main>
          </div>
        </div>
      </TimeTrackingProvider>
    </DashboardAuthGuard>
  );
}

==================== app\(dashboard)\dashboard\DashboardAuthGuard.tsx ====================

// [path]: app/(dashboard)/DashboardAuthGuard.tsx

'use client';

import { useAuth } from '@/app/AuthContext';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

export default function DashboardAuthGuard({ children }: { children: React.ReactNode }) {
  const { user, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    // If the authentication check is complete and there's no user, redirect.
    if (!isLoading && !user) {
      router.push('/'); 
    }
  }, [user, isLoading, router]);

  // While checking, or if there's no user, show a loading state to prevent flashing content.
  if (isLoading || !user) {
    return (
        <div className="flex items-center justify-center h-screen bg-background text-foreground">
            <p className="text-gray-400">Authenticating...</p>
        </div>
    );
  }

  // If authenticated, render the children components (the actual dashboard).
  return <>{children}</>;
}

==================== app\(dashboard)\dashboard\page.tsx ====================

// [path]: app/(dashboard)/dashboard/page.tsx

'use client';
import { getProjects, getShifts } from '@/lib/data-service';
import KeyPerformanceIndicators from '@/components/dashboard/KeyPerformanceIndicators';
import BlockedProjects from '@/components/dashboard/BlockedProjects';
import PendingApprovals from '@/components/dashboard/PendingApprovals';
import DashboardKanban from '@/components/dashboard/DashboardKanban';
import TechnicianLiveFeed from '@/components/dashboard/TechnicianLiveFeed';
import CashFlowGauge from '@/components/dashboard/CashFlowGauge';
import ShipmentsTracker from '@/components/dashboard/ShipmentsTracker';
import LowStockAlerts from '@/components/dashboard/LowStockAlerts';

export default function DashboardPage() {
  // In a real app, these would be fetched once and passed down or managed by a state manager.
  const projects = getProjects();
  const shifts = getShifts();

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-white">Welcome back, Boss!</h1>
        <p className="text-gray-400">Your F1 Cockpit view of the workshop.</p>
      </div>

      {/* Layer 1, Top Row: The Racing Dials */}
      <KeyPerformanceIndicators projects={projects} shifts={shifts} />

      {/* Layer 1, Second Row: Critical Action Center */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <PendingApprovals projects={projects} />
        <BlockedProjects projects={projects} />
      </div>

      {/* Main Body (Two Columns): Live Telemetry & Financial/Supply Chain */}
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
        <div className="xl:col-span-2 space-y-8">
          <DashboardKanban projects={projects} />
          <TechnicianLiveFeed projects={projects} />
        </div>
        <div className="xl:col-span-1 space-y-8">
          <CashFlowGauge />
          <ShipmentsTracker />
          <LowStockAlerts />
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\ai-pit-chief\page.tsx ====================

// [path]: app/(dashboard)/dashboard/ai-pit-chief/page.tsx

'use client';

import Input from '@/components/ui/Input';
import { Search } from 'lucide-react';
import AiSuggestions from '@/components/dashboard/AiSuggestions';
import PredictiveAnalyticsChart from '@/components/dashboard/PredictiveAnalyticsChart';

export default function AiPitChiefPage() {
  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">AI Pit Chief</h1>
        <p className="text-gray-400">The dedicated interface for interacting with the system&apos;s intelligence layer.</p>
      </div>

      {/* Query Console */}
      <div className="mb-8">
        <div className="relative">
          <Input 
            type="text"
            placeholder="Ask a question about your workshop... (e.g., 'Which projects are most profitable?' or 'Forecast cash flow for next month')"
            className="pl-12 text-lg h-16"
            disabled // Non-functional for this demo
          />
          <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-6 w-6 text-gray-400" />
        </div>
      </div>

      {/* Suggestions and Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
          <AiSuggestions />
        </div>
        <div>
          <PredictiveAnalyticsChart />
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\clients\page.tsx ====================

// [path]: app/(dashboard)/dashboard/clients/page.tsx

import { mockProjects } from '@/lib/mock-data';
import { User, Car } from 'lucide-react';
import Link from 'next/link';

// Helper function to create a URL-friendly slug from a name
const createSlug = (name: string) => {
  return name.toLowerCase().replace(/\s+/g, '-');
};

export default function ClientsPage() {
  const clients = mockProjects.reduce((acc, project) => {
    const clientName = project.customerName;
    if (!acc[clientName]) {
      acc[clientName] = {
        name: clientName,
        email: `contact+${clientName.split(' ').join('.').toLowerCase()}@example.com`,
        phone: '072 0426 477',
        projects: []
      };
    }
    acc[clientName].projects.push(project);
    return acc;
  }, {} as Record<string, { name: string; email: string; phone: string; projects: typeof mockProjects }>);

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Clients Control Room</h1>
        <p className="text-gray-400">The CRM and communication center for every customer relationship.</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {Object.values(clients).map(client => {
          const clientSlug = createSlug(client.name);
          return (
            <Link 
              href={`/dashboard/clients/${clientSlug}`} 
              key={client.name} 
              className="block bg-gray-800 border border-white/10 rounded-lg shadow-soft p-6 transition-all duration-300 hover:border-red-500/50 hover:-translate-y-1"
            >
              <div className="flex items-center mb-4">
                <div className="w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center mr-4">
                  <User className="h-6 w-6 text-gray-400" />
                </div>
                <div>
                  <h2 className="text-xl font-bold text-white">{client.name}</h2>
                  <p className="text-sm text-gray-400">{client.email}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-2">
                  Projects ({client.projects.length})
                </h3>
                <ul className="space-y-1">
                  {client.projects.slice(0, 3).map(project => (
                    <li key={project.id} className="flex items-center text-sm text-gray-300">
                      <Car className="h-4 w-4 text-red-500 mr-2 flex-shrink-0" />
                      <span>{`${project.car.year} ${project.car.make} ${project.car.model}`}</span>
                    </li>
                  ))}
                  {client.projects.length > 3 && <li className="text-xs text-gray-500 pl-6">...and more</li>}
                </ul>
              </div>
            </Link>
          );
        })}
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\clients\[clientId]\page.tsx ====================

// [path]: app/(dashboard)/dashboard/clients/[clientId]/page.tsx

'use client';

import { getProjects } from '@/lib/data-service';
import { User } from 'lucide-react';
import { useMemo } from 'react';
import ProjectSummaryCard from '@/components/dashboard/ProjectSummaryCard';
import { calculateOverallProgress } from '@/lib/utils';
import { notFound } from 'next/navigation';
import ClientPendingActions from '@/components/dashboard/ClientPendingActions'; // <-- NEW IMPORT

export default function ClientDetailPage({ params }: { params: { clientId: string } }) {
  const { client, clientProjects } = useMemo(() => {
    const clientName = params.clientId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    const allProjects = getProjects();
    const clientProjects = allProjects.filter(p => p.customerName === clientName);

    if (clientProjects.length === 0) {
      return { client: null, clientProjects: [] };
    }

    const clientData = {
      name: clientName,
      email: `contact+${clientName.split(' ').join('.').toLowerCase()}@example.com`,
      phone: '072 0426 477',
    };

    return { client: clientData, clientProjects };
  }, [params.clientId]);

  if (!client) {
    return notFound();
  }

  return (
    <div>
      <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft p-6 mb-8">
        <div className="flex items-center">
          <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mr-6">
            <User className="h-8 w-8 text-gray-400" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-white">{client.name}</h1>
            <div className="flex space-x-6 text-sm text-gray-400 mt-1">
              <a href={`mailto:${client.email}`} className="hover:text-red-500">{client.email}</a>
              <span>{client.phone}</span>
            </div>
          </div>
        </div>
      </div>

      {/* --- NEW: Pending Actions Component --- */}
      <ClientPendingActions projects={clientProjects} />

      <div>
        <h2 className="text-2xl font-bold text-white mb-4">Digital Garage</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {clientProjects.map(project => {
            const progress = calculateOverallProgress(project);
            return <ProjectSummaryCard key={project.id} project={project} progress={progress} />;
          })}
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\communication-hub\page.tsx ====================

// [path]: app/(dashboard)/dashboard/communication-hub/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { getProjects, updateProject } from '@/lib/data-service';
import { Project, Message } from '@/lib/types';
import ChannelList from '@/components/dashboard/ChannelList';
import MessageView from '@/components/dashboard/MessageView';
import { useAuth } from '@/app/AuthContext';

export default function CommunicationHubPage() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    setProjects(getProjects());
  }, []);

  const handleSendMessage = (projectId: string, message: Omit<Message, 'id' | 'createdAt' | 'authorRole'>) => {
    if (!user) return;

    const projectToUpdate = projects.find(p => p.id === projectId);
    if (!projectToUpdate) return;
    
    const newMessage: Message = { 
        ...message, 
        id: `msg-${Date.now()}`, 
        createdAt: new Date().toISOString(),
        authorRole: user.role
    };
    
    const updatedProject = { 
        ...projectToUpdate, 
        messages: [...projectToUpdate.messages, newMessage] 
    };

    updateProject(projectId, { messages: updatedProject.messages });
    
    setProjects(currentProjects => 
        currentProjects.map(p => p.id === projectId ? updatedProject : p)
    );
  };

  const selectedProject = projects.find(p => p.id === selectedProjectId) || null;

  return (
    <div className="h-[calc(100vh-5rem)]">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-white">Communication Hub</h1>
        <p className="text-gray-400">A unified center for all project messaging.</p>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100%-4.5rem)]">
        <div className="lg:col-span-1 h-full">
          <ChannelList 
            projects={projects} 
            selectedProjectId={selectedProjectId}
            onChannelSelect={setSelectedProjectId}
          />
        </div>
        <div className="lg:col-span-3 h-full">
            <MessageView 
                project={selectedProject}
                currentUserRole={user?.role || 'Manager'}
                onSendMessage={handleSendMessage}
            />
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\customers\page.tsx ====================

import { mockProjects } from '@/lib/mock-data';
import { User, Car } from 'lucide-react';
import Link from 'next/link';

export default function CustomersPage() {
  // Group projects by customer name to create a unique customer list
  const customers = mockProjects.reduce((acc, project) => {
    const customerName = project.customerName;
    if (!acc[customerName]) {
      acc[customerName] = {
        name: customerName,
        email: `contact+${customerName.split(' ').join('.').toLowerCase()}@example.com`,
        phone: '072 0426 477',
        projects: []
      };
    }
    acc[customerName].projects.push(project);
    return acc;
  }, {} as Record<string, { name: string; email: string; phone: string; projects: typeof mockProjects }>);

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Customers</h1>
        <p className="text-gray-400">A list of all clients and their projects.</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {Object.values(customers).map(customer => (
          <div key={customer.name} className="bg-gray-800 border border-white/10 rounded-lg shadow-soft p-6">
            <div className="flex items-center mb-4">
              <div className="w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center mr-4">
                <User className="h-6 w-6 text-gray-400" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">{customer.name}</h2>
                <p className="text-sm text-gray-400">{customer.email}</p>
                <p className="text-sm text-gray-400">{customer.phone}</p>
              </div>
            </div>
            
            <div>
              <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-2">Projects</h3>
               <ul className="space-y-2">
                {customer.projects.map(project => (
                  <li key={project.id}>
                    <Link href={`/dashboard/projects/${project.id}`} className="flex items-center p-2 rounded-md hover:bg-gray-700/50 transition-colors">
                      <Car className="h-5 w-5 text-red-500 mr-3 flex-shrink-0" />
                      <span className="text-sm font-medium text-gray-300">{`${project.car.year} ${project.car.make} ${project.car.model}`}</span>
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\financials\page.tsx ====================

// [path]: app/(dashboard)/dashboard/financials/page.tsx

'use client';

import { useMemo } from 'react';
import { getProjects } from '@/lib/data-service';
import { calculateProjectCosts, calculateProjectProfitability } from '@/lib/utils';
import Link from 'next/link';
import StatCard from '@/components/dashboard/StatCard';
import { DollarSign, TrendingDown, TrendingUp, Percent } from 'lucide-react';

const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(amount);
};

export default function FinancialsPage() {
    const projects = getProjects();

    const financialSummary = useMemo(() => {
        let totalQuoted = 0;
        let totalCost = 0;
        let totalNetProfit = 0;
        let totalMargin = 0;
        
        projects.forEach(project => {
            const { totalCost: projectCost } = calculateProjectCosts(project);
            const { netProfit, margin } = calculateProjectProfitability(project);
            
            totalQuoted += project.financials.totalQuoted;
            totalCost += projectCost;
            totalNetProfit += netProfit;
            totalMargin += margin;
        });

        const averageMargin = projects.length > 0 ? totalMargin / projects.length : 0;

        return { totalQuoted, totalCost, totalNetProfit, averageMargin };
    }, [projects]);

    const getMarginColor = (margin: number) => {
        if (margin > 25) return 'text-green-400';
        if (margin > 0) return 'text-yellow-400';
        return 'text-red-400';
    };

    return (
        <div>
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-white">Finance Control Room</h1>
                <p className="text-gray-400">The treasury. Complete control over every rand coming in and going out.</p>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <StatCard 
                    icon={DollarSign}
                    title="Total Quoted Value"
                    value={formatCurrency(financialSummary.totalQuoted)}
                    colorClass="bg-blue-600"
                />
                <StatCard 
                    icon={TrendingDown}
                    title="Total Combined Costs"
                    value={formatCurrency(financialSummary.totalCost)}
                    colorClass="bg-yellow-600"
                />
                <StatCard 
                    icon={TrendingUp}
                    title="Total Net Profit"
                    value={formatCurrency(financialSummary.totalNetProfit)}
                    colorClass="bg-green-600"
                />
                <StatCard 
                    icon={Percent}
                    title="Average Profit Margin"
                    value={`${financialSummary.averageMargin.toFixed(1)}%`}
                    colorClass="bg-red-600"
                />
            </div>

            <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft overflow-hidden">
                <div className="p-4 border-b border-gray-700">
                    <h2 className="text-xl font-bold text-white">Project Profitability Breakdown</h2>
                </div>
                <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-700">
                        <thead className="bg-gray-900/50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Project</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Quoted</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Total Cost</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Net Profit</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Margin</th>
                            </tr>
                        </thead>
                        <tbody className="bg-gray-800 divide-y divide-gray-700">
                            {projects.map(project => {
                                const { totalCost } = calculateProjectCosts(project);
                                const { netProfit, margin } = calculateProjectProfitability(project);

                                return (
                                    <tr key={project.id} className="hover:bg-gray-700/50">
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <Link href={`/dashboard/projects/${project.id}`} className="text-sm font-medium text-red-500 hover:underline">
                                                {project.car.year} {project.car.make} {project.car.model}
                                            </Link>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                            {formatCurrency(project.financials.totalQuoted)}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                            {formatCurrency(totalCost)}
                                        </td>
                                        <td className={`px-6 py-4 whitespace-nowrap text-sm font-semibold ${getMarginColor(margin)}`}>
                                            {formatCurrency(netProfit)}
                                        </td>
                                        <td className={`px-6 py-4 whitespace-nowrap text-sm font-bold ${getMarginColor(margin)}`}>
                                            {margin.toFixed(1)}%
                                        </td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
}

==================== app\(dashboard)\dashboard\inventory\page.tsx ====================

// [path]: app/(dashboard)/dashboard/inventory/page.tsx

'use client';

import { useState, useEffect, useMemo } from 'react';
import { getInventoryItems } from '@/lib/data-service';
import { InventoryItem } from '@/lib/types';
import Input from '@/components/ui/Input';
import Button from '@/components/ui/Button'; // <-- NEW IMPORT
import { Package } from 'lucide-react'; // <-- NEW IMPORT
import ShipmentsModal from '@/components/dashboard/ShipmentsModal'; // <-- NEW IMPORT

export default function InventoryPage() {
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false); // <-- NEW STATE

  useEffect(() => {
    setInventory(getInventoryItems());
  }, []);

  const filteredInventory = useMemo(() => {
    if (!searchTerm) {
      return inventory;
    }
    return inventory.filter(item =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.supplier?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [inventory, searchTerm]);

  const getStatus = (item: InventoryItem) => {
    if (item.stockQty <= 0) {
      return { text: 'Out of Stock', color: 'bg-red-900/50 text-red-300 border border-red-500/30' };
    }
    if (item.reorderPoint && item.stockQty <= item.reorderPoint) {
      return { text: 'Low Stock', color: 'bg-yellow-900/50 text-yellow-300 border border-yellow-500/30' };
    }
    return { text: 'In Stock', color: 'bg-green-900/50 text-green-300 border border-green-500/30' };
  };

  return (
    <>
      <ShipmentsModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
      <div>
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white">Inventory Control Room</h1>
            <p className="text-gray-400">The parts division&apos;s digital warehouse and supply chain command.</p>
          </div>
          <div className="flex items-center space-x-2 mt-4 sm:mt-0">
            <Button onClick={() => setIsModalOpen(true)} variant='secondary' size='sm'>
                <Package className="h-4 w-4 mr-2"/>
                Track Shipments
            </Button>
            <Input 
              type="text"
              placeholder="Search parts..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full sm:w-64"
            />
          </div>
        </div>

        <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-gray-900/50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">SKU</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Part Name</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Supplier</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Stock Qty</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="bg-gray-800 divide-y divide-gray-700">
                {filteredInventory.map(item => {
                  const status = getStatus(item);
                  return (
                    <tr key={item.id} className="hover:bg-gray-700/50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-400">{item.sku}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">{item.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{item.supplier || 'N/A'}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-white">{item.stockQty}</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${status.color}`}>
                          {status.text}
                        </span>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
            {filteredInventory.length === 0 && (
              <div className="text-center py-16">
                <p className="text-gray-500">No inventory items match your search.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}

==================== app\(dashboard)\dashboard\media\page.tsx ====================

'use client';

import { useState, useMemo } from 'react';
import { mockProjects } from '@/lib/mock-data';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';

export default function MediaPage() {
  const allMedia = useMemo(() => 
    mockProjects.flatMap(project => 
      project.media.map(mediaItem => ({
        ...mediaItem,
        projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
        projectId: project.id
      }))
    ), 
  []);

  const allCategories = useMemo(() => 
    ['All Categories', ...Array.from(new Set(allMedia.map(item => item.category)))], 
  [allMedia]);

  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [selectedCategory, setSelectedCategory] = useState('All Categories');
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const filteredMedia = allMedia.filter(item => {
    const projectMatch = selectedProject === 'All Projects' || item.projectId === selectedProject;
    const categoryMatch = selectedCategory === 'All Categories' || item.category === selectedCategory;
    return projectMatch && categoryMatch;
  });

  return (
    <>
      <div className="mb-8">
        {/* Text colors reverted for dark background */}
        <h1 className="text-3xl font-bold text-white">Global Media Library</h1>
        <p className="text-gray-400">View and filter all photos from all projects.</p>
      </div>

      {/* Filter Controls */}
      <div className="flex flex-col sm:flex-row gap-4 mb-8 p-4 bg-gray-800 border border-white/10 rounded-lg shadow-soft">
        <div>
          <label htmlFor="project-filter" className="block text-sm font-medium text-gray-300">Filter by Project</label>
          <select
            id="project-filter"
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
            className="mt-1 block w-full sm:w-64 rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500"
          >
            <option>All Projects</option>
            {mockProjects.map(p => <option key={p.id} value={p.id}>{`${p.car.year} ${p.car.make} ${p.car.model}`}</option>)}
          </select>
        </div>
        <div>
          <label htmlFor="category-filter" className="block text-sm font-medium text-gray-300">Filter by Category</label>
          <select
            id="category-filter"
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="mt-1 block w-full sm:w-64 rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500"
          >
            {allCategories.map(c => <option key={c} value={c}>{c}</option>)}
          </select>
        </div>
      </div>

      {/* Image Grid */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        {filteredMedia.map(item => (
          <motion.div
            key={item.id}
            layout
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            className="relative aspect-square rounded-lg overflow-hidden cursor-pointer group shadow-soft"
            onClick={() => setSelectedImage(item.url)}
          >
            <Image
              src={item.url}
              alt={item.caption}
              fill
              sizes="(max-width: 768px) 50vw, (max-width: 1200px) 33vw, 25vw"
              className="object-cover transition-transform duration-300 group-hover:scale-105"
            />
            <div className="absolute bottom-0 left-0 right-0 p-2 bg-gradient-to-t from-black/60 to-transparent">
              <p className="text-white text-xs font-semibold truncate">{item.projectName}</p>
              <p className="text-gray-300 text-xs truncate">{item.caption}</p>
            </div>
          </motion.div>
        ))}
      </div>
       {filteredMedia.length === 0 && (
        <div className="text-center py-16 bg-gray-800 rounded-lg">
          <p className="text-gray-500">No photos match the selected filters.</p>
        </div>
      )}


      {/* Lightbox Modal */}
      <AnimatePresence>
        {selectedImage && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
            onClick={() => setSelectedImage(null)}
          >
            <motion.div
              layoutId={selectedImage}
              className="relative w-full max-w-5xl max-h-[90vh]"
              onClick={(e) => e.stopPropagation()}
            >
              <Image
                src={selectedImage}
                alt="Selected restoration image"
                width={1200}
                height={800}
                style={{ width: '100%', height: 'auto', objectFit: 'contain', maxHeight: '90vh' }}
              />
            </motion.div>
            <motion.button
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5 }}
              className="absolute top-4 right-4 text-white hover:text-red-500"
              onClick={() => setSelectedImage(null)}
            >
              <X className="w-8 h-8" />
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

==================== app\(dashboard)\dashboard\my-tasks\page.tsx ====================

// [path]: app/(dashboard)/dashboard/my-tasks/page.tsx

'use client';

import { useState, useEffect, useMemo } from 'react';
import { getProjects, logTaskTime, updateTaskStatus, addNoteToTask, getShifts } from '@/lib/data-service';
import { mockTechnicians } from '@/lib/mock-data';
import { AssignedTask, SubTask, Project, Shift } from '@/lib/types';
import { CheckCircle2, Circle, Clock, AlertOctagon, Flame, CheckSquare, Briefcase, Zap } from 'lucide-react';
import { useAuth } from '@/app/AuthContext';
import JobCardModal from '@/components/dashboard/JobCardModal';
import { startOfWeek, parseISO, differenceInMilliseconds } from 'date-fns';
import ProgressBar from '@/components/ui/ProgressBar'; // <-- NEW IMPORT
import { calculateOverallProgress } from '@/lib/utils'; // <-- NEW IMPORT

const calculateShiftDuration = (shift: Shift): number => {
    if (!shift.clockOutTime) return 0;
    const duration = differenceInMilliseconds(parseISO(shift.clockOutTime), parseISO(shift.clockInTime));
    const breakDuration = shift.breaks.reduce((acc, br) => {
        if (br.endTime) {
            return acc + differenceInMilliseconds(parseISO(br.endTime), parseISO(br.startTime));
        }
        return acc;
    }, 0);
    return (duration - breakDuration) / (1000 * 60 * 60); // convert to hours
};

export default function TechnicianTasksPage() {
  const { user, isLoading } = useAuth();
  const [allProjects, setAllProjects] = useState<Project[]>([]);
  const [allShifts, setAllShifts] = useState<Shift[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState<AssignedTask | null>(null);
  const [activeTimerTaskId, setActiveTimerTaskId] = useState<string | null>(null);
  const [timerStartTime, setTimerStartTime] = useState<number | null>(null);

  useEffect(() => {
    if (!isLoading && user) {
        setAllProjects(getProjects());
        setAllShifts(getShifts());
    }
  }, [user, isLoading]);

  const myTasks = useMemo(() => {
    if (!user || user.role !== 'Technician') return [];
    
    const currentTechnician = mockTechnicians.find(tech => tech.userId === user.id);
    if (!currentTechnician) return [];

    const assignedTasks: AssignedTask[] = [];
    allProjects.forEach(project => {
        if (project.status === 'Active' || project.status === 'On Hold') {
            project.categories.forEach(category => {
                category.subTasks.forEach(task => {
                    if (task.assignedTo === currentTechnician.id) {
                        assignedTasks.push({ ...task, projectId: project.id, projectName: `${project.car.year} ${project.car.make} ${project.car.model}`, categoryName: category.name });
                    }
                });
            });
        }
    });

    const priorityOrder: Record<SubTask['priority'], number> = { 'Urgent': 1, 'High': 2, 'Normal': 3, 'Low': 4 };
    const statusOrder = { 'In Progress': 1, 'Pending': 2, 'Awaiting Approval': 3, 'Completed': 4 };
    
    assignedTasks.sort((a, b) => {
        if (statusOrder[a.status] !== statusOrder[b.status]) { return statusOrder[a.status] - statusOrder[b.status]; }
        return priorityOrder[a.priority] - priorityOrder[b.priority];
    });
    
    return assignedTasks;
  }, [allProjects, user]);

  const performanceStats = useMemo(() => {
    if(!user) return { tasksCompletedThisWeek: 0, taskHoursThisWeek: 0, shiftHoursThisWeek: 0, utilization: 0, efficiency: 0 };

    const weeklyStartDate = startOfWeek(new Date(), { weekStartsOn: 1 });
    let tasksCompletedThisWeek = 0;
    let taskHoursThisWeek = 0;
    let shiftHoursThisWeek = 0;
    let estimatedHoursForCompletedTasks = 0;

    const currentTechnician = mockTechnicians.find(tech => tech.userId === user.id);

    allProjects.forEach(project => {
        project.categories.forEach(category => {
            category.subTasks.forEach(task => {
                if(task.assignedTo === currentTechnician?.id && task.status === 'Completed' && task.completedAt && parseISO(task.completedAt) >= weeklyStartDate) {
                    tasksCompletedThisWeek++;
                    const actualHours = task.actualHours || 0;
                    taskHoursThisWeek += actualHours;
                    estimatedHoursForCompletedTasks += task.estimateHours || actualHours; // Fallback to actual if no estimate
                }
            });
        });
    });

    allShifts.forEach(shift => {
        if(shift.userId === user.id && parseISO(shift.clockInTime) >= weeklyStartDate){
            shiftHoursThisWeek += calculateShiftDuration(shift);
        }
    });
    
    const utilization = shiftHoursThisWeek > 0 ? (taskHoursThisWeek / shiftHoursThisWeek) * 100 : 0;
    const efficiency = taskHoursThisWeek > 0 ? (estimatedHoursForCompletedTasks / taskHoursThisWeek) * 100 : 0;

    return { tasksCompletedThisWeek, taskHoursThisWeek, shiftHoursThisWeek, utilization: Math.min(utilization, 100), efficiency: Math.min(efficiency, 200) }; // Cap efficiency at 200%
  }, [user, allProjects, allShifts]);

  const updateProjectInState = (updatedProject: Project) => {
      setAllProjects(currentProjects => 
          currentProjects.map(p => p.id === updatedProject.id ? updatedProject : p)
      );
  };

  const handleStatusChange = (taskId: string, categoryId: string, newStatus: AssignedTask['status']) => {
    const taskToUpdate = myTasks.find(t => t.id === taskId);
    if (taskToUpdate) {
        const updatedProject = updateTaskStatus(taskToUpdate.projectId, categoryId, taskId, newStatus);
        if (updatedProject) {
            updateProjectInState(updatedProject);
            setSelectedTask(current => current && current.id === taskId ? { ...current, status: newStatus } : current);
        }
    }
  };

  const handleAddNote = (taskId: string, categoryId: string, noteText: string) => {
    if (!user) return;
    const taskToUpdate = myTasks.find(t => t.id === taskId);
    if (taskToUpdate) {
      const newNoteData = { authorId: user.id, authorName: user.name, note: noteText, createdAt: new Date().toISOString(), type: 'Log' as const };
      const updatedProject = addNoteToTask(taskToUpdate.projectId, categoryId, taskId, newNoteData);
      if(updatedProject){
          updateProjectInState(updatedProject);
          const updatedTaskNotes = updatedProject.categories.flatMap(c => c.subTasks).find(t => t.id === taskId)?.internalNotes;
          setSelectedTask(current => current && current.id === taskId ? { ...current, internalNotes: updatedTaskNotes } : current);
      }
    }
  };

  const handleStartTimer = (task: AssignedTask) => {
    if (activeTimerTaskId) {
        alert("Another timer is already running. Please stop it before starting a new one.");
        return;
    }
    setActiveTimerTaskId(task.id);
    setTimerStartTime(Date.now());
  };

  const handleStopTimer = () => {
    if (!activeTimerTaskId || !timerStartTime) return;
    const elapsedHours = (Date.now() - timerStartTime) / (1000 * 60 * 60);
    const taskToUpdate = myTasks.find(t => t.id === activeTimerTaskId);
    if (taskToUpdate) {
        const updatedProject = logTaskTime(taskToUpdate.projectId, taskToUpdate.categoryName, taskToUpdate.id, elapsedHours);
        if(updatedProject) {
            updateProjectInState(updatedProject);
            const updatedHours = (taskToUpdate.actualHours || 0) + elapsedHours;
            setSelectedTask(current => current && current.id === activeTimerTaskId ? { ...current, actualHours: updatedHours } : current);
        }
    }
    setActiveTimerTaskId(null);
    setTimerStartTime(null);
  };

  const handleTaskClick = (task: AssignedTask) => {
    setSelectedTask(task);
    setIsModalOpen(true);
  };

  const getStatusIndicator = (status: SubTask['status']) => {
    switch(status) {
        case 'Completed': return <CheckCircle2 className="h-5 w-5 text-green-500" />;
        case 'Awaiting Approval': return <Clock className="h-5 w-5 text-yellow-500" />;
        default: return <Circle className="h-5 w-5 text-gray-600" />;
    }
  }

  const getPriorityStyles = (priority: SubTask['priority']): { indicator: string; tag: string; icon: React.ReactNode } => {
    switch(priority) {
        case 'Urgent': return { indicator: 'border-l-4 border-red-500', tag: 'bg-red-900/80 text-red-300', icon: <Flame className="h-3 w-3 mr-1.5" /> };
        case 'High': return { indicator: 'border-l-4 border-yellow-500', tag: 'bg-yellow-900/80 text-yellow-300', icon: <AlertOctagon className="h-3 w-3 mr-1.5" /> };
        default: return { indicator: 'border-l-4 border-transparent', tag: '', icon: null };
    }
  };

  if (isLoading) return <p className="text-gray-400">Loading your workshop...</p>
  if (!user) return <p className="text-red-500">Error: Not logged in.</p>

  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return `Good Morning, ${user.name.split(' ')[0]}`;
    if (hour < 18) return `Good Afternoon, ${user.name.split(' ')[0]}`;
    return `Good Evening, ${user.name.split(' ')[0]}`;
  }

  return (
    <>
      <div>
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white">{getGreeting()}</h1>
          <p className="text-gray-400">Here are your tasks for today, with the highest priority items at the top.</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-gray-800 border border-white/10 p-4 rounded-lg flex items-center">
                <CheckSquare className="h-8 w-8 text-green-400 mr-4"/>
                <div>
                    <p className="text-2xl font-bold text-white">{performanceStats.tasksCompletedThisWeek}</p>
                    <p className="text-sm text-gray-400">Tasks Completed (Week)</p>
                </div>
            </div>
            <div className="bg-gray-800 border border-white/10 p-4 rounded-lg flex items-center">
                <Zap className="h-8 w-8 text-yellow-400 mr-4"/>
                <div>
                    <p className="text-2xl font-bold text-white">{performanceStats.efficiency.toFixed(0)}%</p>
                    <p className="text-sm text-gray-400">Efficiency vs. Estimates</p>
                </div>
            </div>
            <div className="bg-gray-800 border border-white/10 p-4 rounded-lg flex items-center">
                <Briefcase className="h-8 w-8 text-blue-400 mr-4"/>
                <div>
                    <p className="text-2xl font-bold text-white">{performanceStats.utilization.toFixed(0)}%</p>
                    <p className="text-sm text-gray-400">Workshop Utilization</p>
                </div>
            </div>
        </div>

        <div className="space-y-4">
          {myTasks.filter(t => t.status !== 'Completed').length > 0 ?
            myTasks.filter(t => t.status !== 'Completed').map(task => {
              const priorityStyles = getPriorityStyles(task.priority);
              const parentProject = allProjects.find(p => p.id === task.projectId);
              const projectProgress = parentProject ? calculateOverallProgress(parentProject) : 0;
              return (
                  <div key={task.id} onClick={() => handleTaskClick(task)} className={`bg-gray-800 border border-white/10 rounded-lg overflow-hidden transition-all hover:border-red-500/50 hover:bg-gray-700/50 cursor-pointer ${priorityStyles.indicator}`}>
                      <div className="p-4 flex items-center justify-between">
                        <div className="flex items-center">
                            <div className="mr-4">{getStatusIndicator(task.status)}</div>
                            <div>
                                <p className="font-semibold text-lg text-white">{task.name}</p>
                                <span className="text-sm text-gray-400">{task.projectName}</span>
                            </div>
                        </div>
                        <div className="text-right flex items-center space-x-4">
                            {task.priority !== 'Normal' && task.priority !== 'Low' && (
                                <span className={`px-3 py-1 text-xs font-semibold rounded-full inline-flex items-center ${priorityStyles.tag}`}>
                                    {priorityStyles.icon} {task.priority}
                                </span>
                            )}
                            <span className={`px-3 py-1 text-xs font-medium rounded-full ${task.status === 'Awaiting Approval' ? 'bg-yellow-900/50 text-yellow-300' : 'bg-blue-900/50 text-blue-300'}`}>
                                {task.status}
                            </span>
                        </div>
                      </div>
                      <div className="px-4 pb-2">
                        <ProgressBar progress={projectProgress} />
                      </div>
                  </div>
              );
            }) : (
            <div className="text-center py-16 bg-gray-800 rounded-lg"><p className="text-gray-500">You have no active tasks assigned.</p></div>
          )}
        </div>
      </div>
      <JobCardModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        task={selectedTask}
        activeTimerTaskId={activeTimerTaskId}
        timerStartTime={timerStartTime}
        onStartTimer={handleStartTimer}
        onStopTimer={handleStopTimer}
        onStatusChange={handleStatusChange}
        onAddNote={handleAddNote}
      />
    </>
  );
}

==================== app\(dashboard)\dashboard\parts\page.tsx ====================

// [path]: app/(dashboard)/dashboard/parts/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { getProjects } from '@/lib/data-service';
import { Project } from '@/lib/types';
import PartsBoard from '@/components/dashboard/PartsBoard';

export default function PartsPage() {
    const [projects, setProjects] = useState<Project[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        setProjects(getProjects());
        setIsLoading(false);
    }, []);

    if (isLoading) {
        return <div className="flex items-center justify-center h-full"><p className="text-gray-400">Loading Parts Hub...</p></div>;
    }

    return (
        <div>
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-white">Parts & Procurement Hub</h1>
                <p className="text-gray-400">A global overview of all parts required for active jobs.</p>
            </div>
            <PartsBoard allProjects={projects} />
        </div>
    );
}

==================== app\(dashboard)\dashboard\performance\page.tsx ====================

// [path]: app/(dashboard)/dashboard/performance/page.tsx

'use client';

import { useState, useMemo } from 'react';
import { getProjects, getShifts } from '@/lib/data-service';
import { mockUsers, mockTechnicians } from '@/lib/mock-data';
import { Project, Shift } from '@/lib/types';
import { startOfWeek, startOfMonth, parseISO, differenceInMilliseconds } from 'date-fns';
import PerformanceBarChart from '@/components/dashboard/PerformanceBarChart';
import TechnicianPerformanceCard from '@/components/dashboard/TechnicianPerformanceCard';
import TechnicianDetailModal from '@/components/dashboard/TechnicianDetailModal';

type TimeRange = 'This Week' | 'This Month' | 'All Time';

interface PerformanceStats {
  technicianId: string;
  name: string;
  tasksCompleted: number;
  taskHours: number;
  shiftHours: number;
  utilization: number;
}

const calculateShiftDuration = (shift: Shift): number => {
    if (!shift.clockOutTime) return 0;
    const duration = differenceInMilliseconds(parseISO(shift.clockOutTime), parseISO(shift.clockInTime));
    const breakDuration = shift.breaks.reduce((acc, br) => {
        if (br.endTime) {
            return acc + differenceInMilliseconds(parseISO(br.endTime), parseISO(br.startTime));
        }
        return acc;
    }, 0);
    return (duration - breakDuration) / (1000 * 60 * 60); // convert to hours
};

export default function PerformancePage() {
  const [timeRange, setTimeRange] = useState<TimeRange>('This Week');
  const allProjects: Project[] = useMemo(() => getProjects(), []);
  const allShifts: Shift[] = useMemo(() => getShifts(), []);
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTechnician, setSelectedTechnician] = useState<{id: string; name: string} | null>(null);

  const performanceData: PerformanceStats[] = useMemo(() => {
    const now = new Date();
    let startDate: Date;

    if (timeRange === 'This Week') startDate = startOfWeek(now, { weekStartsOn: 1 });
    else if (timeRange === 'This Month') startDate = startOfMonth(now);
    else startDate = new Date(0);

    const technicianData: Record<string, { tasksCompleted: number; taskHours: number; shiftHours: number; }> = {};
    
    mockTechnicians.forEach(tech => {
        technicianData[tech.userId] = { tasksCompleted: 0, taskHours: 0, shiftHours: 0 };
    });

    allProjects.forEach(project => {
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          if (task.status === 'Completed' && task.completedAt && task.assignedTo) {
            const tech = mockTechnicians.find(t => t.id === task.assignedTo);
            if(tech && technicianData[tech.userId] && parseISO(task.completedAt) >= startDate){
                technicianData[tech.userId].tasksCompleted += 1;
                technicianData[tech.userId].taskHours += task.actualHours || 0;
            }
          }
        });
      });
    });
    
    allShifts.forEach(shift => {
        if(technicianData[shift.userId] && parseISO(shift.clockInTime) >= startDate){
            technicianData[shift.userId].shiftHours += calculateShiftDuration(shift);
        }
    });

    return mockTechnicians.map(tech => {
        const data = technicianData[tech.userId];
        const user = mockUsers.find(u => u.id === tech.userId);
        const utilization = data.shiftHours > 0 ? (data.taskHours / data.shiftHours) * 100 : 0;
        return {
            technicianId: tech.userId,
            name: user?.name || tech.name,
            tasksCompleted: data.tasksCompleted,
            taskHours: data.taskHours,
            shiftHours: data.shiftHours,
            utilization: Math.min(utilization, 100),
        };
    });
  }, [allProjects, allShifts, timeRange]);

  const chartData = performanceData.map(tech => ({
      name: tech.name,
      taskHours: parseFloat(tech.taskHours.toFixed(2)),
      shiftHours: parseFloat(tech.shiftHours.toFixed(2)),
  }));

  const timeRangeFilters: TimeRange[] = ['This Week', 'This Month', 'All Time'];

  const handleCardClick = (technician: PerformanceStats) => {
    setSelectedTechnician({ id: technician.technicianId, name: technician.name });
    setIsModalOpen(true);
  };

  return (
    <>
      <div>
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white">Technician Performance</h1>
            <p className="text-gray-400">Productivity overview for the workshop team. Click a card for details.</p>
          </div>
          <div className="flex items-center space-x-2 bg-gray-800 border border-white/10 rounded-lg p-1 mt-4 sm:mt-0">
            {timeRangeFilters.map(filter => (
              <button
                key={filter}
                onClick={() => setTimeRange(filter)}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                  timeRange === filter ? 'bg-red-600 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'
                }`}
              >
                {filter}
              </button>
            ))}
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {performanceData.map(techStats => (
            <TechnicianPerformanceCard 
              key={techStats.technicianId}
              technicianStats={techStats}
              onClick={() => handleCardClick(techStats)}
            />
          ))}
        </div>

        <div>
          <h2 className="text-2xl font-bold text-white mb-4">Shift Hours vs. Task Hours</h2>
          <PerformanceBarChart data={chartData} />
        </div>
      </div>

      <TechnicianDetailModal 
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        technician={selectedTechnician}
        projects={allProjects}
        timeRange={timeRange}
      />
    </>
  );
}

==================== app\(dashboard)\dashboard\projects\page.tsx ====================

// [path]: app/(dashboard)/dashboard/projects/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { getProjects } from '@/lib/data-service';
import { Project } from '@/lib/types';
import Button from '@/components/ui/Button';
import { Plus } from 'lucide-react';
import ProjectsKanbanView from '@/components/dashboard/ProjectsKanbanView';
import ProjectsListView from '@/components/dashboard/ProjectsListView';
import ViewSwitcher from '@/components/ui/ViewSwitcher';

type View = 'kanban' | 'list';

export default function ProjectsPage() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [currentView, setCurrentView] = useState<View>('kanban');

  useEffect(() => {
    setProjects(getProjects());
  }, []);

  return (
    <div className="flex flex-col h-[calc(100vh-5rem)]">
      <div className="flex justify-between items-center mb-6 flex-shrink-0">
        <div>
            <h1 className="text-3xl font-bold text-white">Projects Command Center</h1>
            <p className="text-gray-400">A visual overview of the workshop floor.</p>
        </div>
        <div className="flex items-center space-x-4">
            <ViewSwitcher currentView={currentView} onViewChange={setCurrentView} />
            <Button href="/dashboard/projects/new" variant="primary">
                <Plus className="-ml-1 mr-2 h-5 w-5" />
                New Project
            </Button>
        </div>
      </div>

      <div className="flex-grow">
        {currentView === 'kanban' ? (
          <ProjectsKanbanView projects={projects} />
        ) : (
          <ProjectsListView projects={projects} />
        )}
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\projects\new\page.tsx ====================

// [path]: app/(dashboard)/dashboard/projects/new/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { Car, User, ListChecks, ArrowRight } from 'lucide-react';
// --- MODIFIED: Corrected the import path for getTemplates ---
import { getTemplates, addProject } from '@/lib/data-service';
import { Category } from '@/lib/types';
import Input from '@/components/ui/Input';
import Button from '@/components/ui/Button';

export default function NewProjectPage() {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [allTemplates, setAllTemplates] = useState<Category[][]>([]);

  useEffect(() => {
    setAllTemplates(getTemplates());
  }, []);

  const [customerName, setCustomerName] = useState('');
  const [carYear, setCarYear] = useState('');
  const [carMake, setCarMake] = useState('');
  const [carModel, setCarModel] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<Category[]>([]);

  const handleSaveProject = () => {
    if (!customerName || !carYear || !carMake || !carModel) {
        alert('Please fill out all car and customer details.');
        return;
    }

    addProject({
        customerName: customerName,
        car: { year: parseInt(carYear), make: carMake, model: carModel },
        status: 'Active',
        holdReason: '',
        createdAt: new Date().toISOString().split('T')[0],
        categories: selectedTemplate,
        timeline: [{ id: `t-${Date.now()}`, date: new Date().toISOString().split('T')[0], update: 'Project created and added to the system.', category: 'Project Start' }],
        media: [],
        messages: [],
        financials: { invoices: [], totalQuoted: 0, totalPaid: 0 },
    });
    router.push('/dashboard/projects');
  };

  const selectTemplate = (template: Category[]) => {
    setSelectedTemplate(template);
    setStep(3);
  };

  const steps = [
    { number: 1, title: 'Customer & Car', icon: User },
    { number: 2, title: 'Project Type', icon: ListChecks },
    { number: 3, title: 'Review & Save', icon: Car },
  ];

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Create New Project</h1>
        <p className="text-gray-400">Follow the steps to add a new restoration job.</p>
      </div>
      
      <div className="mb-8 p-4 bg-gray-800 border border-white/10 rounded-lg shadow-soft">
        <ol className="flex items-center w-full">
           {steps.map((s, index) => (
             <li key={s.number} className={`flex w-full items-center ${index < steps.length - 1 ? "after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-700 after:border-1 after:inline-block" : ""}`}>
              <span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${step >= s.number ? 'bg-red-600 text-white' : 'bg-gray-700 text-gray-400'}`}>
                <s.icon className="w-5 h-5" />
              </span>
            </li>
          ))}
        </ol>
      </div>

      <AnimatePresence mode="wait">
        <motion.div key={step} initial={{ opacity: 0, x: 50 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -50 }} transition={{ duration: 0.3 }}>
          {step === 1 && (
            <div className="bg-gray-800 border border-white/10 p-8 rounded-lg shadow-soft">
              <h2 className="text-2xl font-bold text-white mb-6">Step 1: Customer & Car Details</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Input placeholder="Customer Full Name" value={customerName} onChange={e => setCustomerName(e.target.value)} required />
                <Input placeholder="Car Year" type="number" value={carYear} onChange={e => setCarYear(e.target.value)} required />
                <Input placeholder="Car Make" value={carMake} onChange={e => setCarMake(e.target.value)} required />
                <Input placeholder="Car Model" value={carModel} onChange={e => setCarModel(e.target.value)} required />
              </div>
              <Button onClick={() => setStep(2)} className="mt-8" disabled={!customerName || !carYear || !carMake || !carModel}>
                Next: Select Project Type <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          )}

          {step === 2 && (
            <div className="bg-gray-800 border border-white/10 p-8 rounded-lg shadow-soft">
              <h2 className="text-2xl font-bold text-white mb-6">Step 2: Select Project Type</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {allTemplates.map((template, index) => {
                  const templateName = template[0]?.name.split(' - ')[0] || `Template ${index + 1}`;
                  return (
                    <div key={index} onClick={() => selectTemplate(template)} className="p-6 border border-gray-700 rounded-lg hover:bg-gray-700 cursor-pointer text-center">
                      <h3 className="font-bold text-lg text-white">{templateName}</h3>
                      <p className="text-sm text-gray-400">{template.length} categories</p>
                    </div>
                  );
                })}
                <div onClick={() => selectTemplate([])} className="p-6 border border-gray-700 rounded-lg hover:bg-gray-700 cursor-pointer text-center">
                  <h3 className="font-bold text-lg text-white">Custom Job</h3>
                  <p className="text-sm text-gray-400">Start with a blank slate</p>
                </div>
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="bg-gray-800 border border-white/10 p-8 rounded-lg shadow-soft">
              <h2 className="text-2xl font-bold text-white mb-6">Step 3: Review & Save</h2>
              <div className="space-y-2 text-gray-300 border border-gray-700 p-4 rounded-md">
                <p><strong>Customer:</strong> {customerName}</p>
                <p><strong>Vehicle:</strong> {carYear} {carMake} {carModel}</p>
                <p><strong>Tasks:</strong> {selectedTemplate.length > 0 ? `${selectedTemplate.reduce((acc, cat) => acc + cat.subTasks.length, 0)} tasks across ${selectedTemplate.length} categories.` : 'Custom job (add tasks later)'}</p>
              </div>
              <Button onClick={handleSaveProject} variant="primary" className="mt-6">
                Save New Project
              </Button>
            </div>
           )}
        </motion.div>
      </AnimatePresence>
    </div>
  );
}

==================== app\(dashboard)\dashboard\projects\[projectId]\page.tsx ====================

// [path]: app/(dashboard)/dashboard/projects/[projectId]/page.tsx

'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { getProjectById, updateProject, deleteProject, updateCategoryQaStatus, addInvoiceToProject, addPartToTask } from '@/lib/data-service'; // <-- ADD addPartToTask
import { mockTechnicians } from '@/lib/mock-data';
import { Project, TimelineUpdate, Technician, Message, SubTask, Invoice, Part } from '@/lib/types'; // <-- ADD Part
import ProjectHeader from '@/components/ProjectHeader';
import InteractiveProgressCategory from '@/components/dashboard/InteractiveProgressCategory';
import AddTimelineForm from '@/components/dashboard/AddTimelineForm';
import ConfirmationModal from '@/components/ui/ConfirmationModal';
import EditProjectModal from '@/components/dashboard/EditProjectModal';
import Button from '@/components/ui/Button';
import ProjectStatusUpdater from '@/components/dashboard/ProjectStatusUpdater';
import Timeline from '@/components/Timeline';
import { calculateOverallProgress } from '@/lib/utils';
import MessagingCenter from '@/components/dashboard/MessagingCenter';
import FinancialsPanel from '@/components/dashboard/FinancialsPanel';
import { useAuth } from '@/app/AuthContext';
import AddInvoiceModal from '@/components/dashboard/AddInvoiceModal';
import AddPartFromInventoryModal from '@/components/dashboard/AddPartFromInventoryModal'; // <-- NEW IMPORT

export default function WorkshopProjectPage({ params }: { params: { projectId: string } }) {
  const router = useRouter();
  const { user } = useAuth();
  const [project, setProject] = useState<Project | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isInvoiceModalOpen, setIsInvoiceModalOpen] = useState(false);
  const [isAddPartModalOpen, setIsAddPartModalOpen] = useState(false); // <-- NEW STATE
  const [taskForAddingPart, setTaskForAddingPart] = useState<{taskId: string, categoryId: string} | null>(null); // <-- NEW STATE
  const [technicians, setTechnicians] = useState<Technician[]>([]);

  useEffect(() => {
    const foundProject = getProjectById(params.projectId);
    setProject(foundProject || null);
    setTechnicians(mockTechnicians);
    setIsLoading(false);
  }, [params.projectId]);

  const saveProject = useCallback((updatedProject: Project) => {
    updateProject(updatedProject.id, updatedProject);
  }, []);

  const handleQaStatusChange = useCallback((categoryId: string, qaPassed: boolean) => {
    if (!project) return;
    const updatedProject = updateCategoryQaStatus(project.id, categoryId, qaPassed);
    if (updatedProject) {
        setProject(updatedProject);
    }
  }, [project]);

  const handleInvoiceAdd = (invoiceData: Omit<Invoice, 'id' | 'status' | 'dueDate'>) => {
    if (!project) return;
    const updatedProject = addInvoiceToProject(project.id, invoiceData);
    if (updatedProject) {
        setProject(updatedProject);
    }
  };

  // --- NEW HANDLER for opening the part modal ---
  const handleAddPartClick = (taskId: string, categoryId: string) => {
    setTaskForAddingPart({ taskId, categoryId });
    setIsAddPartModalOpen(true);
  };

  // --- NEW HANDLER for saving a part to a task ---
  const handleAddPartToTask = (partData: Omit<Part, 'id' | 'taskId' | 'status'>) => {
    if (!project || !taskForAddingPart) return;
    const { taskId, categoryId } = taskForAddingPart;
    const updatedProject = addPartToTask(project.id, categoryId, taskId, partData);
    if (updatedProject) {
        setProject(updatedProject);
    }
    setTaskForAddingPart(null);
  };

  const handleTaskStatusChange = (taskId: string, categoryId: string) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const newProject = {...currentProject, categories: currentProject.categories.map(cat => {
            if (cat.id === categoryId) {
                return {...cat, subTasks: cat.subTasks.map(task => {
                    if (task.id === taskId) {
                        const statusCycle: SubTask['status'][] = ['Pending', 'In Progress', 'Awaiting Approval', 'Completed'];
                        const currentIndex = statusCycle.indexOf(task.status);
                        const nextIndex = (currentIndex + 1) % statusCycle.length;
                        return { ...task, status: statusCycle[nextIndex] };
                    }
                    return task;
                })};
            }
            return cat;
        })};
        saveProject(newProject);
        return newProject;
    });
  };

  const handleToggleApproval = (taskId: string, categoryId: string) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const newProject = {...currentProject, categories: currentProject.categories.map(cat => (cat.id === categoryId ? {...cat, subTasks: cat.subTasks.map(task => (task.id === taskId ? { ...task, requiresClientApproval: !task.requiresClientApproval } : task))} : cat))};
        saveProject(newProject);
        return newProject;
    });
  };

  const handleTaskAssign = (taskId: string, categoryId: string, techId: string) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const newProject = {...currentProject, categories: currentProject.categories.map(cat => (cat.id === categoryId ? {...cat, subTasks: cat.subTasks.map(task => (task.id === taskId ? { ...task, assignedTo: techId || undefined } : task))} : cat))};
        saveProject(newProject);
        return newProject;
    });
  };

  const handleSendMessage = (message: Omit<Message, 'id' | 'createdAt' | 'authorRole'>) => {
    if (!user) return;
    setProject(currentProject => {
        if (!currentProject) return null;
        const newMessage: Message = { ...message, id: `msg-${Date.now()}`, createdAt: new Date().toISOString(), authorRole: user.role };
        const newProject = { ...currentProject, messages: [...currentProject.messages, newMessage] };
        saveProject(newProject);
        return newProject;
    });
  };

  const handleTimelineAdd = (newUpdate: Omit<TimelineUpdate, 'id' | 'date'>) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const newEntry: TimelineUpdate = { ...newUpdate, id: `t-${Date.now()}`, date: new Date().toISOString().split('T')[0] };
        const newProject = { ...currentProject, timeline: [newEntry, ...currentProject.timeline] };
        saveProject(newProject);
        return newProject;
    });
  };

  const handleStatusChange = (newStatus: Project['status'], holdReason: Project['holdReason']) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const reasonText = newStatus === 'On Hold' ? `Project on hold. Reason: ${holdReason}.` : `Project status changed to ${newStatus}.`;
        const newEntry: TimelineUpdate = { id: `t-status-${Date.now()}`, date: new Date().toISOString().split('T')[0], update: reasonText, category: 'Project Status' };
        const newProject = { ...currentProject, status: newStatus, holdReason: holdReason, timeline: [newEntry, ...currentProject.timeline] };
        saveProject(newProject);
        return newProject;
    });
  };

  const handleMarkAsPaid = (invoiceId: string) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const invoiceToPay = currentProject.financials.invoices.find(inv => inv.id === invoiceId);
        if (!invoiceToPay || invoiceToPay.status === 'Paid') return currentProject;
        const newProject = {...currentProject, financials: {...currentProject.financials, totalPaid: currentProject.financials.totalPaid + invoiceToPay.amount, invoices: currentProject.financials.invoices.map(inv => inv.id === invoiceId ? { ...inv, status: 'Paid' as const } : inv),}, status: (currentProject.status === 'On Hold' && currentProject.holdReason === 'Awaiting Payment') ? 'Active' as const : currentProject.status, holdReason: (currentProject.status === 'On Hold' && currentProject.holdReason === 'Awaiting Payment') ? '' : currentProject.holdReason, timeline: (currentProject.status === 'On Hold' && currentProject.holdReason === 'Awaiting Payment') ? [{ id: `t-payment-${Date.now()}`, date: new Date().toISOString().split('T')[0], update: `Payment for '${invoiceToPay.description}' received. Work is resuming.`, category: 'Financial' }, ...currentProject.timeline] : currentProject.timeline };
        saveProject(newProject);
        return newProject;
    });
  };

  const handleSaveEdits = (updatedData: Partial<Project>) => {
    setProject(currentProject => {
        if (!currentProject) return null;
        const newProject = { ...currentProject, ...updatedData };
        saveProject(newProject);
        return newProject;
    });
  };

  const handleDelete = () => {
    if (project) {
        deleteProject(project.id);
        router.push('/dashboard/projects');
    }
  };

  if (isLoading || !user) return <div className="flex items-center justify-center h-full"><p className="text-gray-400">Loading Project...</p></div>;
  if (!project) return <div className="flex items-center justify-center h-full"><h1 className="text-2xl font-bold text-red-500">Project Not Found</h1></div>;

  const overallProgress = calculateOverallProgress(project);
  
  return (
    <>
      <EditProjectModal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} onSave={handleSaveEdits} project={project} />
      <ConfirmationModal isOpen={isDeleteModalOpen} onClose={() => setIsDeleteModalOpen(false)} onConfirm={handleDelete} title="Delete Project" message={`Are you sure you want to permanently delete the ${project.car.year} ${project.car.make} ${project.car.model} project? This action cannot be undone.`} />
      <AddInvoiceModal isOpen={isInvoiceModalOpen} onClose={() => setIsInvoiceModalOpen(false)} onSave={handleInvoiceAdd} />
      {/* --- NEW MODAL RENDER --- */}
      <AddPartFromInventoryModal isOpen={isAddPartModalOpen} onClose={() => setIsAddPartModalOpen(false)} onSave={handleAddPartToTask} />

      <div>
        <ProjectHeader project={project} overallProgress={overallProgress} onEdit={() => setIsEditModalOpen(true)} />
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            <div id="financials" className="scroll-mt-24"><FinancialsPanel project={project} onMarkAsPaid={handleMarkAsPaid} onAddInvoiceClick={() => setIsInvoiceModalOpen(true)} /></div>
            <div id="messages" className="scroll-mt-24"><MessagingCenter project={project} currentUserRole={user.role} onSendMessage={handleSendMessage} /></div>
            <div id="progress" className="scroll-mt-24">
              <h2 className="text-2xl font-bold mb-4 text-white">Manage Progress</h2>
              <div className="space-y-6">
                {project.categories.map(category => (
                  <InteractiveProgressCategory 
                    key={category.id} 
                    category={category}
                    technicians={technicians}
                    onTaskToggle={handleTaskStatusChange}
                    onTaskAssign={handleTaskAssign}
                    onToggleApproval={handleToggleApproval}
                    onQaStatusChange={handleQaStatusChange}
                    onAddPartClick={handleAddPartClick} // <-- PASS NEW HANDLER
                  />
                ))}
              </div>
            </div>
          </div>
          <div className="lg:col-span-1 space-y-8">
            <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft space-y-6 divide-y divide-gray-700">
              <div><h3 className="text-xl font-bold mb-4 text-white">Workshop Tools</h3><AddTimelineForm project={project} onAddUpdate={handleTimelineAdd} /></div>
              <div className="pt-6"><h3 className="text-xl font-bold mb-4 text-white">Manage Status</h3><ProjectStatusUpdater currentStatus={project.status} onStatusChange={handleStatusChange} /></div>
              <div className="pt-6"><Button onClick={() => setIsDeleteModalOpen(true)} variant="outline" className="w-full">Delete Project</Button></div>
            </div>
            <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
               <h2 className="text-xl font-bold text-white mb-4">Project Timeline</h2>
               <Timeline updates={project.timeline} />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

==================== app\(dashboard)\dashboard\reports\page.tsx ====================

// [path]: app/(dashboard)/dashboard/reports/page.tsx

'use client';

import { useState, useMemo } from 'react';
import { getProjects, getShifts } from '@/lib/data-service';
import { mockUsers, mockTechnicians } from '@/lib/mock-data';
import { Project, Shift } from '@/lib/types';
import { startOfWeek, startOfMonth, parseISO, differenceInMilliseconds } from 'date-fns';
import { ArrowUpDown } from 'lucide-react';

type TimeRange = 'This Week' | 'This Month' | 'All Time';

interface PerformanceStats {
  technicianId: string;
  name: string;
  tasksCompleted: number;
  taskHours: number;
  shiftHours: number;
  utilization: number;
}

type SortKey = keyof PerformanceStats;

const calculateShiftDuration = (shift: Shift): number => {
    if (!shift.clockOutTime) return 0;
    const duration = differenceInMilliseconds(parseISO(shift.clockOutTime), parseISO(shift.clockInTime));
    const breakDuration = shift.breaks.reduce((acc, br) => {
        if (br.endTime) {
            return acc + differenceInMilliseconds(parseISO(br.endTime), parseISO(br.startTime));
        }
        return acc;
    }, 0);
    return (duration - breakDuration) / (1000 * 60 * 60);
};

export default function ReportsPage() {
  const [timeRange, setTimeRange] = useState<TimeRange>('This Week');
  const [sortConfig, setSortConfig] = useState<{ key: SortKey; direction: 'ascending' | 'descending' }>({ key: 'utilization', direction: 'descending' });
  
  const allProjects: Project[] = useMemo(() => getProjects(), []);
  const allShifts: Shift[] = useMemo(() => getShifts(), []);

  const performanceData: PerformanceStats[] = useMemo(() => {
    const now = new Date();
    let startDate: Date;

    if (timeRange === 'This Week') startDate = startOfWeek(now, { weekStartsOn: 1 });
    else if (timeRange === 'This Month') startDate = startOfMonth(now);
    else startDate = new Date(0);

    const techDataMap: Record<string, { tasksCompleted: number; taskHours: number; shiftHours: number; }> = {};
    mockTechnicians.forEach(tech => {
        techDataMap[tech.userId] = { tasksCompleted: 0, taskHours: 0, shiftHours: 0 };
    });

    allProjects.forEach(p => p.categories.forEach(c => c.subTasks.forEach(task => {
        const tech = mockTechnicians.find(t => t.id === task.assignedTo);
        if (task.status === 'Completed' && task.completedAt && tech && techDataMap[tech.userId] && parseISO(task.completedAt) >= startDate) {
            techDataMap[tech.userId].tasksCompleted++;
            techDataMap[tech.userId].taskHours += task.actualHours || 0;
        }
    })));

    allShifts.forEach(shift => {
        if (techDataMap[shift.userId] && parseISO(shift.clockInTime) >= startDate) {
            techDataMap[shift.userId].shiftHours += calculateShiftDuration(shift);
        }
    });

    return mockTechnicians.map(tech => {
        const data = techDataMap[tech.userId];
        const user = mockUsers.find(u => u.id === tech.userId);
        const utilization = data.shiftHours > 0 ? (data.taskHours / data.shiftHours) * 100 : 0;
        return {
            technicianId: tech.userId,
            name: user?.name || 'Unknown',
            tasksCompleted: data.tasksCompleted,
            taskHours: data.taskHours,
            shiftHours: data.shiftHours,
            utilization: Math.min(utilization, 100),
        };
    });
  }, [allProjects, allShifts, timeRange]);
  
  const sortedData = useMemo(() => {
    const sortableData = [...performanceData];
    sortableData.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
            return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
            return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
    });
    return sortableData;
  }, [performanceData, sortConfig]);

  const requestSort = (key: SortKey) => {
    let direction: 'ascending' | 'descending' = 'descending';
    if (sortConfig.key === key && sortConfig.direction === 'descending') {
        direction = 'ascending';
    }
    setSortConfig({ key, direction });
  };

  const timeRangeFilters: TimeRange[] = ['This Week', 'This Month', 'All Time'];

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Reports Control Room</h1>
        <p className="text-gray-400">Deep-dive performance analysis and business intelligence.</p>
      </div>

      <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft">
        <div className="p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-gray-700">
            <h2 className="text-xl font-bold text-white">Technician Leaderboard</h2>
            <div className="flex items-center space-x-2 bg-gray-900/50 border border-white/10 rounded-lg p-1 mt-4 sm:mt-0">
                {timeRangeFilters.map(filter => (
                <button key={filter} onClick={() => setTimeRange(filter)}
                    className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${timeRange === filter ? 'bg-red-600 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'}`}>
                    {filter}
                </button>
                ))}
            </div>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-900/50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase">Name</th>
                {[
                    { key: 'tasksCompleted', label: 'Tasks Completed' },
                    { key: 'taskHours', label: 'Task Hours' },
                    { key: 'shiftHours', label: 'Shift Hours' },
                    { key: 'utilization', label: 'Utilization' }
                ].map(({ key, label }) => (
                    <th key={key} className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase cursor-pointer hover:text-white" onClick={() => requestSort(key as SortKey)}>
                        <span className="flex items-center">{label} <ArrowUpDown className="h-3 w-3 ml-2" /></span>
                    </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-gray-800 divide-y divide-gray-700">
              {sortedData.map((tech) => (
                <tr key={tech.technicianId} className="hover:bg-gray-700/50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">{tech.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{tech.tasksCompleted}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{tech.taskHours.toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{tech.shiftHours.toFixed(2)}</td>
                  <td className={`px-6 py-4 whitespace-nowrap text-sm font-bold ${tech.utilization > 75 ? 'text-green-400' : tech.utilization > 50 ? 'text-yellow-400' : 'text-red-400'}`}>
                    {tech.utilization.toFixed(1)}%
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\schedule\page.tsx ====================

// [path]: app/(dashboard)/dashboard/schedule/page.tsx

'use client';

import { useState, useMemo, useEffect } from 'react';
import { getProjects, scheduleTask } from '@/lib/data-service';
import { Project, SubTask, UnscheduledTask, Technician } from '@/lib/types';
import ScheduleView from '@/components/dashboard/ScheduleView';
import UnscheduledTasksPanel from '@/components/dashboard/UnscheduledTasksPanel';
import ScheduleTaskModal from '@/components/dashboard/ScheduleTaskModal';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { format } from 'date-fns';

export default function SchedulePage() {
    const [projects, setProjects] = useState<Project[]>([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [taskToSchedule, setTaskToSchedule] = useState<UnscheduledTask | null>(null);
    
    // NEW: State to hold pre-filled data from a drop event
    const [scheduleDefaults, setScheduleDefaults] = useState<{ startDate: string; assignedTo: string } | null>(null);

    useEffect(() => {
        setProjects(getProjects());
    }, []);

    const unscheduledTasks = useMemo(() => {
        const tasks: UnscheduledTask[] = [];
        projects.forEach(project => {
            if (project.status === 'Active' || project.status === 'On Hold') {
                project.categories.forEach(category => {
                    category.subTasks.forEach(task => {
                        if (task.status === 'Pending' && !task.startDate) {
                            tasks.push({ 
                                ...task, 
                                projectId: project.id,
                                projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
                                categoryId: category.id
                            });
                        }
                    });
                });
            }
        });
        const priorityOrder: Record<SubTask['priority'], number> = { 'Urgent': 1, 'High': 2, 'Normal': 3, 'Low': 4 };
        return tasks.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
    }, [projects]);
    
    // MODIFIED: This now just opens the modal. The drop handler also does this.
    const handleTaskSelect = (task: UnscheduledTask) => {
        setTaskToSchedule(task);
        setScheduleDefaults(null); // Clear defaults if manually selected
        setIsModalOpen(true);
    };

    // NEW: Handles the drop event from the ScheduleView
    const handleTaskDrop = (task: UnscheduledTask, technician: Technician, date: Date) => {
        setTaskToSchedule(task);
        setScheduleDefaults({
            startDate: format(date, 'yyyy-MM-dd'),
            assignedTo: technician.id,
        });
        setIsModalOpen(true);
    };

    const handleSaveSchedule = (taskId: string, details: { startDate: string; dueDate: string; assignedTo: string }) => {
        if (!taskToSchedule) return;

        const updatedProject = scheduleTask(taskToSchedule.projectId, taskToSchedule.categoryId, taskId, details);
        
        if (updatedProject) {
            setProjects(currentProjects => currentProjects.map(p => p.id === updatedProject.id ? updatedProject : p));
        }
        
        // Reset state
        setIsModalOpen(false);
        setTaskToSchedule(null);
        setScheduleDefaults(null);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setTaskToSchedule(null);
        setScheduleDefaults(null);
    };

    return (
        <DndProvider backend={HTML5Backend}>
            <div>
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-white">Workshop Command Center</h1>
                    <p className="text-gray-400">Drag tasks from the backlog to the schedule. Days are colored by technician workload.</p>
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 h-[calc(100vh-12rem)]">
                    <div className="lg:col-span-3 h-full">
                        <ScheduleView allProjects={projects} onTaskDrop={handleTaskDrop} />
                    </div>
                    <div className="lg:col-span-1 h-full">
                        <UnscheduledTasksPanel tasks={unscheduledTasks} onTaskSelect={handleTaskSelect} />
                    </div>
                </div>
            </div>

            <ScheduleTaskModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                task={taskToSchedule}
                onSave={handleSaveSchedule}
                defaults={scheduleDefaults}
            />
        </DndProvider>
    );
}

==================== app\(dashboard)\dashboard\settings\page.tsx ====================

// [path]: app/(dashboard)/dashboard/settings/page.tsx

'use client';

import { useState } from 'react';
import { User, Bell, Palette, Wrench } from 'lucide-react';
import ToggleSwitch from '@/components/ui/ToggleSwitch';
import Button from '@/components/ui/Button';

export default function SettingsPage() {
  const [emailNotifications, setEmailNotifications] = useState(true);
  const [darkMode, setDarkMode] = useState(true);

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Settings</h1>
        <p className="text-gray-400">Manage your account and workshop preferences.</p>
      </div>

      <div className="max-w-4xl mx-auto space-y-8">
        {/* User Profile Section */}
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
          <h2 className="text-xl font-bold text-white mb-4 flex items-center">
             <User className="mr-3 text-gray-400" /> User Profile
          </h2>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-500">Name</label>
              <p className="text-lg text-white">John &quot;Boss&quot; Doe (Placeholder)</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Email</label>
              <p className="text-lg text-white">boss@allamericanmuscle.co.za</p>
            </div>
            <Button variant="outline" size="sm">Edit Profile</Button>
           </div>
        </div>

        {/* Workshop Management Section */}
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
          <h2 className="text-xl font-bold text-white mb-4 flex items-center">
            <Wrench className="mr-3 text-gray-400" /> Workshop Management
          </h2>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium text-gray-200">Project Templates</p>
                <p className="text-sm text-gray-400">Create and manage templates for new projects.</p>
              </div>
              <Button href="/dashboard/settings/templates" variant="secondary" size="sm">
                Manage Templates
              </Button>
            </div>
          </div>
        </div>

        {/* Notifications Section */}
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
          <h2 className="text-xl font-bold text-white mb-4 flex items-center">
            <Bell className="mr-3 text-gray-400" /> Notifications
          </h2>
          <div className="space-y-4">
           <div className="flex items-center justify-between">
              <div>
                <p className="font-medium text-gray-200">Email Notifications</p>
                <p className="text-sm text-gray-400">Receive an email when a customer comments.</p>
              </div>
              <ToggleSwitch enabled={emailNotifications} setEnabled={setEmailNotifications} />
            </div>
          </div>
        </div>
        
        {/* Appearance Section */}
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
          <h2 className="text-xl font-bold text-white mb-4 flex items-center">
            <Palette className="mr-3 text-gray-400" /> Appearance
          </h2>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium text-gray-200">Dark Mode</p>
                <p className="text-sm text-gray-400">Toggle the UI theme.</p>
              </div>
               <ToggleSwitch enabled={darkMode} setEnabled={setDarkMode} />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\settings\templates\page.tsx ====================

// [path]: app/(dashboard)/dashboard/settings/templates/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { getTemplates, saveTemplates } from '@/lib/data-service';
import { Category } from '@/lib/types';
import Button from '@/components/ui/Button';
import { Plus, Trash2, Edit } from 'lucide-react';

export default function TemplatesPage() {
    const [templates, setTemplates] = useState<Category[][]>([]);

    useEffect(() => {
        setTemplates(getTemplates());
    }, []);

    const handleDelete = (templateIndex: number) => {
        if (confirm('Are you sure you want to delete this template?')) {
            const newTemplates = templates.filter((_, index) => index !== templateIndex);
            setTemplates(newTemplates);
            saveTemplates(newTemplates);
        }
    };

    return (
        <div>
            <div className="flex justify-between items-center mb-8">
                <div>
                    <h1 className="text-3xl font-bold text-white">Project Templates</h1>
                    <p className="text-gray-400">Manage the starting templates for new projects.</p>
                </div>
                <Button href="/dashboard/settings/templates/new" variant="primary">
                    <Plus className="-ml-1 mr-2 h-5 w-5" />
                    New Template
                </Button>
            </div>
            
            <div className="space-y-4">
                {templates.map((template, index) => {
                    const templateName = template[0]?.name.split(' - ')[0] || `Template ${index + 1}`;
                    const categoryCount = template.length;
                    const taskCount = template.reduce((acc, cat) => acc + cat.subTasks.length, 0);

                    return (
                        <div key={index} className="bg-gray-800 border border-white/10 p-4 rounded-lg flex items-center justify-between">
                            <div>
                                <h3 className="text-lg font-bold text-white">{templateName}</h3>
                                <p className="text-sm text-gray-400">{categoryCount} Categories, {taskCount} Tasks</p>
                            </div>
                            <div className="flex items-center space-x-2">
                                <Button href={`/dashboard/settings/templates/${index}`} size="sm" variant="secondary">
                                    <Edit className="h-4 w-4" />
                                </Button>
                                <Button onClick={() => handleDelete(index)} size="sm" variant="outline">
                                    <Trash2 className="h-4 w-4" />
                                </Button>
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
}

==================== app\(dashboard)\dashboard\technicians\page.tsx ====================

// [path]: app/(dashboard)/dashboard/technicians/page.tsx

'use client';

import { useState, useMemo } from 'react';
import { getProjects, getShifts } from '@/lib/data-service';
import { mockUsers, mockTechnicians } from '@/lib/mock-data';
import { Project, Shift } from '@/lib/types';
import { startOfWeek, startOfMonth, parseISO, differenceInMilliseconds } from 'date-fns';
import PerformanceBarChart from '@/components/dashboard/PerformanceBarChart';
import TechnicianPerformanceCard from '@/components/dashboard/TechnicianPerformanceCard';
import TechnicianDetailModal from '@/components/dashboard/TechnicianDetailModal';

type TimeRange = 'This Week' | 'This Month' | 'All Time';

interface PerformanceStats {
  technicianId: string;
  name: string;
  tasksCompleted: number;
  taskHours: number;
  shiftHours: number;
  utilization: number;
}

const calculateShiftDuration = (shift: Shift): number => {
    if (!shift.clockOutTime) return 0;
    const duration = differenceInMilliseconds(parseISO(shift.clockOutTime), parseISO(shift.clockInTime));
    const breakDuration = shift.breaks.reduce((acc, br) => {
        if (br.endTime) {
            return acc + differenceInMilliseconds(parseISO(br.endTime), parseISO(br.startTime));
        }
        return acc;
    }, 0);
    return (duration - breakDuration) / (1000 * 60 * 60); // convert to hours
};

export default function TechniciansPage() {
  const [timeRange, setTimeRange] = useState<TimeRange>('This Week');
  const allProjects: Project[] = useMemo(() => getProjects(), []);
  const allShifts: Shift[] = useMemo(() => getShifts(), []);
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTechnician, setSelectedTechnician] = useState<{id: string; name: string} | null>(null);

  const performanceData: PerformanceStats[] = useMemo(() => {
    const now = new Date();
    let startDate: Date;

    if (timeRange === 'This Week') startDate = startOfWeek(now, { weekStartsOn: 1 });
    else if (timeRange === 'This Month') startDate = startOfMonth(now);
    else startDate = new Date(0);

    const technicianData: Record<string, { tasksCompleted: number; taskHours: number; shiftHours: number; }> = {};
    
    mockTechnicians.forEach(tech => {
        technicianData[tech.userId] = { tasksCompleted: 0, taskHours: 0, shiftHours: 0 };
    });

    allProjects.forEach(project => {
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          const tech = mockTechnicians.find(t => t.id === task.assignedTo);
          if (task.status === 'Completed' && task.completedAt && tech && technicianData[tech.userId] && parseISO(task.completedAt) >= startDate) {
            technicianData[tech.userId].tasksCompleted += 1;
            technicianData[tech.userId].taskHours += task.actualHours || 0;
          }
        });
      });
    });
    
    allShifts.forEach(shift => {
        if(technicianData[shift.userId] && parseISO(shift.clockInTime) >= startDate){
            technicianData[shift.userId].shiftHours += calculateShiftDuration(shift);
        }
    });

    return mockTechnicians.map(tech => {
        const data = technicianData[tech.userId];
        const user = mockUsers.find(u => u.id === tech.userId);
        const utilization = data.shiftHours > 0 ? (data.taskHours / data.shiftHours) * 100 : 0;
        return {
            technicianId: tech.userId,
            name: user?.name || tech.name,
            tasksCompleted: data.tasksCompleted,
            taskHours: data.taskHours,
            shiftHours: data.shiftHours,
            utilization: Math.min(utilization, 100),
        };
    });
  }, [allProjects, allShifts, timeRange]);

  const chartData = performanceData.map(tech => ({
      name: tech.name,
      taskHours: parseFloat(tech.taskHours.toFixed(2)),
      shiftHours: parseFloat(tech.shiftHours.toFixed(2)),
  }));

  const timeRangeFilters: TimeRange[] = ['This Week', 'This Month', 'All Time'];

  const handleCardClick = (technician: PerformanceStats) => {
    setSelectedTechnician({ id: technician.technicianId, name: technician.name });
    setIsModalOpen(true);
  };

  return (
    <>
      <div>
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white">Technicians Control Room</h1>
            <p className="text-gray-400">The human-resource and performance hub for your team. Click a card for details.</p>
          </div>
          <div className="flex items-center space-x-2 bg-gray-800 border border-white/10 rounded-lg p-1 mt-4 sm:mt-0">
            {timeRangeFilters.map(filter => (
              <button
                key={filter}
                onClick={() => setTimeRange(filter)}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                  timeRange === filter ? 'bg-red-600 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'
                }`}
              >
                {filter}
              </button>
            ))}
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {performanceData.map(techStats => (
            <TechnicianPerformanceCard 
              key={techStats.technicianId}
              technicianStats={techStats}
              onClick={() => handleCardClick(techStats)}
            />
          ))}
        </div>

        <div>
          <h2 className="text-2xl font-bold text-white mb-4">Shift Hours vs. Task Hours ({timeRange})</h2>
          <PerformanceBarChart data={chartData} />
        </div>
      </div>

      <TechnicianDetailModal 
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        technician={selectedTechnician}
        projects={allProjects}
        timeRange={timeRange}
      />
    </>
  );
}

==================== app\(dashboard)\dashboard\timeline\page.tsx ====================

import { mockProjects } from '@/lib/mock-data';
import { Calendar, Tag } from 'lucide-react';
import Link from 'next/link';

export default function TimelinePage() {
  const allUpdates = mockProjects
    .flatMap(project => 
      project.timeline.map(update => ({
        ...update,
        project,
      }))
    )
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white">Global Timeline</h1>
        <p className="text-gray-400">A chronological feed of all updates across all projects.</p>
      </div>

      <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
        <div className="relative border-l-2 border-gray-700 ml-4">
          {allUpdates.map((item) => (
            <div key={item.id} className="mb-8 pl-8">
              <span className="absolute -left-[11px] flex items-center justify-center w-6 h-6 bg-red-600 rounded-full ring-8 ring-background">
                <Calendar className="w-3 h-3 text-white" />
              </span>
              <div className="p-4 bg-gray-900 border border-gray-700 rounded-lg">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
                  <Link href={`/dashboard/projects/${item.project.id}`} className="font-semibold text-white hover:text-red-500 transition-colors">
                    {item.project.car.year} {item.project.car.make} {item.project.car.model}
                  </Link>
                  <time className="mt-1 sm:mt-0 text-sm font-normal text-gray-500">
                    {new Date(item.date).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}
                  </time>
                </div>
                <p className="text-base font-normal text-gray-300 mb-2">{item.update}</p>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
                  <Tag className="w-3 h-3 mr-1.5" />
                  {item.category}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

==================== app\(dashboard)\dashboard\workshop\page.tsx ====================

'use client';

import { useState, useEffect } from 'react';
import { getProjects } from '@/lib/data-service';
import { Project } from '@/lib/types';
import WorkshopKanban from '@/components/dashboard/WorkshopKanban';

export default function WorkshopPage() {
    const [projects, setProjects] = useState<Project[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        // We fetch all projects to pass down to the Kanban board
        setProjects(getProjects());
        setIsLoading(false);
    }, []);

    if (isLoading) {
        return <div className="flex items-center justify-center h-full"><p className="text-gray-400">Loading Workshop Deck...</p></div>;
    }

    return (
        <div>
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-white">Workshop Ops Deck</h1>
                <p className="text-gray-400">A real-time view of all tasks across active projects.</p>
            </div>
            <WorkshopKanban allProjects={projects} />
        </div>
    );
}

==================== app\(public)\layout.tsx ====================

import Footer from "@/components/Footer";
import Header from "@/components/Header";

// This layout will now apply to all pages inside the (public) folder,
// ensuring the login page and customer project pages are consistent.
export default function PublicLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Header />
      <main>{children}</main>
      <Footer />
    </>
  );
}

==================== app\(public)\page.tsx ====================

// [path]: app/(public)/page.tsx

'use client';

import { useRouter } from 'next/navigation';
import { User, Briefcase, Wrench, UserSquare } from 'lucide-react';
import Button from '@/components/ui/Button';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { useAuth } from '../AuthContext';
import { UserRole } from '@/lib/types';

export default function Home() {
  const router = useRouter();
  const { login } = useAuth();

  const handleLogin = (role: UserRole) => {
    login(role);

    switch (role) {
      case 'Boss':
      case 'Manager':
        router.push('/dashboard');
        break;
      case 'Technician':
        router.push('/dashboard/my-tasks');
        break;
      case 'Client':
        router.push('/projects/mustang-1969-smith');
        break;
    }
  };

  const loginOptions: { role: UserRole; icon: React.ElementType; color: string }[] = [
    { role: 'Boss', icon: Briefcase, color: 'red' },
    { role: 'Manager', icon: UserSquare, color: 'blue' },
    { role: 'Technician', icon: Wrench, color: 'yellow' },
    { role: 'Client', icon: User, color: 'green' },
  ];

  return (
    <div className="relative min-h-screen flex items-center justify-center p-4">
      <Image
        src="https://images.unsplash.com/photo-1617546889104-62f321b2383c?q=80&w=2070&auto-format&fit=crop"
        alt="Classic muscle car in a workshop"
        fill
        className="object-cover z-0"
        unoptimized
        priority
      />
      <div className="absolute inset-0 bg-black/70 z-10"></div>
      <div className="relative z-20 w-full max-w-md mx-auto">
        <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
        >
            <div className="text-center mb-10">
              <Image
                src="http://allamericanmuscle.co.za/wp-content/uploads/2025/01/AAM-Logo-3-Transparent.png"
                alt="All American Muscle Logo"
                width={300}
                height={100}
                className="mx-auto"
                priority
              />
              <h1 className="text-2xl text-gray-300 mt-2">Restoration Project Tracker</h1>
            </div>
            <div className="backdrop-blur-sm bg-gray-900/50 p-8 rounded-lg border border-white/10 shadow-large">
                <h2 className="text-center text-2xl font-bold text-white mb-6">Workshop Portal Login</h2>
                <p className="text-center text-gray-400 mb-8 text-sm">This is a demo. Please select a role to continue.</p>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {loginOptions.map(opt => (
                        <Button key={opt.role} onClick={() => handleLogin(opt.role)} variant="secondary" className="w-full">
                            <opt.icon className={`mr-3 h-5 w-5 text-${opt.color}-400`} />
                            Login as {opt.role}
                        </Button>
                    ))}
                </div>
            </div>
        </motion.div>
      </div>
    </div>
  );
}

==================== app\(public)\projects\[projectId]\page.tsx ====================

// [path]: app/(public)/projects/[projectId]/page.tsx

'use client';

import { useState, useEffect, use } from 'react'; // Import 'use' from React
import { getProjectById, updateTaskStatus, declineTaskApproval } from '@/lib/data-service';
import { Project, Message } from '@/lib/types';
import ProjectHeader from '@/components/ProjectHeader';
import ProgressCategory from '@/components/ProgressCategory';
import Timeline from '@/components/Timeline';
import MediaGallery from '@/components/MediaGallery';
import { notFound } from 'next/navigation';
import { calculateOverallProgress } from '@/lib/utils';
import MessagingCenter from '@/components/dashboard/MessagingCenter';
import ApprovalCenter from '@/components/ApprovalCenter';
import ClientFinancialsSummary from '@/components/ClientFinancialsSummary';

// The 'params' prop is now a Promise
export default function CustomerProjectPage({ params }: { params: Promise<{ projectId: string }> }) {
  // CORRECTED: Unwrap the params promise using the React.use() hook
  const resolvedParams = use(params);
  
  const [project, setProject] = useState<Project | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Use the resolved projectId to fetch data
    const foundProject = getProjectById(resolvedParams.projectId);
    if (foundProject) {
      setProject(foundProject);
    } else {
      notFound();
    }
    setIsLoading(false);
    // Update the dependency array
  }, [resolvedParams.projectId]);

  const handleSendMessage = (message: Omit<Message, 'id' | 'createdAt' | 'authorRole'>) => {
    setProject(currentProject => {
      if (!currentProject) return null;
      const newMessage: Message = { 
        ...message, 
        id: `msg-${Date.now()}`, 
        createdAt: new Date().toISOString(),
        authorRole: 'Client'
      };
      return { ...currentProject, messages: [...currentProject.messages, newMessage] };
    });
  };

  const handleApproveTask = (taskId: string, categoryId: string) => {
    if (!project) return;
    const updatedProject = updateTaskStatus(project.id, categoryId, taskId, 'Completed');
    if (updatedProject) {
      setProject(JSON.parse(JSON.stringify(updatedProject)));
    }
  };

  const handleDeclineTask = (taskId: string, categoryId: string) => {
    if (!project) return;
    const updatedProject = declineTaskApproval(project.id, categoryId, taskId);
    if (updatedProject) {
      setProject(JSON.parse(JSON.stringify(updatedProject)));
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center pt-20">
        <p className="text-gray-400">Loading Project Details...</p>
      </div>
    );
  }

  if (!project) return notFound();

  const overallProgress = calculateOverallProgress(project);
  const mediaCategories = [...new Set(project.media.map(item => item.category))];

  return (
    <div className="pt-20 bg-grid-pattern">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <ProjectHeader project={project} overallProgress={overallProgress} />
        
        <div id="financials" className="scroll-mt-24">
          <ClientFinancialsSummary project={project} />
        </div>
        
        <ApprovalCenter 
          project={project} 
          onApproveTask={handleApproveTask} 
          onDeclineTask={handleDeclineTask}
        />

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12 mt-12">
          <div className="lg:col-span-2 space-y-8" id="progress">
            <h2 className="text-3xl font-bold text-white">Project Progress</h2>
             <div className="space-y-6">
                {project.categories.map(category => (
                  <ProgressCategory key={category.id} category={category} />
                ))}
             </div>
          </div>
          <div className="lg:col-span-1" id="timeline">
             <h2 className="text-3xl font-bold text-white mb-8">Project Timeline</h2>
            <Timeline updates={project.timeline} />
          </div>
         </div>

        <div className="my-12" id="messages">
            <MessagingCenter project={project} currentUserRole="Client" onSendMessage={handleSendMessage} />
        </div>

        {project.media.length > 0 && (
          <div className="mt-16" id="media">
            <MediaGallery media={project.media} categories={mediaCategories} />
          </div>
        )}
      </div>
    </div>
  );
}

==================== app\(public)\projects\[projectId]\build-book\page.tsx ====================

// [path]: app/(public)/projects/[projectId]/build-book/page.tsx

'use client';

import { useState, useEffect, useRef } from 'react';
import { notFound, useRouter } from 'next/navigation';
import { getProjectById } from '@/lib/data-service';
import { Project, Part } from '@/lib/types';
import Image from 'next/image';
import { Download, ArrowLeft } from 'lucide-react';
import Button from '@/components/ui/Button';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export default function BuildBookPage({ params }: { params: { projectId: string } }) {
    const [project, setProject] = useState<Project | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isPrinting, setIsPrinting] = useState(false);
    const router = useRouter();
    const printRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const foundProject = getProjectById(params.projectId);
        setProject(foundProject || null);
        setIsLoading(false);
    }, [params.projectId]);

    const handleDownloadPdf = async () => {
        const element = printRef.current;
        if (!element) return;
        
        setIsPrinting(true);

        try {
            const canvas = await html2canvas(element, {
                scale: 2,
                backgroundColor: '#111111',
                useCORS: true,
                logging: false,
            });
    
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF({
                orientation: 'portrait',
                unit: 'mm',
                format: 'a4',
            });
    
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
    
            const canvasWidth = canvas.width;
            const canvasHeight = canvas.height;
            const ratio = canvasWidth / canvasHeight;
            
            const imgHeight = pdfWidth / ratio;
            let heightLeft = imgHeight;
            let position = 0;
    
            pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);
            heightLeft -= pdfHeight;
    
            while (heightLeft > 0) {
                position -= pdfHeight;
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);
                heightLeft -= pdfHeight;
            }
            
            pdf.save(`${project?.car.year}-${project?.car.make}-${project?.car.model}-BuildBook.pdf`);

        } catch (error) {
            console.error("Error generating PDF:", error);
            alert("Sorry, there was an error generating the PDF. Please check the console for details.");
        } finally {
            setIsPrinting(false);
        }
    };

    if (isLoading) return <div className="min-h-screen flex items-center justify-center pt-20"><p>Loading Build Book...</p></div>;
    if (!project) return notFound();

    const heroImage = project.media.find(m => m.caption.includes('finished')) || project.media[0] || { url: 'https://placehold.co/1280x720/1f2937/ffffff?text=Project+Image', caption: 'Project Image' };
    const allParts = project.categories.flatMap(c => c.subTasks.flatMap(t => t.parts || [])).filter((part): part is Part => part !== undefined);

    return (
        <div className="bg-background text-foreground min-h-screen pt-20">
            <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div className="flex justify-between items-center mb-8">
                    <Button onClick={() => router.back()} variant="secondary" size="sm">
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Back to Project
                    </Button>
                    <Button onClick={handleDownloadPdf} variant="primary" size="sm" disabled={isPrinting}>
                        {isPrinting ? 'Generating...' : <><Download className="h-4 w-4 mr-2" />Download as PDF</>}
                    </Button>
                </div>

                {/* --- THIS SECTION IS CORRECTED --- */}
                {/* Replaced opacity-based colors with solid colors for PDF compatibility */}
                <div ref={printRef} className="p-8 bg-gray-900 border border-gray-700 rounded-lg shadow-2xl">
                    <div className="relative h-80 rounded-lg overflow-hidden mb-8">
                        <Image src={heroImage.url} alt={heroImage.caption} fill className="object-cover" unoptimized />
                        <div className="absolute inset-0 bg-gradient-to-t from-black to-transparent"></div>
                        <div className="absolute bottom-6 left-6">
                            <h1 className="text-4xl font-bold text-white tracking-tight">{project.car.year} {project.car.make} {project.car.model}</h1>
                            <p className="text-lg text-gray-300">A Restoration Journey for {project.customerName}</p>
                        </div>
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-center border-y border-gray-700 py-6 mb-8">
                        <div><p className="text-sm text-gray-400">VIN</p><p className="font-semibold text-white">{project.car.vin || 'N/A'}</p></div>
                        <div><p className="text-sm text-gray-400">Completed</p><p className="font-semibold text-white">{project.promisedDate || 'N/A'}</p></div>
                        <div><p className="text-sm text-gray-400">Mileage In</p><p className="font-semibold text-white">{project.car.mileageIn?.toLocaleString() || 'N/A'}</p></div>
                        <div><p className="text-sm text-gray-400">Final Cost</p><p className="font-semibold text-green-400">{new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(project.financials.totalQuoted)}</p></div>
                    </div>
                    
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-white mb-4 border-b border-red-500 pb-2">The Journey</h2>
                        <ul className="space-y-4">
                            {project.timeline.map(item => (
                                <li key={item.id}>
                                    <p className="font-semibold text-gray-300">{item.update}</p>
                                    <p className="text-sm text-gray-500">{new Date(item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })} - {item.category}</p>
                                </li>
                            ))}
                        </ul>
                    </div>

                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-white mb-4 border-b border-red-500 pb-2">Gallery Showcase</h2>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                            {project.media.map(item => (
                                <div key={item.id} className="relative aspect-video rounded-md overflow-hidden"><Image src={item.url} alt={item.caption} fill className="object-cover" unoptimized/></div>
                            ))}
                        </div>
                    </div>

                    {allParts.length > 0 &&
                        <div>
                            <h2 className="text-2xl font-bold text-white mb-4 border-b border-red-500 pb-2">Major Components</h2>
                            <ul className="columns-2 text-gray-300 list-disc list-inside">
                                {allParts.map(part => (<li key={part.id}>{part.name}</li>))}
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
    );
}

==================== components\ApprovalCenter.tsx ====================

// [path]: components/ApprovalCenter.tsx

'use client';

import { Project } from '@/lib/types';
import { HelpCircle, ThumbsUp, ThumbsDown, DollarSign, Clock } from 'lucide-react';
import { useMemo } from 'react';
import Button from './ui/Button';

interface ApprovalCenterProps {
  project: Project;
  onApproveTask: (taskId: string, categoryId: string) => void;
  onDeclineTask: (taskId: string, categoryId: string) => void;
}

// A helper function to format currency
const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(amount);
};

const ApprovalCenter = ({ project, onApproveTask, onDeclineTask }: ApprovalCenterProps) => {
  const tasksNeedingApproval = useMemo(() => {
    return project.categories.flatMap(category =>
      category.subTasks
        .filter(task => task.requiresClientApproval && task.status === 'Awaiting Approval')
        .map(task => ({ ...task, categoryId: category.id }))
    );
  }, [project]);

  const invoicesNeedingPayment = useMemo(() => {
    // We remove the payment part from here to avoid redundancy with the main Financials panel
    return [];
  }, []);

  const hasActions = tasksNeedingApproval.length > 0 || invoicesNeedingPayment.length > 0;

  if (!hasActions) {
    return null;
  }

  return (
    <div className="bg-blue-900/50 border-2 border-blue-500/50 p-6 rounded-lg shadow-large my-12">
      <div className="flex items-center mb-6">
        <HelpCircle className="h-8 w-8 text-blue-300 mr-4 flex-shrink-0" />
        <div>
          <h2 className="text-2xl font-bold text-white">Action Required</h2>
          <p className="text-blue-200">Your input is required on the following items to keep the project moving forward.</p>
        </div>
      </div>
       
      <div className="space-y-4">
        {/* Pending Approvals */}
        {tasksNeedingApproval.map(task => (
          <div key={task.id} className="bg-gray-800/50 p-4 rounded-lg border border-gray-700">
            <h4 className="font-semibold text-white">{task.name}</h4>
            
            {/* MODIFIED: This section is now dynamic */}
            <div className="flex items-center text-xs text-gray-400 mt-2 space-x-4">
               {task.priceImpact && (
                 <span className="flex items-center">
                   <DollarSign className="w-3 h-3 mr-1.5 text-green-400"/>
                   Est. Cost: {formatCurrency(task.priceImpact)}
                 </span>
               )}
               {task.etaImpactDays && (
                 <span className="flex items-center">
                   <Clock className="w-3 h-3 mr-1.5 text-yellow-400"/>
                   Est. Delay: {task.etaImpactDays} Days
                 </span>
               )}
            </div>

            <div className="mt-4 flex space-x-2 justify-end">
                <Button size="sm" variant="outline" onClick={() => onDeclineTask(task.id, task.categoryId)}>
                    <ThumbsDown className="w-4 h-4 mr-2"/>
                    Decline
                </Button>
                <Button size="sm" variant="secondary" onClick={() => onApproveTask(task.id, task.categoryId)}>
                    <ThumbsUp className="w-4 h-4 mr-2"/>
                    Approve
                </Button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ApprovalCenter;

==================== components\ClientFinancialsSummary.tsx ====================

// [path]: components/ClientFinancialsSummary.tsx

'use client';

import { Project, Invoice } from '@/lib/types';
import { DollarSign, CheckCircle, Clock, AlertTriangle } from 'lucide-react';
import Button from '@/components/ui/Button'; // Using alias path for robustness

interface ClientFinancialsSummaryProps {
  project: Project;
}

const ClientFinancialsSummary = ({ project }: ClientFinancialsSummaryProps) => {
  const { financials } = project;
  const balanceDue = financials.totalQuoted - financials.totalPaid;

  const getStatusIcon = (status: Invoice['status']) => {
    switch (status) {
      case 'Paid':
        return <CheckCircle className="h-5 w-5 text-green-400" />;
      case 'Pending':
        return <Clock className="h-5 w-5 text-yellow-400" />;
      case 'Overdue':
        return <AlertTriangle className="h-5 w-5 text-red-400" />;
      default:
        return null;
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(amount);
  };

  return (
    <div className="bg-gray-900/50 backdrop-blur-sm border border-white/10 shadow-large rounded-lg p-6 md:p-8 mb-12">
      <h2 className="text-3xl font-bold text-white mb-6">Financial Summary</h2>
      
      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-gray-800/60 p-4 rounded-md">
          <p className="text-sm text-gray-400">Total Project Cost</p>
          <p className="text-2xl font-bold text-white">{formatCurrency(financials.totalQuoted)}</p>
        </div>
        <div className="bg-gray-800/60 p-4 rounded-md">
          <p className="text-sm text-gray-400">Total Paid</p>
          <p className="text-2xl font-bold text-green-400">{formatCurrency(financials.totalPaid)}</p>
        </div>
        <div className="bg-gray-800/60 p-4 rounded-md">
          <p className="text-sm text-gray-400">Balance Due</p>
          <p className="text-2xl font-bold text-yellow-400">{formatCurrency(balanceDue)}</p>
        </div>
      </div>

      {/* Invoices List */}
      <div>
        <h3 className="text-lg font-semibold text-white mb-4">Invoice History</h3>
        <div className="space-y-3">
          {financials.invoices.map(invoice => (
            <div key={invoice.id} className="bg-gray-800/60 p-3 rounded-md flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div className="flex items-center mb-2 sm:mb-0">
                {getStatusIcon(invoice.status)}
                <div className="ml-3">
                  <p className="font-medium text-gray-200">{invoice.description}</p>
                  <p className="text-xs text-gray-500">Due: {invoice.dueDate}</p>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <p className="text-lg font-semibold text-white sm:mx-4">{formatCurrency(invoice.amount)}</p>
                 {(invoice.status === 'Pending' || invoice.status === 'Overdue') && (
                    <Button size="sm" variant="primary" onClick={() => alert('Secure payment portal would be linked here.')}>
                        <DollarSign className="w-4 h-4 mr-2"/> Pay Now
                    </Button>
                 )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ClientFinancialsSummary;

==================== components\Footer.tsx ====================

'use client';

import { motion } from 'framer-motion';
import { Mail, Phone, MapPin, ArrowUp } from 'lucide-react';

const Footer = () => {
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const siteName = process.env.NEXT_PUBLIC_SITE_NAME || 'All American Muscle';
  
  // Using specific contact details from the company summary
  const contactEmail = 'parts@allamericanmuscle.co.za';
  const contactPhone1 = '010 5921 706';
  const contactPhone2 = '072 0426 477';
  const address = '15 Tarry Rd, Alrode South, Alberton, 1451';

  return (
    <footer className="bg-gray-900 text-white border-t border-white/10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Contact Info Section */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm text-center md:text-left mb-8">
          <motion.div 
            className="flex items-center justify-center md:justify-start"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Mail className="h-5 w-5 mr-3 flex-shrink-0 text-red-500" />
            <a href={`mailto:${contactEmail}`} className="text-gray-300 hover:text-white transition-colors">
              {contactEmail} 
            </a>
          </motion.div>
          <motion.div 
            className="flex items-center justify-center"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Phone className="h-5 w-5 mr-3 flex-shrink-0 text-red-500" />
            <div className="flex flex-col items-center md:items-start">
              <a href={`tel:${contactPhone1.replace(/\D/g, '')}`} className="text-gray-300 hover:text-white transition-colors">
                {contactPhone1} 
              </a>
               <a href={`tel:${contactPhone2.replace(/\D/g, '')}`} className="text-gray-300 hover:text-white transition-colors">
                {contactPhone2} 
              </a>
            </div>
          </motion.div>
          <motion.div 
            className="flex items-center justify-center md:justify-end"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <MapPin className="h-5 w-5 mr-3 flex-shrink-0 text-red-500" />
            <span className="text-gray-300">{address} </span>
          </motion.div>
        </div>

        {/* Bottom Bar */}
        <div className="border-t border-gray-800 pt-6">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p className="text-gray-400 text-sm mb-4 md:mb-0">
              © {new Date().getFullYear()} {siteName}. Project Tracker.
            </p>
            <motion.button
              onClick={scrollToTop}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="w-10 h-10 bg-red-600 rounded-full flex items-center justify-center text-white hover:bg-red-700 transition-colors shadow-lg focus-ring"
              aria-label="Scroll to top"
            >
              <ArrowUp className="h-5 w-5" />
            </motion.button>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

==================== components\Header.tsx ====================

// [path]: components/Header.tsx

'use client';

import { useState } from 'react';
import { usePathname } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X } from 'lucide-react';
import Link from 'next/link';
import Image from 'next/image';

const Header = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const pathname = usePathname();
  // Check if we are on a project detail page
  const isProjectPage = pathname.includes('/projects/');
  const generalNav = [
    { name: 'Dashboard', href: '/' },
  ];
  const projectNav = [
    { name: 'Progress', href: '#progress' },
    { name: 'Financials', href: '#financials' },
    { name: 'Media', href: '#media' },
    { name: 'Timeline', href: '#timeline' },
  ];
  const navItems = isProjectPage ? projectNav : generalNav;

  return (
    <header className="fixed top-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-md border-b border-white/10">
      <nav className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-20">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="flex-shrink-0"
          >
            <Link href="/" className="transition-opacity hover:opacity-80">
              <Image
                src="http://allamericanmuscle.co.za/wp-content/uploads/2025/01/AAM-Logo-3-Transparent.png"
                alt="All American Muscle Logo"
                width={150}
                height={50}
                priority
              />
            </Link>
          </motion.div>

          <div className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-8">
              {navItems.map((item, index) => (
                <motion.a
                  key={item.name}
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  href={item.href}
                  className="text-gray-300 hover:text-red-500 px-3 py-2 text-sm font-medium transition-colors"
                >
                  {item.name}
                </motion.a>
              ))}
            </div>
          </div>
          
          <div className="md:hidden">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="text-gray-300 hover:text-red-500 transition-colors"
              aria-label="Toggle menu"
            >
              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>

        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="md:hidden border-t border-white/10"
            >
              <div className="px-2 pt-2 pb-3 space-y-1">
                {navItems.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    className="block text-gray-300 hover:text-red-500 hover:bg-gray-800 rounded-md px-3 py-2 text-base font-medium transition-colors"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </nav>
    </header>
  );
};

export default Header;

==================== components\MediaGallery.tsx ====================

'use client';

import { useState } from 'react';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { Media } from '@/lib/types';
import { X } from 'lucide-react';

interface MediaGalleryProps {
  media: Media[];
  categories: string[];
}

const MediaGallery = ({ media, categories }: MediaGalleryProps) => {
  const [activeFilter, setActiveFilter] = useState('All');
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const filteredMedia = activeFilter === 'All' 
    ? media 
    : media.filter(item => item.category === activeFilter);

  return (
    <div className="mt-12">
      <h2 className="text-3xl font-bold text-white mb-6">Media Gallery</h2>
      
      {/* Filter Buttons */}
      <div className="flex flex-wrap gap-2 mb-6">
        <button
          onClick={() => setActiveFilter('All')}
          className={`px-4 py-2 text-sm font-medium rounded-full transition-colors ${
            activeFilter === 'All' 
              ? 'bg-red-600 text-white' 
              : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
          }`}
        >
          All
        </button>
        {categories.map(category => (
          <button
            key={category}
            onClick={() => setActiveFilter(category)}
            className={`px-4 py-2 text-sm font-medium rounded-full transition-colors ${
              activeFilter === category 
                ? 'bg-red-600 text-white' 
                : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
            }`}
          >
            {category}
          </button>
        ))}
      </div>

      {/* Image Grid */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        <AnimatePresence>
          {filteredMedia.map(item => (
            <motion.div
              key={item.id}
              layout
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              transition={{ duration: 0.3 }}
              className="relative aspect-w-16 aspect-h-9 rounded-lg overflow-hidden cursor-pointer group"
              onClick={() => setSelectedImage(item.url)}
            >
              <Image
                src={item.url}
                alt={item.caption}
                fill
                sizes="(max-width: 768px) 50vw, 33vw"
                className="object-cover transition-transform duration-300 group-hover:scale-105"
              />
              <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-end p-2">
                <p className="text-white text-xs">{item.caption}</p>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      {/* Lightbox Modal */}
      <AnimatePresence>
        {selectedImage && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
            onClick={() => setSelectedImage(null)}
          >
            <motion.div
              layoutId={selectedImage}
              className="relative w-full max-w-4xl max-h-[90vh]"
            >
              <Image
                src={selectedImage}
                alt="Selected restoration image"
                width={1200}
                height={800}
                className="object-contain w-full h-full"
              />
            </motion.div>
            <motion.button
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5 }}
              className="absolute top-4 right-4 text-white hover:text-red-500"
              onClick={() => setSelectedImage(null)}
            >
              <X className="w-8 h-8" />
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default MediaGallery;

==================== components\ProgressCategory.tsx ====================

'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
// Import HelpCircle icon
import { ChevronDown, CheckCircle2, Circle, HelpCircle } from 'lucide-react';
import { Category } from '@/lib/types';
import ProgressBar from './ui/ProgressBar';

interface ProgressCategoryProps {
  category: Category;
}

const ProgressCategory = ({ category }: ProgressCategoryProps) => {
  const [isOpen, setIsOpen] = useState(false);

  // A task is "completed" from the client's perspective if its status is 'Completed'.
  const completedTasks = category.subTasks.filter(task => task.status === 'Completed').length;
  const totalTasks = category.subTasks.length;
  const categoryProgress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

  return (
    <motion.div
      layout
      initial={{ borderRadius: 8 }}
      className="bg-gray-900/50 backdrop-blur-sm border border-white/10 shadow-soft overflow-hidden rounded-lg"
    >
      <motion.header
        initial={false}
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between p-4 cursor-pointer hover:bg-white/5 transition-colors"
      >
        <div className="flex-grow">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-lg font-semibold text-gray-100">{category.name}</h3>
            <span className="text-sm font-medium text-gray-400">{`${completedTasks}/${totalTasks} tasks`}</span>
          </div>
          <ProgressBar progress={categoryProgress} />
        </div>
        <motion.div
          animate={{ rotate: isOpen ? 180 : 0 }}
          transition={{ duration: 0.2 }}
          className="ml-4"
        >
          <ChevronDown className="h-5 w-5 text-gray-400" />
        </motion.div>
      </motion.header>
      
      <AnimatePresence>
        {isOpen && (
          <motion.section
            key="content"
            initial="collapsed"
            animate="open"
            exit="collapsed"
            variants={{ open: { opacity: 1, height: 'auto' }, collapsed: { opacity: 0, height: 0 } }}
            transition={{ duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }}
            className="px-4 pb-4"
          >
            <ul className="space-y-3 pt-4 border-t border-white/10">
              {category.subTasks.map(task => (
                <li key={task.id} className={`flex items-center p-2 rounded-md ${task.requiresClientApproval && task.status !== 'Completed' ? 'bg-blue-900/50' : ''}`}>
                  {task.status === 'Completed' ? (
                    <CheckCircle2 className="h-5 w-5 text-green-400 mr-3 flex-shrink-0" />
                  ) : (
                    <Circle className="h-5 w-5 text-gray-600 mr-3 flex-shrink-0" />
                  )}
                  <span className={`text-gray-300 ${task.status === 'Completed' ? 'line-through text-gray-500' : ''}`}>
                    {task.name}
                  </span>
                  {/* Highlight tasks needing approval */}
                  {task.requiresClientApproval && task.status !== 'Completed' && (
                       <span className="ml-auto flex items-center text-xs font-semibold text-blue-300 bg-blue-900 px-2 py-1 rounded-full">
                        <HelpCircle className="h-3 w-3 mr-1.5" />
                        Decision Needed
                    </span>
                  )}
                </li>
              ))}
            </ul>
          </motion.section>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ProgressCategory;

==================== components\ProjectHeader.tsx ====================

// [path]: components/ProjectHeader.tsx

'use client';

import { motion } from 'framer-motion';
import { Project } from '@/lib/types';
import ProgressBar from './ui/ProgressBar';
import Button from './ui/Button';
import { Edit, BookOpen } from 'lucide-react';
// Removed unused 'Link' import

interface ProjectHeaderProps {
  project: Project;
  overallProgress: number;
  onEdit?: () => void;
}

const ProjectHeader = ({ project, overallProgress, onEdit }: ProjectHeaderProps) => {
  const { car, customerName, status, holdReason } = project;

  const statusClasses = {
    Active: 'bg-green-900/50 text-green-300 border border-green-500/30',
    'On Hold': 'bg-yellow-900/50 text-yellow-300 border border-yellow-500/30',
    Completed: 'bg-red-900/50 text-red-300 border border-red-500/30',
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="bg-gray-900/50 backdrop-blur-sm border border-white/10 shadow-large rounded-lg p-6 md:p-8 mb-12"
    >
      <div className="flex flex-col md:flex-row justify-between items-start mb-6">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-white">
            {car.year} {car.make} {car.model}
          </h1>
          <p className="text-lg text-gray-400">
            Project for: <span className="font-semibold text-gray-200">{customerName}</span>
          </p>
        </div>
        <div className="flex items-center space-x-4 mt-4 md:mt-0">
          <div className="text-right">
            <div className={`text-sm font-medium px-3 py-1 rounded-full inline-block ${statusClasses[status]}`}>
              {status}
            </div>
            {status === 'On Hold' && holdReason && (
              <p className="text-xs text-yellow-300 mt-1">{holdReason}</p>
            )}
          </div>
          {onEdit && (
            <Button onClick={onEdit} variant="outline" size="sm">
              <Edit className="h-4 w-4 mr-2" />
              Edit
            </Button>
          )}
          {/* --- NEW: Conditionally render the Build Book button --- */}
          {status === 'Completed' && (
            <Button href={`/projects/${project.id}/build-book`} variant="primary" size="sm">
              <BookOpen className="h-4 w-4 mr-2" />
              View Build Book
            </Button>
          )}
        </div>
      </div>
 
       <div>
         <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-300">Overall Progress</span>
          <span className="text-lg font-bold text-red-500">{Math.round(overallProgress)}%</span>
        </div>
        <ProgressBar progress={overallProgress} />
      </div>
    </motion.div>
  );
};

export default ProjectHeader;

==================== components\Timeline.tsx ====================

'use client';

import { motion } from 'framer-motion';
import { TimelineUpdate } from '@/lib/types';
import { Calendar, Tag } from 'lucide-react';

interface TimelineProps {
  updates: TimelineUpdate[];
}

const Timeline = ({ updates }: TimelineProps) => {
  return (
    <div>
      {/* The h2 title is now managed by the parent page for better context */}
      <div className="relative border-l-2 border-gray-700 ml-4">
        {updates.map((item, index) => (
          <motion.div
            key={item.id}
            initial={{ opacity: 0, x: -20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: index * 0.1 }}
            className="mb-8 pl-8"
          >
            {/* Ring color updated for dark background */}
            <span className="absolute -left-[11px] flex items-center justify-center w-6 h-6 bg-red-600 rounded-full ring-8 ring-background">
              <Calendar className="w-3 h-3 text-white" />
            </span>
            {/* Component colors updated for dark background */}
            <div className="p-4 bg-gray-800 border border-gray-700 rounded-lg shadow-soft">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
                <time className="mb-1 text-sm font-normal leading-none text-gray-400 sm:mb-0">
                  {new Date(item.date).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </time>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
                  <Tag className="w-3 h-3 mr-1.5" />
                  {item.category}
                </span>
              </div>
              <p className="text-base font-normal text-gray-300">{item.update}</p>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default Timeline;


==================== components\dashboard\ActionRequiredFeed.tsx ====================

// [path]: components/dashboard/ActionRequiredFeed.tsx

'use client';

import { Project } from '@/lib/types';
import { DollarSign, MessageCircle, Clock } from 'lucide-react';
import Link from 'next/link';
import { useMemo } from 'react';

interface ActionRequiredFeedProps {
  projects: Project[];
}

// OPTIMIZED: Created a mapping for styles to ensure Tailwind CSS's JIT compiler
// reliably detects the classes.
const colorMap = {
  blue: {
    bg: 'bg-blue-900/50',
    border: 'border-blue-500/30',
    text: 'text-blue-400',
  },
  purple: {
    bg: 'bg-purple-900/50',
    border: 'border-purple-500/30',
    text: 'text-purple-400',
  },
  red: {
    bg: 'bg-red-900/50',
    border: 'border-red-500/30',
    text: 'text-red-400',
  },
};

const generateActionItems = (projects: Project[]) => {
    const items = [];
    for (const project of projects) {
        if (project.status === 'On Hold' && project.holdReason === 'Awaiting Payment') {
            items.push({
                id: `payment-${project.id}`,
                type: 'Payment',
                text: `Payment pending for ${project.car.year} ${project.car.make}.`,
                projectId: project.id,
                icon: DollarSign,
                color: 'blue' as keyof typeof colorMap,
                // This hash will now scroll the user to the financials panel
                href: `/dashboard/projects/${project.id}#financials`
            });
        }

        for (const message of project.messages) {
            if (message.visibleTo === 'BossOnly' && message.authorRole === 'Client') {
                items.push({
                    id: `message-${message.id}`,
                    type: 'Message',
                    text: `New confidential message from ${project.customerName}.`,
                    projectId: project.id,
                    icon: MessageCircle,
                    color: 'purple' as keyof typeof colorMap,
                    // This hash will now scroll the user to the messages panel
                    href: `/dashboard/projects/${project.id}#messages`
                });
            }
        }
    }
    
    // Placeholder for overdue tasks, can be made dynamic later
    items.push({
        id: `overdue-placeholder`,
        type: 'Overdue',
        text: `Mustang project is 2 weeks overdue on Engine Assembly.`,
        projectId: 'mustang-1969-smith',
        icon: Clock,
        color: 'red' as keyof typeof colorMap,
        // This hash will now scroll the user to the progress section
        href: `/dashboard/projects/mustang-1969-smith#progress`
    });

    return items;
};


const ActionRequiredFeed = ({ projects }: ActionRequiredFeedProps) => {
  const actionItems = useMemo(() => generateActionItems(projects), [projects]);

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Action Required</h3>
      {actionItems.length > 0 ? (
        <ul className="space-y-4">
          {actionItems.map(item => {
            const styles = colorMap[item.color];
            return (
                <li key={item.id}>
                <Link href={item.href} className="flex items-start p-2 rounded-md hover:bg-gray-700/50 transition-colors">
                    <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${styles.bg} ${styles.border}`}>
                        <item.icon className={`h-5 w-5 ${styles.text}`} />
                    </div>
                    <div className="ml-3">
                    <p className="text-sm font-medium text-gray-200">{item.text}</p>
                    <p className="text-xs text-gray-500">{item.type}</p>
                    </div>
                </Link>
                </li>
            );
          })}
        </ul>
      ) : (
        <p className="text-sm text-gray-500 text-center py-4">The workshop is running smoothly. No actions required.</p>
      )}
    </div>
  );
};

export default ActionRequiredFeed;

==================== components\dashboard\ActivityFeed.tsx ====================

import { Project } from '@/lib/types';
import { Clock } from 'lucide-react';
import Link from 'next/link';

interface ActivityFeedProps {
  projects: Project[];
}

const ActivityFeed = ({ projects }: ActivityFeedProps) => {
  const allUpdates = projects
    .flatMap(p => 
      p.timeline.map(t => ({ ...t, project: p }))
    )
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    .slice(0, 5);

  return (
    // Updated component to a dark theme
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Recent Activity</h3>
      <ul className="space-y-4">
        {allUpdates.map(item => (
          <li key={item.id} className="flex items-start">
            <div className="w-8 h-8 flex-shrink-0 bg-gray-700 rounded-full flex items-center justify-center mr-4">
              <Clock className="w-4 h-4 text-gray-400" />
            </div>
            <div>
              <p className="text-sm text-gray-300">
                <Link href={`/dashboard/projects/${item.project.id}`} className="font-semibold text-red-500 hover:underline">
                  {item.project.car.year} {item.project.car.model}:
                </Link>
                {' '}{item.update}
              </p>
              <p className="text-xs text-gray-500 mt-1">
                {new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
              </p>
            </div>
          </li>
         ))}
      </ul>
    </div>
  );
};

export default ActivityFeed;

==================== components\dashboard\AddInvoiceModal.tsx ====================

// [path]: components/dashboard/AddInvoiceModal.tsx

'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Invoice } from '@/lib/types';
import Input from '../ui/Input';
import Button from '../ui/Button';

interface AddInvoiceModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (invoiceData: Omit<Invoice, 'id' | 'status' | 'dueDate'>) => void;
}

const AddInvoiceModal = ({ isOpen, onClose, onSave }: AddInvoiceModalProps) => {
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');

  const handleSave = () => {
    if (!description || !amount || parseFloat(amount) <= 0) {
        alert('Please enter a valid description and amount.');
        return;
    }
    onSave({
      description,
      amount: parseFloat(amount),
    });
    // Reset form and close modal
    setDescription('');
    setAmount('');
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className="relative bg-gray-800 border border-white/10 w-full max-w-lg rounded-lg shadow-xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
                <h2 className="text-xl font-bold text-white">Add New Invoice</h2>
                {/* CORRECTED: Replaced the apostrophe with &apos; */}
                <p className="text-sm text-gray-400 mt-1">This will be added to the project&apos;s financials.</p>
            </div>
            
            <div className="p-6 border-t border-gray-700 space-y-4">
                 <div>
                    <label className="text-sm font-medium text-gray-300">Description</label>
                    <Input placeholder="e.g., Custom Parts Sourcing" value={description} onChange={e => setDescription(e.target.value)} className="mt-1" required />
                 </div>
                 <div>
                    <label className="text-sm font-medium text-gray-300">Amount (ZAR)</label>
                    <Input type="number" placeholder="e.g., 15000" value={amount} onChange={e => setAmount(e.target.value)} className="mt-1" required />
                 </div>
            </div>
            
            <div className="p-4 bg-gray-900/50 flex justify-end space-x-2 rounded-b-lg">
                <Button onClick={onClose} variant="secondary" size="sm">Cancel</Button>
                <Button onClick={handleSave} variant="primary" size="sm">Save Invoice</Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AddInvoiceModal;

==================== components\dashboard\AddPartFromInventoryModal.tsx ====================

// [path]: components/dashboard/AddPartFromInventoryModal.tsx

'use client';

import { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { getInventoryItems } from '@/lib/data-service';
import { InventoryItem, Part } from '@/lib/types';
import Input from '../ui/Input';
import Button from '../ui/Button';

interface AddPartFromInventoryModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (partData: Omit<Part, 'id' | 'taskId' | 'status'>) => void;
}

const AddPartFromInventoryModal = ({ isOpen, onClose, onSave }: AddPartFromInventoryModalProps) => {
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);
  const [quantity, setQuantity] = useState(1);

  useEffect(() => {
    if (isOpen) {
      setInventory(getInventoryItems());
      // Reset state on open
      setSearchTerm('');
      setSelectedItem(null);
      setQuantity(1);
    }
  }, [isOpen]);

  const filteredInventory = useMemo(() => {
    if (!searchTerm) return inventory;
    return inventory.filter(item =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.sku.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [inventory, searchTerm]);

  const handleSave = () => {
    if (!selectedItem || quantity <= 0) {
      alert('Please select a part and enter a valid quantity.');
      return;
    }
    onSave({
      name: selectedItem.name,
      partNumber: selectedItem.sku,
      supplier: selectedItem.supplier,
      qty: quantity,
      unitCost: selectedItem.unitCost,
    });
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9 }} animate={{ scale: 1 }} exit={{ scale: 0.9 }} className="relative bg-gray-800 border border-white/10 w-full max-w-2xl rounded-lg shadow-xl" onClick={(e) => e.stopPropagation()}>
            <div className="p-6">
              <h2 className="text-xl font-bold text-white">Add Part From Inventory</h2>
            </div>
            <div className="p-6 border-y border-gray-700 space-y-4">
              <Input
                placeholder="Search inventory by name or SKU..."
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
              />
              <div className="h-48 overflow-y-auto bg-gray-900/50 rounded-md border border-gray-700">
                {filteredInventory.map(item => (
                  <div
                    key={item.id}
                    onClick={() => setSelectedItem(item)}
                    className={`p-3 cursor-pointer flex justify-between items-center ${selectedItem?.id === item.id ? 'bg-red-600 text-white' : 'hover:bg-gray-700/50'}`}
                  >
                    <div>
                      <p className="font-medium">{item.name}</p>
                      <p className="text-xs text-gray-400">{item.sku}</p>
                    </div>
                    <p className="text-sm text-gray-400">Stock: {item.stockQty}</p>
                  </div>
                ))}
              </div>
              {selectedItem && (
                <div className="grid grid-cols-3 gap-4 items-center bg-gray-900/50 p-3 rounded-md">
                  <p className="col-span-2 font-semibold text-white">Selected: {selectedItem.name}</p>
                  <Input
                    type="number"
                    value={quantity}
                    onChange={e => setQuantity(parseInt(e.target.value) || 1)}
                    min="1"
                    className="text-center"
                  />
                </div>
              )}
            </div>
            <div className="p-4 bg-gray-900/50 flex justify-end space-x-2 rounded-b-lg">
              <Button onClick={onClose} variant="secondary" size="sm">Cancel</Button>
              <Button onClick={handleSave} variant="primary" size="sm" disabled={!selectedItem}>Add Part to Task</Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AddPartFromInventoryModal;

==================== components\dashboard\AddTimelineForm.tsx ====================

'use client';

import { useState } from 'react';
import { Project, TimelineUpdate } from '@/lib/types';
import Button from '../ui/Button';

interface AddTimelineFormProps {
  project: Project;
  onAddUpdate: (newUpdate: Omit<TimelineUpdate, 'id' | 'date'>) => void;
}

const AddTimelineForm = ({ project, onAddUpdate }: AddTimelineFormProps) => {
  const [updateText, setUpdateText] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(project.categories[0]?.name || '');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!updateText.trim() || !selectedCategory) return;

    onAddUpdate({
      update: updateText,
      category: selectedCategory,
    });
    setUpdateText('');
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="updateText" className="block text-sm font-medium text-gray-300">
          New Update
        </label>
        <textarea
          id="updateText"
          rows={4}
          value={updateText}
          onChange={(e) => setUpdateText(e.target.value)}
          className="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 text-white placeholder-gray-400 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm"
          placeholder="e.g., Engine block returned from machine shop."
          required
        />
      </div>
      <div>
        <label htmlFor="category" className="block text-sm font-medium text-gray-300">
          Category
        </label>
        <select
          id="category"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 py-2 pl-3 pr-10 text-base text-white focus:border-red-500 focus:outline-none focus:ring-red-500 sm:text-sm"
        >
          {project.categories.map(cat => (
            <option key={cat.id} className="bg-gray-800 text-white">{cat.name}</option>
          ))}
        </select>
      </div>
      <Button type="submit" variant="primary" className="w-full">
        Add Update to Timeline
      </Button>
    </form>
  );
};

export default AddTimelineForm;

==================== components\dashboard\AiSuggestions.tsx ====================

// [path]: components/dashboard/AiSuggestions.tsx

'use client';

import { Lightbulb, DollarSign, UserCheck } from 'lucide-react';
import Link from 'next/link';

const AiSuggestions = () => {
    // NOTE: This is hardcoded mock data demonstrating what an AI would suggest.
    const suggestions = [
        {
            id: 'sug-1',
            title: "Unlock Project '69 Mustang",
            description: "The project is blocked awaiting a client decision on the paint shade. Follow up with John Smith to prevent further delays.",
            icon: UserCheck,
            color: 'text-blue-400',
            href: '/dashboard/projects/mustang-1969-smith'
        },
        {
            id: 'sug-2',
            title: "Improve Profitability on Camaro Project",
            description: "The '69 Camaro project currently has a low estimated margin. Review material costs or consider a quote adjustment for any new client requests.",
            icon: DollarSign,
            color: 'text-green-400',
            href: '/dashboard/financials'
        },
        {
            id: 'sug-3',
            title: "Optimize Technician Workload",
            description: "James M. has high utilization this week, while Chris P. has available capacity. Consider reassigning upcoming 'Pending' tasks to balance the workload.",
            icon: Lightbulb,
            color: 'text-yellow-400',
            href: '/dashboard/technicians'
        },
    ];

    return (
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft h-full">
            <h3 className="text-xl font-bold text-white mb-4">Top AI Suggestions</h3>
            <ul className="space-y-4">
                {suggestions.map(sug => (
                    <li key={sug.id}>
                        <Link href={sug.href} className="block p-4 rounded-md bg-gray-900/50 hover:bg-gray-700/50 transition-colors">
                            <div className="flex items-start">
                                <sug.icon className={`h-5 w-5 mr-4 mt-1 flex-shrink-0 ${sug.color}`} />
                                <div>
                                    <p className="font-semibold text-white">{sug.title}</p>
                                    <p className="text-sm text-gray-400">{sug.description}</p>
                                </div>
                            </div>
                        </Link>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default AiSuggestions;

==================== components\dashboard\AlertsPanel.tsx ====================

// [path]: components/dashboard/AlertsPanel.tsx

import { AlertTriangle, MessageSquare, Clock } from 'lucide-react';
import React from 'react';

interface AlertItemProps {
  icon: React.ElementType;
  text: string;
  subtext: string;
  color: keyof typeof colorMap;
}

// OPTIMIZED: Created a mapping for styles to ensure Tailwind CSS's JIT compiler
// reliably detects the classes.
const colorMap = {
  blue: {
    bg: 'bg-blue-900/50',
    border: 'border-blue-500/30',
    text: 'text-blue-400',
  },
  purple: {
    bg: 'bg-purple-900/50',
    border: 'border-purple-500/30',
    text: 'text-purple-400',
  },
  red: {
    bg: 'bg-red-900/50',
    border: 'border-red-500/30',
    text: 'text-red-400',
  },
};

const AlertItem = ({ icon: Icon, text, subtext, color }: AlertItemProps) => {
  const styles = colorMap[color];
  return (
    // Updated AlertItem to a dark theme
    <div className="flex items-start">
      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${styles.bg} ${styles.border}`}>
        <Icon className={`h-5 w-5 ${styles.text}`} />
      </div>
      <div className="ml-3">
        <p className="text-sm font-medium text-gray-200">{text}</p>
        <p className="text-xs text-gray-500">{subtext}</p>
      </div>
    </div>
  );
};

const AlertsPanel = () => {
  // This is mock data for demonstration.
  const alerts: AlertItemProps[] = [
    { icon: AlertTriangle, text: 'Mustang project is 2 weeks overdue', subtext: 'Chassis & Suspension', color: 'red' },
    { icon: MessageSquare, text: 'New comment from Jane Jones', subtext: '1969 Camaro SS', color: 'blue' },
    { icon: Clock, text: 'Upcoming Delivery: Dodge Charger', subtext: 'Scheduled for next Friday', color: 'purple' },
  ];

  return (
    // Updated Panel to a dark theme
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Alerts & Notifications</h3>
      <div className="space-y-4">
        {alerts.map((alert, index) => (
          <AlertItem key={index} {...alert} />
        ))}
      </div>
    </div>
  );
};

export default AlertsPanel;

==================== components\dashboard\BlockedProjects.tsx ====================

// [path]: components/dashboard/BlockedProjects.tsx

'use client';

import { Project } from '@/lib/types';
import { AlertTriangle, Wrench, DollarSign, HelpCircle } from 'lucide-react';
import Link from 'next/link';

interface BlockedProjectsProps {
  projects: Project[];
}

const holdReasonIcons: { [key: string]: React.ElementType } = {
    'Awaiting Parts': Wrench,
    'Awaiting Payment': DollarSign,
    'Awaiting Client Decision': HelpCircle,
};

const BlockedProjects = ({ projects }: BlockedProjectsProps) => {
  const blockedProjects = projects.filter(p => p.status === 'On Hold');

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft h-full">
      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
        <AlertTriangle className="h-5 w-5 mr-3 text-red-500" />
        Blocked Projects
      </h3>
      {blockedProjects.length > 0 ? (
        <ul className="space-y-4">
          {blockedProjects.map(project => {
            const Icon = project.holdReason ? holdReasonIcons[project.holdReason] || AlertTriangle : AlertTriangle;
            return (
              <li key={project.id}>
                <Link href={`/dashboard/projects/${project.id}`} className="block p-3 rounded-md hover:bg-gray-700/50 transition-colors">
                  <p className="font-semibold text-white">{project.car.year} {project.car.make} {project.car.model}</p>
                  <div className="flex items-center text-sm text-yellow-300 mt-1">
                    <Icon className="h-4 w-4 mr-2" />
                    <span>{project.holdReason}</span>
                  </div>
                </Link>
              </li>
            );
          })}
        </ul>
      ) : (
        <div className="flex items-center justify-center h-48">
          <p className="text-gray-500">No projects are currently blocked.</p>
        </div>
      )}
    </div>
  );
};

export default BlockedProjects;

==================== components\dashboard\CashFlowGauge.tsx ====================

// [path]: components/dashboard/CashFlowGauge.tsx

'use client';

import { DollarSign } from 'lucide-react'; // 'AlertCircle' was unused and has been removed.
import { useMemo } from 'react';

const CashFlowGauge = () => {
  // NOTE: This is hardcoded placeholder data.
  const cashOnHand = 285000;
  const upcomingExpenses = 190000; // Payroll, parts orders, etc.

  const { ratio, colorClass, label } = useMemo(() => {
    const safeThreshold = 0.5; // Green above 50%
    const warningThreshold = 0.25; // Yellow above 25%

    const net = cashOnHand - upcomingExpenses;
    const ratio = cashOnHand > 0 ? net / cashOnHand : 0;
    
    if (ratio > safeThreshold) {
      return { ratio, colorClass: 'bg-green-500', label: 'Healthy' };
    }
    if (ratio > warningThreshold) {
      return { ratio, colorClass: 'bg-yellow-500', label: 'Caution' };
    }
    return { ratio, colorClass: 'bg-red-500', label: 'Critical' };
  }, [cashOnHand, upcomingExpenses]);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR', minimumFractionDigits: 0 }).format(amount);
  };

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
        <DollarSign className="h-5 w-5 mr-3 text-green-400" />
        Cash Flow
      </h3>
      <div className="space-y-3">
        <div>
          <div className="flex justify-between items-baseline mb-1">
            <span className="text-sm font-medium text-gray-300">Net Position</span>
            <span className={`font-bold text-lg ${colorClass.replace('bg-', 'text-')}`}>{label}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-4">
            <div className={`h-4 rounded-full transition-all duration-500 ease-out ${colorClass}`} style={{ width: `${Math.max(0, ratio * 100)}%` }}></div>
          </div>
        </div>
        <div className="text-xs text-gray-400 pt-2 border-t border-gray-700">
          <p><strong>Cash on Hand:</strong> {formatCurrency(cashOnHand)}</p>
          <p><strong>Upcoming Expenses:</strong> {formatCurrency(upcomingExpenses)}</p>
        </div>
      </div>
    </div>
  );
};

export default CashFlowGauge;

==================== components\dashboard\ChannelList.tsx ====================

// [path]: components/dashboard/ChannelList.tsx

'use client';

import { Project } from '@/lib/types';
import { Car } from 'lucide-react';

interface ChannelListProps {
  projects: Project[];
  selectedProjectId: string | null;
  onChannelSelect: (projectId: string) => void;
}

const ChannelList = ({ projects, selectedProjectId, onChannelSelect }: ChannelListProps) => {
  const activeProjects = projects.filter(p => p.status === 'Active' || p.status === 'On Hold');

  return (
    <div className="bg-gray-900/50 h-full rounded-lg border border-white/10">
      <div className="p-4 border-b border-white/10">
        <h2 className="font-bold text-white">Project Channels</h2>
      </div>
      <nav className="p-2">
        <ul>
          {activeProjects.map(project => (
            <li key={project.id}>
              <button
                onClick={() => onChannelSelect(project.id)}
                className={`w-full flex items-center text-left px-3 py-2 my-1 rounded-md transition-colors text-sm ${
                  selectedProjectId === project.id
                    ? 'bg-red-600 text-white'
                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'
                }`}
              >
                <Car className="h-4 w-4 mr-3 flex-shrink-0" />
                <span className="font-medium">{`${project.car.year} ${project.car.make} ${project.car.model}`}</span>
              </button>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  );
};

export default ChannelList;

==================== components\dashboard\ClientPendingActions.tsx ====================

// [path]: components/dashboard/ClientPendingActions.tsx

'use client';

import { useMemo } from 'react';
import { Project } from '@/lib/types';
import { HelpCircle, ThumbsUp } from 'lucide-react';
import Link from 'next/link';

interface ClientPendingActionsProps {
  projects: Project[];
}

const ClientPendingActions = ({ projects }: ClientPendingActionsProps) => {
  const actions = useMemo(() => {
    return projects.flatMap(project =>
      project.categories.flatMap(category =>
        category.subTasks
          .filter(task => task.requiresClientApproval && task.status === 'Awaiting Approval')
          .map(task => ({
            ...task,
            projectId: project.id,
            projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
          }))
      )
    );
  }, [projects]);

  if (actions.length === 0) {
    return (
      <div className="bg-green-900/50 border border-green-500/30 p-4 rounded-lg flex items-center mb-8">
        <ThumbsUp className="h-5 w-5 text-green-300 mr-3" />
        <p className="text-sm font-medium text-green-200">No actions are currently pending from this client.</p>
      </div>
    );
  }

  return (
    <div className="bg-blue-900/50 border-2 border-blue-500/50 p-6 rounded-lg shadow-large mb-8">
      <div className="flex items-center mb-4">
        <HelpCircle className="h-6 w-6 text-blue-300 mr-4" />
        <div>
          <h2 className="text-xl font-bold text-white">Pending Client Actions</h2>
          <p className="text-blue-200 text-sm">The following items require this client&apos;s input.</p>
        </div>
      </div>
      <div className="space-y-3">
        {actions.map(task => (
          <Link
            key={task.id}
            href={`/dashboard/projects/${task.projectId}#progress`}
            className="block bg-gray-800/50 p-3 rounded-md border border-gray-700 hover:bg-gray-700/50 transition-colors"
          >
            <p className="font-semibold text-white">{task.name}</p>
            <p className="text-xs text-gray-400">{task.projectName}</p>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default ClientPendingActions;

==================== components\dashboard\ClockInOut.tsx ====================

// [path]: components/dashboard/ClockInOut.tsx

'use client';

import { useState } from 'react';
import { useTimeTracking } from '@/app/(dashboard)/TimeTrackingContext';
import { BreakType } from '@/lib/types';
import { LogIn, LogOut, Coffee, Sandwich, Play } from 'lucide-react'; // CORRECTED: Added 'Play' icon
import Button from '../ui/Button';

export default function ClockInOut() {
    const { status, breakType, handleClockIn, handleClockOut, handleStartBreak, handleEndBreak } = useTimeTracking();
    const [isBreakMenuOpen, setIsBreakMenuOpen] = useState(false);

    const onStartBreak = (type: BreakType) => {
        handleStartBreak(type);
        setIsBreakMenuOpen(false);
    };

    const getStatusIndicator = () => {
        switch (status) {
            case 'ClockedIn': return { text: 'Clocked In', color: 'bg-green-500' };
            case 'OnBreak': return { text: `On Break (${breakType})`, color: 'bg-yellow-500' };
            case 'ClockedOut': return { text: 'Clocked Out', color: 'bg-gray-500' };
        }
    };

    const { text, color } = getStatusIndicator();

    return (
        <div className="relative flex items-center space-x-3">
            <div className="flex items-center">
                <span className={`relative flex h-3 w-3 mr-2`}>
                    <span className={`animate-ping absolute inline-flex h-full w-full rounded-full ${color} opacity-75`}></span>
                    <span className={`relative inline-flex rounded-full h-3 w-3 ${color}`}></span>
                </span>
                <span className="text-sm text-gray-300">{text}</span>
            </div>

            {status === 'ClockedOut' && (
                <Button onClick={handleClockIn} size="sm" variant="secondary"><LogIn className="h-4 w-4 mr-2"/>Clock In</Button>
            )}

            {status === 'ClockedIn' && (
                <div className="flex space-x-2">
                    <div className="relative">
                        <Button onClick={() => setIsBreakMenuOpen(prev => !prev)} size="sm" variant="secondary"><Coffee className="h-4 w-4 mr-2"/>Start Break</Button>
                        {isBreakMenuOpen && (
                            <div className="absolute right-0 mt-2 w-48 bg-gray-700 border border-white/10 rounded-md shadow-lg z-10">
                                <a onClick={() => onStartBreak('Lunch')} className="flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-600 cursor-pointer"><Sandwich className="h-4 w-4 mr-2"/>Lunch</a>
                                <a onClick={() => onStartBreak('Tea')} className="flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-600 cursor-pointer"><Coffee className="h-4 w-4 mr-2"/>Tea</a>
                            </div>
                        )}
                    </div>
                    <Button onClick={handleClockOut} size="sm" variant="outline"><LogOut className="h-4 w-4 mr-2"/>Clock Out</Button>
                </div>
            )}

            {status === 'OnBreak' && (
                <Button onClick={handleEndBreak} size="sm" variant="primary"><Play className="h-4 w-4 mr-2"/>End Break</Button>
            )}
        </div>
    );
}

==================== components\dashboard\DashboardHeader.tsx ====================

// [path]: components/dashboard/DashboardHeader.tsx

'use client';

import { Menu } from 'lucide-react';
import ClockInOut from './ClockInOut';
import UniversalSearch from './UniversalSearch';
import NotificationsCenter from './NotificationsCenter'; // <-- NEW IMPORT

interface DashboardHeaderProps {
  onMenuClick: () => void;
}

const DashboardHeader = ({ onMenuClick }: DashboardHeaderProps) => {
  return (
    <header className="flex-shrink-0 bg-gray-900 border-b border-white/10">
      <div className="flex items-center justify-between p-4 h-16">
        <div className="flex items-center">
          <button
            onClick={onMenuClick}
            className="md:hidden text-gray-400 hover:text-white mr-4"
            aria-label="Open sidebar"
          >
            <Menu className="h-6 w-6" />
          </button>
        </div>
        
        <div className="flex-1 flex justify-center px-4">
            <UniversalSearch />
        </div>
        
        <div className="flex items-center space-x-4">
          <ClockInOut />
          <span className="h-6 w-px bg-gray-700"></span>
          <NotificationsCenter /> {/* <-- REPLACED STATIC ICON */}
          <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center text-sm font-bold text-gray-300">
           JD
          </div>
        </div>
      </div>
    </header>
  );
};

export default DashboardHeader;

==================== components\dashboard\DashboardKanban.tsx ====================

// [path]: components/dashboard/DashboardKanban.tsx

'use client';

import { useMemo } from 'react';
import { Project, SubTask } from '@/lib/types';
import Link from 'next/link';
import { mockTechnicians } from '@/lib/mock-data';

interface KanbanTask extends SubTask {
  projectName: string;
  projectId: string;
  categoryName: string;
}

interface DashboardKanbanProps {
  projects: Project[];
}

const DashboardKanban = ({ projects }: DashboardKanbanProps) => {
  const columns = useMemo(() => {
    // Define the primary stages of work for the dashboard
    const stages = ['Body & Paint', 'Engine & Drivetrain', 'Chassis & Suspension', 'Interior', 'Electrical & Wiring', 'Final Assembly'];
    
    // Find all tasks that are currently 'In Progress' from active projects
    const inProgressTasks: KanbanTask[] = projects
      .filter(p => p.status === 'Active')
      .flatMap(project =>
        project.categories.flatMap(category =>
          category.subTasks
            .filter(task => task.status === 'In Progress')
            .map(task => ({
              ...task,
              projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
              projectId: project.id,
              categoryName: category.name,
            }))
        )
      );

    // Group the tasks by their category name (stage)
    const tasksByStage = inProgressTasks.reduce((acc, task) => {
      const stage = task.categoryName;
      if (!acc[stage]) {
        acc[stage] = [];
      }
      acc[stage].push(task);
      return acc;
    }, {} as Record<string, KanbanTask[]>);

    return stages.map(stage => ({
      title: stage,
      tasks: tasksByStage[stage] || []
    }));

  }, [projects]);
  
  const getTechnicianName = (techId: string | undefined) => {
    if (!techId) return 'Unassigned';
    return mockTechnicians.find(t => t.id === techId)?.name || 'Unknown';
  };

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Active Projects Kanban (In Progress)</h3>
      <div className="flex space-x-4 overflow-x-auto pb-4">
        {columns.map(column => (
          <div key={column.title} className="w-72 flex-shrink-0 bg-gray-900/50 rounded-lg">
            <div className="p-3 border-b border-white/10">
              <h4 className="font-bold text-white text-sm">{column.title} <span className="text-xs font-normal text-gray-500">{column.tasks.length}</span></h4>
            </div>
            <div className="p-2 space-y-2 min-h-[200px]">
              {column.tasks.length > 0 ? column.tasks.map(task => (
                <div key={task.id} className="bg-gray-800 p-3 rounded-md border border-gray-700">
                  <p className="text-sm font-medium text-gray-200 mb-1">{task.name}</p>
                  <Link href={`/dashboard/projects/${task.projectId}`} className="text-xs text-red-500 hover:underline">
                    {task.projectName}
                  </Link>
                  <p className="text-xs text-gray-400 mt-2 pt-2 border-t border-gray-700">
                    Assigned to: <span className="font-semibold text-gray-300">{getTechnicianName(task.assignedTo)}</span>
                  </p>
                </div>
              )) : (
                 <div className="flex items-center justify-center h-full p-4">
                    <p className="text-xs text-gray-600">No tasks in progress.</p>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default DashboardKanban;

==================== components\dashboard\DraggableTaskCard.tsx ====================

// [path]: components/dashboard/DraggableTaskCard.tsx

'use client';

import { UnscheduledTask, SubTask } from "@/lib/types";
import { useDrag, DragSourceMonitor } from 'react-dnd';
import { Flame, AlertOctagon } from 'lucide-react';
import { useRef } from 'react';

// Define a type for the draggable item
export const ItemTypes = {
  TASK: 'task',
};

interface DraggableTaskCardProps {
    task: UnscheduledTask;
    onSelect: () => void;
}

const DraggableTaskCard = ({ task, onSelect }: DraggableTaskCardProps) => {
    const ref = useRef<HTMLLIElement>(null);
    const [{ isDragging }, drag] = useDrag(() => ({
        type: ItemTypes.TASK,
        item: task,
        collect: (monitor: DragSourceMonitor) => ({
            isDragging: !!monitor.isDragging(),
        }),
    }));

    drag(ref);

    const getPriorityStyles = (priority: SubTask['priority']): { icon: React.ReactNode, textColor: string } => {
        switch(priority) {
            case 'Urgent': return { icon: <Flame className="h-4 w-4 text-red-400 mr-2"/>, textColor: 'text-red-400' };
            case 'High': return { icon: <AlertOctagon className="h-4 w-4 text-yellow-400 mr-2"/>, textColor: 'text-yellow-400' };
            default: return { icon: null, textColor: 'text-gray-300' };
        }
    };

    const priority = getPriorityStyles(task.priority);

    return (
        <li 
            ref={ref}
            onClick={onSelect}
            className={`p-3 bg-gray-900/50 rounded-md cursor-grab border border-transparent hover:border-red-500/50 transition-all ${isDragging ? 'opacity-50' : 'opacity-100'}`}
        >
            <div className={`flex items-center font-semibold ${priority.textColor}`}>
                {priority.icon}
                <p>{task.name}</p>
            </div>
            <p className="text-xs text-gray-500 pl-6">{task.projectName}</p>
        </li>
    );
};

export default DraggableTaskCard;

==================== components\dashboard\EditProjectModal.tsx ====================

'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Project } from '@/lib/types';
import Input from '../ui/Input';
import Button from '../ui/Button';

interface EditProjectModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (updatedData: Partial<Project>) => void;
  project: Project;
}

const EditProjectModal = ({ isOpen, onClose, onSave, project }: EditProjectModalProps) => {
  const [customerName, setCustomerName] = useState(project.customerName);
  const [carYear, setCarYear] = useState(project.car.year.toString());
  const [carMake, setCarMake] = useState(project.car.make);
  const [carModel, setCarModel] = useState(project.car.model);

  useEffect(() => {
    if (project) {
        setCustomerName(project.customerName);
        setCarYear(project.car.year.toString());
        setCarMake(project.car.make);
        setCarModel(project.car.model);
    }
  }, [project]);

  const handleSave = () => {
    onSave({
      customerName,
      car: {
        year: parseInt(carYear) || 0,
        make: carMake,
        model: carModel,
      },
    });
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className="relative bg-gray-800 border border-white/10 w-full max-w-lg rounded-lg shadow-xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
                <h2 className="text-xl font-bold text-white">Edit Project Details</h2>
                {/* Corrected: Replaced ' with &apos; to fix the linting error */}
                <p className="text-sm text-gray-400 mt-1">Make changes to the project&apos;s core information.</p>
            </div>
            
            <div className="p-6 border-t border-gray-700 space-y-4">
                 <div>
                    <label className="text-sm font-medium text-gray-300">Customer Name</label>
                    <Input value={customerName} onChange={e => setCustomerName(e.target.value)} className="mt-1" />
                 </div>
                 <div className="grid grid-cols-3 gap-4">
                    <div>
                        <label className="text-sm font-medium text-gray-300">Year</label>
                        <Input type="number" value={carYear} onChange={e => setCarYear(e.target.value)} className="mt-1" />
                    </div>
                    <div className="col-span-2">
                        <label className="text-sm font-medium text-gray-300">Make</label>
                        <Input value={carMake} onChange={e => setCarMake(e.target.value)} className="mt-1" />
                    </div>
                 </div>
                 <div>
                    <label className="text-sm font-medium text-gray-300">Model</label>
                    <Input value={carModel} onChange={e => setCarModel(e.target.value)} className="mt-1" />
                 </div>
            </div>
            
            <div className="p-4 bg-gray-900/50 flex justify-end space-x-2 rounded-b-lg">
                <Button onClick={onClose} variant="secondary" size="sm">Cancel</Button>
                <Button onClick={handleSave} variant="primary" size="sm">Save Changes</Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default EditProjectModal;

==================== components\dashboard\ExceptionTiles.tsx ====================

// [path]: components/dashboard/ExceptionTiles.tsx

'use client';

import { Project } from "@/lib/types";
import { AlertTriangle, Clock, UserX, CalendarClock } from "lucide-react";
import { useMemo } from "react";

interface ExceptionTilesProps {
    projects: Project[];
    // --- NEW: Add the click handler prop ---
    onTileClick: (title: string, filteredProjects: Project[]) => void;
}

const ExceptionTile = ({ icon: Icon, title, value, colorClass, onClick }: { icon: React.ElementType, title: string, value: number, colorClass: string, onClick?: () => void }) => {
    if (value === 0) return null;

    return (
        <div 
            onClick={onClick}
            className={`bg-gray-800 border-l-4 ${colorClass} p-4 rounded-r-lg shadow-soft flex items-center transition-all duration-300 ${onClick ? 'cursor-pointer hover:border-r-4 hover:border-y-4 hover:border-red-500/50 hover:bg-gray-700/50' : ''}`}
        >
            <Icon className={`h-8 w-8 mr-4 ${colorClass.replace('border-', 'text-')}`} />
            <div>
                <p className="text-2xl font-bold text-white">{value}</p>
                <p className="text-sm text-gray-400">{title}</p>
            </div>
        </div>
    );
};


const ExceptionTiles = ({ projects, onTileClick }: ExceptionTilesProps) => {

    // --- NEW: This now stores the project lists, not just the lengths ---
    const exceptions = useMemo(() => {
        const onHold = projects.filter(p => p.status === 'On Hold');
        const atRisk = projects.filter(p => {
            if (!p.promisedDate || p.status === 'Completed') return false;
            return new Date(p.promisedDate) < new Date();
        });

        // These don't map to a simple project list, so they won't be clickable for now.
        const overdueApprovalsCount = projects.reduce((acc, p) => acc + p.categories.reduce((catAcc, cat) => catAcc + cat.subTasks.filter(t => t.requiresClientApproval && t.status === 'Awaiting Approval').length, 0), 0);
        const urgentUnassignedCount = projects.reduce((acc, p) => acc + p.categories.reduce((catAcc, cat) => catAcc + cat.subTasks.filter(t => t.priority === 'Urgent' && !t.assignedTo).length, 0), 0);

        return { onHold, atRisk, overdueApprovalsCount, urgentUnassignedCount };
    }, [projects]);

    const hasExceptions = exceptions.onHold.length > 0 || exceptions.atRisk.length > 0 || exceptions.overdueApprovalsCount > 0 || exceptions.urgentUnassignedCount > 0;

    return (
        <div className="mb-8">
            <h2 className="text-2xl font-bold text-white mb-4">Exception Radar</h2>
            {hasExceptions ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    <ExceptionTile
                        icon={Clock}
                        title="Projects On Hold"
                        value={exceptions.onHold.length}
                        colorClass="border-yellow-500"
                        onClick={() => onTileClick('Projects On Hold', exceptions.onHold)}
                    />
                    <ExceptionTile
                        icon={AlertTriangle}
                        title="Pending Approvals"
                        value={exceptions.overdueApprovalsCount}
                        colorClass="border-blue-500"
                    />
                    <ExceptionTile
                        icon={UserX}
                        title="Urgent Unassigned"
                        value={exceptions.urgentUnassignedCount}
                        colorClass="border-red-500"
                    />
                    <ExceptionTile
                        icon={CalendarClock}
                        title="Projects At Risk"
                        value={exceptions.atRisk.length}
                        colorClass="border-purple-500"
                        onClick={() => onTileClick('Projects At Risk', exceptions.atRisk)}
                    />
                </div>
            ) : (
                <div className="text-center py-10 bg-gray-800 rounded-lg border border-white/10">
                    <p className="text-gray-400">No critical exceptions found. The workshop is running smoothly.</p>
                </div>
            )}
        </div>
    );
};

export default ExceptionTiles;

==================== components\dashboard\FinancialsPanel.tsx ====================

// [path]: components/dashboard/FinancialsPanel.tsx

'use client';

import { Project, Invoice } from '@/lib/types';
import { DollarSign, CheckCircle, Clock, AlertTriangle, Plus } from 'lucide-react';
import Button from '../ui/Button';

interface FinancialsPanelProps {
  project: Project;
  onMarkAsPaid: (invoiceId: string) => void;
  onAddInvoiceClick: () => void; // New prop to open the modal
}

const FinancialsPanel = ({ project, onMarkAsPaid, onAddInvoiceClick }: FinancialsPanelProps) => {
  const { financials } = project;
  const balanceDue = financials.totalQuoted - financials.totalPaid;

  const getStatusIcon = (status: Invoice['status']) => {
    switch (status) {
      case 'Paid':
        return <CheckCircle className="h-5 w-5 text-green-400" />;
      case 'Pending':
        return <Clock className="h-5 w-5 text-yellow-400" />;
      case 'Overdue':
        return <AlertTriangle className="h-5 w-5 text-red-400" />;
      default:
        return null;
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(amount);
  };

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-xl font-bold text-white">Financial Overview</h3>
        <Button onClick={onAddInvoiceClick} variant="secondary" size="sm">
            <Plus className="h-4 w-4 mr-2"/>
            Add Invoice
        </Button>
      </div>
      
      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-gray-900/50 p-4 rounded-md">
          <p className="text-sm text-gray-400">Total Quoted</p>
          <p className="text-2xl font-bold text-white">{formatCurrency(financials.totalQuoted)}</p>
        </div>
        <div className="bg-gray-900/50 p-4 rounded-md">
          <p className="text-sm text-gray-400">Total Paid</p>
          <p className="text-2xl font-bold text-green-400">{formatCurrency(financials.totalPaid)}</p>
        </div>
        <div className="bg-gray-900/50 p-4 rounded-md">
          <p className="text-sm text-gray-400">Balance Due</p>
          <p className="text-2xl font-bold text-yellow-400">{formatCurrency(balanceDue)}</p>
        </div>
      </div>

      {/* Invoices List */}
      <div>
        <h4 className="text-lg font-semibold text-white mb-4">Invoices</h4>
        <div className="space-y-3">
          {financials.invoices.length > 0 ? financials.invoices.map(invoice => (
            <div key={invoice.id} className="bg-gray-900/50 p-3 rounded-md flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div className="flex items-center mb-2 sm:mb-0">
                {getStatusIcon(invoice.status)}
                <div className="ml-3">
                  <p className="font-medium text-gray-200">{invoice.description}</p>
                  <p className="text-xs text-gray-500">Due: {invoice.dueDate}</p>
                </div>
              </div>
              <div className="flex items-center justify-between">
                <p className="text-lg font-semibold text-white sm:mx-4">{formatCurrency(invoice.amount)}</p>
                 {invoice.status !== 'Paid' && (
                    <Button 
                        size="sm" 
                        variant="secondary" 
                        onClick={() => onMarkAsPaid(invoice.id)}
                    >
                        <DollarSign className="w-4 h-4 mr-2" /> Mark as Paid
                    </Button>
                 )}
              </div>
            </div>
          )) : (
            <div className="text-center py-4 text-sm text-gray-500">No invoices have been added.</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FinancialsPanel;

==================== components\dashboard\InteractiveProgressCategory.tsx ====================

// [path]: components/dashboard/InteractiveProgressCategory.tsx

'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, CheckCircle2, Circle, HelpCircle, Clock, Construction, ShieldCheck, ShieldAlert, PlusCircle, Wrench } from 'lucide-react';
import { Category, Technician, SubTask, Part } from '@/lib/types'; // <-- ADD Part
import ProgressBar from '../ui/ProgressBar';
import Button from '../ui/Button';

interface InteractiveProgressCategoryProps {
  category: Category;
  technicians: Technician[];
  onTaskToggle: (taskId: string, categoryId: string) => void;
  onTaskAssign: (taskId:string, categoryId: string, techId: string) => void;
  onToggleApproval: (taskId: string, categoryId: string) => void;
  onQaStatusChange: (categoryId: string, qaPassed: boolean) => void;
  onAddPartClick: (taskId: string, categoryId: string) => void; // <-- NEW PROP
}

const InteractiveProgressCategory = ({ category, technicians, onTaskToggle, onTaskAssign, onToggleApproval, onQaStatusChange, onAddPartClick }: InteractiveProgressCategoryProps) => {
  const [isOpen, setIsOpen] = useState(true);
  const completedTasks = category.subTasks.filter(task => task.status === 'Completed').length;
  const totalTasks = category.subTasks.length;
  const categoryProgress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
  
  const isReadyForQa = category.requiresQa && completedTasks === totalTasks;

  const getStatusIcon = (status: SubTask['status']) => {
    switch(status) {
        case 'Completed': return <CheckCircle2 className="h-5 w-5 text-green-400 mr-3 flex-shrink-0" />;
        case 'Awaiting Approval': return <Clock className="h-5 w-5 text-yellow-400 mr-3 flex-shrink-0" />;
        case 'In Progress': return <Construction className="h-5 w-5 text-blue-400 mr-3 flex-shrink-0" />;
        default: return <Circle className="h-5 w-5 text-gray-500 mr-3 flex-shrink-0" />;
    }
  };

  const getPartStatusColor = (status: Part['status']) => {
    switch (status) {
      case 'Received': return 'bg-green-800 text-green-300';
      case 'Ordered': return 'bg-blue-800 text-blue-300';
      default: return 'bg-yellow-800 text-yellow-300';
    }
  };

  return (
    <div className="bg-gray-800 border border-white/10 shadow-soft overflow-hidden rounded-lg">
      <header onClick={() => setIsOpen(!isOpen)} className="flex items-center justify-between p-4 cursor-pointer hover:bg-gray-700/50">
        <div className="flex-grow">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-lg font-semibold text-white flex items-center">
              {category.name}
              {category.requiresQa && (
                <span title="This category requires QA"><ShieldCheck className="h-4 w-4 text-green-400 ml-2" /></span>
              )}
            </h3>
            <span className="text-sm font-medium text-gray-400">{`${completedTasks}/${totalTasks} tasks`}</span>
          </div>
          <ProgressBar progress={categoryProgress} />
        </div>
        <motion.div animate={{ rotate: isOpen ? 180 : 0 }} transition={{ duration: 0.2 }} className="ml-4">
          <ChevronDown className="h-5 w-5 text-gray-400" />
        </motion.div>
      </header>
      
      <AnimatePresence>
        {isOpen && (
          <motion.section key="content" initial="collapsed" animate="open" exit="collapsed" variants={{ open: { opacity: 1, height: 'auto' }, collapsed: { opacity: 0, height: 0 } }} transition={{ duration: 0.3, ease: 'easeOut' }} className="pb-4">
            <div className="px-4">
              {isReadyForQa ? (
                <div className="text-center p-4 my-2 border-2 border-dashed border-green-500/50 bg-green-900/30 rounded-lg">
                  <ShieldCheck className="h-10 w-10 text-green-400 mx-auto mb-2" />
                  <h4 className="font-bold text-white">QA Review Pending</h4>
                  <p className="text-sm text-gray-400 mb-4">All tasks are complete. Please review the work.</p>
                  <div className="flex justify-center space-x-2">
                    <Button size="sm" variant="outline" onClick={() => onQaStatusChange(category.id, false)}><ShieldAlert className="w-4 h-4 mr-2" />Fail QA & Reset Tasks</Button>
                    <Button size="sm" variant="secondary" onClick={() => onQaStatusChange(category.id, true)}><ShieldCheck className="w-4 h-4 mr-2" />Pass QA</Button>
                  </div>
                </div>
              ) : (
                <ul className="divide-y divide-gray-700 pt-4 border-t border-gray-700">
                  {category.subTasks.map(task => (
                    <li key={task.id} className="py-3">
                      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between">
                        <div onClick={() => onTaskToggle(task.id, category.id)} className="flex items-center cursor-pointer mb-2 sm:mb-0 flex-grow">
                          {getStatusIcon(task.status)}
                          <span className={`text-gray-300 ${task.status === 'Completed' ? 'line-through text-gray-500' : ''}`}>{task.name}</span>
                        </div>
                        <div className="flex items-center self-end sm:self-center ml-auto pl-4 sm:pl-2">
                          <button onClick={(e) => { e.stopPropagation(); onToggleApproval(task.id, category.id); }} className={`p-1 rounded-full transition-colors mr-2 ${task.requiresClientApproval ? 'bg-blue-900/80 text-blue-300' : 'text-gray-500 hover:bg-gray-700'}`} title="Toggle Client Approval Requirement">
                            <HelpCircle className="h-4 w-4" />
                          </button>
                          <select value={task.assignedTo || ''} onChange={(e) => onTaskAssign(task.id, category.id, e.target.value)} onClick={(e) => e.stopPropagation()} className="text-xs rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500">
                            <option value="">Unassigned</option>
                            {technicians.map(tech => (<option key={tech.id} value={tech.id}>{tech.name}</option>))}
                          </select>
                        </div>
                      </div>
                      {/* --- NEW: Parts section for each task --- */}
                      <div className="pl-8 pt-2">
                        <div className="flex items-center justify-between">
                          <h4 className="text-xs font-semibold text-gray-400 uppercase tracking-wider flex items-center"><Wrench className="h-3 w-3 mr-2" />Parts</h4>
                          <button onClick={() => onAddPartClick(task.id, category.id)} className="flex items-center text-xs text-blue-400 hover:text-blue-300">
                            <PlusCircle className="h-3 w-3 mr-1"/> Add Part
                          </button>
                        </div>
                        {task.parts && task.parts.length > 0 ? (
                          <ul className="mt-2 space-y-1">
                            {task.parts.map(part => (
                              <li key={part.id} className="flex justify-between items-center bg-gray-900/50 p-2 rounded">
                                <span className="text-sm text-gray-300">{part.name} (x{part.qty})</span>
                                <span className={`px-2 py-0.5 text-xs rounded-full ${getPartStatusColor(part.status)}`}>{part.status}</span>
                              </li>
                            ))}
                          </ul>
                        ) : (
                          <p className="text-xs text-gray-500 italic mt-1">No parts assigned to this task.</p>
                        )}
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </motion.section>
        )}
      </AnimatePresence>
    </div>
  );
};

export default InteractiveProgressCategory;

==================== components\dashboard\JobCardModal.tsx ====================

// [path]: components/dashboard/JobCardModal.tsx

'use client';

import { AssignedTask } from '@/lib/types'; // CORRECTED: Removed unused 'User' import
import { motion, AnimatePresence } from 'framer-motion';
import { X, Wrench, MessageSquare, Timer, Square, Play, Send } from 'lucide-react';
import Button from '../ui/Button';
import { useState, useEffect } from 'react';
import { useAuth } from '@/app/AuthContext';

interface JobCardModalProps {
  isOpen: boolean;
  onClose: () => void;
  task: AssignedTask | null;
  activeTimerTaskId: string | null;
  timerStartTime: number | null;
  onStartTimer: (task: AssignedTask) => void;
  onStopTimer: () => void;
  onStatusChange: (taskId: string, categoryId: string, newStatus: AssignedTask['status']) => void;
  onAddNote: (taskId: string, categoryId: string, noteText: string) => void;
}

const JobCardModal = ({ isOpen, onClose, task, activeTimerTaskId, timerStartTime, onStartTimer, onStopTimer, onStatusChange, onAddNote }: JobCardModalProps) => {
  const { user } = useAuth();
  const [elapsedTime, setElapsedTime] = useState('00:00:00');
  const [noteText, setNoteText] = useState('');
  const isTimerActiveForThisTask = task ? activeTimerTaskId === task.id : false;

  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;
    if (isTimerActiveForThisTask && timerStartTime) {
      interval = setInterval(() => {
        const now = Date.now();
        const diff = now - timerStartTime;
        const hours = String(Math.floor(diff / 3600000)).padStart(2, '0');
        const minutes = String(Math.floor((diff % 3600000) / 60000)).padStart(2, '0');
        const seconds = String(Math.floor((diff % 60000) / 1000)).padStart(2, '0');
        setElapsedTime(`${hours}:${minutes}:${seconds}`);
      }, 1000);
    } else {
        setElapsedTime('00:00:00');
    }
    return () => clearInterval(interval);
  }, [isTimerActiveForThisTask, timerStartTime]);

  if (!task) return null;

  const handleNoteSubmit = () => {
    if (!noteText.trim() || !user) return;
    onAddNote(task.id, task.categoryName, noteText);
    setNoteText('');
  };

  const managerNotes = task.internalNotes?.filter(n => n.type === 'Instruction') || [];
  const technicianLogs = task.internalNotes?.filter(n => n.type === 'Log') || [];

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9, y: 20 }} animate={{ scale: 1, y: 0 }} exit={{ scale: 0.9, y: 20 }} className="relative bg-gray-800 border border-white/10 w-full max-w-2xl rounded-lg shadow-xl overflow-hidden" onClick={(e) => e.stopPropagation()}>
            <div className="p-6 bg-gray-900/50 flex justify-between items-start">
              <div>
                <h2 className="text-2xl font-bold text-white">{task.name}</h2>
                <p className="text-sm text-red-400">{task.projectName} - ({task.categoryName})</p>
              </div>
              <button onClick={onClose} className="text-gray-400 hover:text-white"><X className="h-6 w-6" /></button>
            </div>
            
            <div className="p-6 max-h-[70vh] overflow-y-auto space-y-6">
              <div className="bg-gray-900/50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg text-white mb-4">Task Status: <span className="text-yellow-400">{task.status}</span></h3>
                <div className="flex space-x-2">
                    <Button size="sm" variant="secondary" onClick={() => onStatusChange(task.id, task.categoryName, 'Pending')} disabled={task.status === 'Pending'}>Set to Pending</Button>
                    <Button size="sm" variant="secondary" onClick={() => onStatusChange(task.id, task.categoryName, 'In Progress')} disabled={task.status === 'In Progress'}>Set In Progress</Button>
                    <Button size="sm" variant="secondary" onClick={() => onStatusChange(task.id, task.categoryName, 'Awaiting Approval')} disabled={task.status === 'Awaiting Approval'}>Request Approval</Button>
                </div>
              </div>
              
              <div className="bg-gray-900/50 p-4 rounded-lg">
                 <h3 className="font-semibold text-lg text-white mb-4 flex items-center"><Timer className="mr-3 h-5 w-5 text-green-400"/>Time Tracking</h3>
                 <div className="flex justify-between items-center">
                    <div>
                        <p className="text-sm text-gray-400">Estimated Hours: <span className="font-bold text-white">{task.estimateHours || 'N/A'}</span></p>
                        <p className="text-sm text-gray-400">Actual Hours Logged: <span className="font-bold text-white">{task.actualHours?.toFixed(2) || '0.00'}</span></p>
                    </div>
                    {isTimerActiveForThisTask ? (
                        <div className="text-center">
                            <p className="text-2xl font-mono font-bold text-green-400">{elapsedTime}</p>
                            <Button onClick={onStopTimer} variant="secondary" size="sm" className="bg-red-900/80 text-red-300 w-full mt-2"><Square className="w-4 h-4 mr-2"/>Stop Timer</Button>
                        </div>
                    ) : (
                        <Button onClick={() => onStartTimer(task)} variant="primary" size="sm" disabled={!!activeTimerTaskId}><Play className="w-4 h-4 mr-2"/>Start Timer</Button>
                    )}
                 </div>
              </div>

              {task.parts && task.parts.length > 0 && (
                <div>
                  <h3 className="font-semibold text-lg text-white mb-2 flex items-center"><Wrench className="mr-3 h-5 w-5 text-blue-400"/>Parts Required</h3>
                  <ul className="space-y-2 bg-gray-900/50 p-4 rounded-lg">
                    {task.parts.map(part => (
                      <li key={part.id} className="flex justify-between items-center text-sm">
                        <span className="text-gray-300">{part.name} (x{part.qty})</span>
                        <span className={`px-2 py-0.5 text-xs rounded-full ${part.status === 'Received' ? 'bg-green-800 text-green-300' : 'bg-yellow-800 text-yellow-300'}`}>{part.status}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              <div>
                <h3 className="font-semibold text-lg text-white mb-2 flex items-center"><MessageSquare className="mr-3 h-5 w-5 text-yellow-400"/>Job Notes & Logs</h3>
                 <div className="bg-gray-900/50 p-4 rounded-lg text-sm text-gray-300 space-y-4">
                   {managerNotes.length > 0 && <div><p className="font-bold text-gray-400 text-xs uppercase mb-1">Manager Instructions</p>{managerNotes.map(note => (<p key={note.id}>- {note.note}</p>))}</div>}
                   {technicianLogs.length > 0 && <div><p className="font-bold text-gray-400 text-xs uppercase mb-1">Technician Logs</p>{technicianLogs.map(note => (<p key={note.id}>- {note.note} <span className="text-gray-500">({note.authorName})</span></p>))}</div>}
                   <div className="flex space-x-2 pt-2 border-t border-gray-700">
                    <input type="text" value={noteText} onChange={e => setNoteText(e.target.value)} placeholder="Add a log or note..." className="flex-grow bg-gray-700 border-gray-600 rounded-md text-white placeholder-gray-400 text-sm p-2 focus:ring-red-500 focus:border-red-500"/>
                    <Button onClick={handleNoteSubmit} variant="primary" size="sm" disabled={!noteText.trim()}><Send className="w-4 h-4"/></Button>
                   </div>
                 </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default JobCardModal;

==================== components\dashboard\KeyPerformanceIndicators.tsx ====================

// [path]: components/dashboard/KeyPerformanceIndicators.tsx

'use client';

import { useMemo } from 'react';
import { Project, Shift } from '@/lib/types';
import { calculateProjectProfitability } from '@/lib/utils';
import { differenceInMilliseconds, parseISO } from 'date-fns';
import KpiDial from './KpiDial';
import { DollarSign, BarChart3, CheckCircle, Percent } from 'lucide-react';

interface KeyPerformanceIndicatorsProps {
  projects: Project[];
  shifts: Shift[];
}

const calculateShiftDuration = (shift: Shift): number => {
    if (!shift.clockOutTime) return 0;
    const duration = differenceInMilliseconds(parseISO(shift.clockOutTime), parseISO(shift.clockInTime));
    const breakDuration = shift.breaks.reduce((acc, br) => {
        if (br.endTime) {
            return acc + differenceInMilliseconds(parseISO(br.endTime), parseISO(br.startTime));
        }
        return acc;
    }, 0);
    return (duration - breakDuration) / (1000 * 60 * 60); // convert to hours
};

const KeyPerformanceIndicators = ({ projects, shifts }: KeyPerformanceIndicatorsProps) => {
  const stats = useMemo(() => {
    // 1. Workshop Utilization
    const totalShiftHours = shifts.reduce((acc, shift) => acc + calculateShiftDuration(shift), 0);
    const totalTaskHours = projects.reduce((acc, p) => 
        acc + p.categories.reduce((catAcc, cat) => 
            catAcc + cat.subTasks.reduce((taskAcc, task) => taskAcc + (task.actualHours || 0), 0)
        , 0)
    , 0);
    const utilization = totalShiftHours > 0 ? (totalTaskHours / totalShiftHours) * 100 : 0;

    // 2. On-Time Delivery
    const completedProjects = projects.filter(p => p.status === 'Completed');
    const onTimeProjects = completedProjects.filter(p => 
        p.promisedDate && p.categories.every(c => c.subTasks.every(t => t.completedAt && new Date(t.completedAt) <= new Date(p.promisedDate!)))
    ).length;
    const onTimeDeliveryRate = completedProjects.length > 0 ? (onTimeProjects / completedProjects.length) * 100 : 100;

    // 3. Average Profit Margin
    const activeProjects = projects.filter(p => p.status === 'Active');
    const totalMargin = activeProjects.reduce((acc, p) => acc + calculateProjectProfitability(p).margin, 0);
    const averageMargin = activeProjects.length > 0 ? totalMargin / activeProjects.length : 0;

    return {
      revenueMTD: 'R115K', // Static for now
      utilization: `${Math.min(utilization, 100).toFixed(0)}%`,
      onTimeDelivery: `${onTimeDeliveryRate.toFixed(0)}%`,
      profitMargin: `${averageMargin.toFixed(1)}%`,
    };
  }, [projects, shifts]);

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <KpiDial title="Revenue (MTD)" value={stats.revenueMTD} Icon={DollarSign} colorClass="text-green-400" animationDelay={0.1} />
      <KpiDial title="Workshop Utilization" value={stats.utilization} Icon={BarChart3} colorClass="text-blue-400" animationDelay={0.2} />
      <KpiDial title="On-Time Delivery" value={stats.onTimeDelivery} Icon={CheckCircle} colorClass="text-yellow-400" animationDelay={0.3} />
      <KpiDial title="Avg. Profit Margin" value={stats.profitMargin} Icon={Percent} colorClass="text-red-400" animationDelay={0.4} />
    </div>
  );
};

export default KeyPerformanceIndicators;

==================== components\dashboard\KpiDial.tsx ====================

// [path]: components/dashboard/KpiDial.tsx

'use client';

import { motion } from 'framer-motion';
import React from 'react';

interface KpiDialProps {
  title: string;
  value: string;
  Icon: React.ElementType;
  colorClass: 'text-green-400' | 'text-yellow-400' | 'text-blue-400' | 'text-red-400';
  animationDelay: number;
}

const KpiDial = ({ title, value, Icon, colorClass, animationDelay }: KpiDialProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: animationDelay }}
      className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft flex flex-col justify-between"
    >
      <div className="flex justify-between items-center">
        <h3 className="font-semibold text-white">{title}</h3>
        <Icon className={`h-6 w-6 ${colorClass}`} />
      </div>
      <div>
        <p className={`text-5xl font-bold tracking-tighter ${colorClass}`}>{value}</p>
      </div>
    </motion.div>
  );
};

export default KpiDial;

==================== components\dashboard\LowStockAlerts.tsx ====================

// [path]: components/dashboard/LowStockAlerts.tsx

'use client';

import { Archive, AlertTriangle } from 'lucide-react';

const LowStockAlerts = () => {
    // NOTE: This is hardcoded placeholder data.
    const lowStockItems = [
        { id: 'LS-1', name: 'Brake Pads (Set)', partNumber: 'DP-3000', stock: 2, reorderPoint: 5 },
        { id: 'LS-2', name: '10W-40 Synthetic Oil (L)', partNumber: 'SYN-10W40', stock: 18, reorderPoint: 20 },
        { id: 'LS-3', name: 'V-Belt 7PK1795', partNumber: 'BLT-7PK1795', stock: 1, reorderPoint: 3 },
    ];

    return (
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center">
                <Archive className="h-5 w-5 mr-3 text-yellow-400" />
                Low Stock Alerts
            </h3>
            <ul className="space-y-3">
                {lowStockItems.map(item => (
                    <li key={item.id} className="bg-gray-900/50 p-3 rounded-md">
                        <p className="font-semibold text-white text-sm">{item.name}</p>
                        <p className="text-xs text-gray-500">{item.partNumber}</p>
                        <div className="flex items-center text-sm text-red-400 mt-1 font-bold">
                           <AlertTriangle className="h-4 w-4 mr-2" />
                           <span>In Stock: {item.stock} (Re-order at {item.reorderPoint})</span>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default LowStockAlerts;

==================== components\dashboard\MessageView.tsx ====================

// [path]: components/dashboard/MessageView.tsx

'use client';

import { useState } from 'react';
import { Project, Message, UserRole } from '@/lib/types';
import Button from '../ui/Button';
import { Send, Eye, EyeOff } from 'lucide-react';

interface MessageViewProps {
  project: Project | null;
  currentUserRole: UserRole;
  onSendMessage: (projectId: string, message: Omit<Message, 'id' | 'createdAt' | 'authorRole'>) => void;
}

type MessageVisibility = 'All' | 'BossOnly' | 'StaffOnly';

const MessageView = ({ project, currentUserRole, onSendMessage }: MessageViewProps) => {
  const [newMessage, setNewMessage] = useState('');
  const [visibility, setVisibility] = useState<MessageVisibility>('StaffOnly');

  if (!project) {
    return (
        <div className="h-full flex items-center justify-center bg-gray-800 rounded-lg border-2 border-dashed border-gray-700">
            <p className="text-gray-500">Select a project to view messages.</p>
        </div>
    );
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    onSendMessage(project.id, {
      author: currentUserRole,
      text: newMessage,
      visibleTo: visibility,
    });

    setNewMessage('');
    setVisibility('StaffOnly');
  };
  
  const filteredMessages = project.messages.filter(msg => {
    if (currentUserRole === 'Boss') return true;
    if (currentUserRole === 'Manager') return msg.visibleTo !== 'BossOnly';
    return false; // Technicians and Clients don't use this view
  }).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());

  return (
    <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft h-full flex flex-col">
      <div className="p-4 border-b border-white/10 flex-shrink-0">
        <h3 className="text-xl font-bold text-white">{`${project.car.year} ${project.car.make} ${project.car.model}`}</h3>
        <p className="text-sm text-gray-400">{project.customerName}</p>
      </div>
      
      <div className="flex-grow h-0 overflow-y-auto p-4 space-y-4">
        {filteredMessages.length > 0 ? (
          filteredMessages.map(msg => (
            <div key={msg.id} className={`flex flex-col ${msg.authorRole === 'Client' ? 'items-start' : 'items-end'}`}>
              <div className={`max-w-xs lg:max-w-md p-3 rounded-lg ${msg.authorRole === 'Client' ? 'bg-gray-700' : 'bg-red-900/80'}`}>
                <p className="text-sm text-white">{msg.text}</p>
              </div>
              <p className="text-xs text-gray-500 mt-1 px-1">
                {msg.author} - {new Date(msg.createdAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                {currentUserRole === 'Boss' && msg.visibleTo !== 'All' && (
                  <span className='ml-2 inline-flex items-center text-yellow-400'>({msg.visibleTo === 'BossOnly' ? <EyeOff className='h-3 w-3 mr-1'/> : <Eye className='h-3 w-3 mr-1'/>}{msg.visibleTo})</span>
                )}
              </p>
            </div>
          ))
        ) : (
          <div className="flex items-center justify-center h-full">
            <p className="text-sm text-gray-500">No messages yet. Start the conversation!</p>
          </div>
        )}
      </div>
      
      <div className="p-4 border-t border-white/10 flex-shrink-0">
        <form onSubmit={handleSubmit}>
          <textarea
            rows={3}
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500"
            placeholder="Type your reply or internal note..."
          />
          <div className="flex justify-between items-center mt-2">
            <div className="flex items-center space-x-2 text-sm">
              <select value={visibility} onChange={e => setVisibility(e.target.value as MessageVisibility)} className="text-xs rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500">
                  <option value="All">Reply to Client</option>
                  <option value="StaffOnly">Internal Note (Staff Only)</option>
                  {currentUserRole === 'Boss' && <option value="BossOnly">Internal Note (Boss Only)</option>}
              </select>
            </div>
            <Button type="submit" variant="primary" size="sm" disabled={!newMessage.trim()}>
                Send <Send className="w-4 h-4 ml-2" />
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default MessageView;

==================== components\dashboard\MessagingCenter.tsx ====================

// [path]: components/dashboard/MessagingCenter.tsx

'use client';

import { useState } from 'react';
import { Project, Message, UserRole } from '@/lib/types'; // Import UserRole
import Button from '../ui/Button';
import { Send, Eye, EyeOff } from 'lucide-react';

interface MessagingCenterProps {
  project: Project;
  currentUserRole: UserRole; // CORRECTED: Now accepts any UserRole
  onSendMessage: (message: Omit<Message, 'id' | 'createdAt' | 'authorRole'>) => void;
}

type MessageVisibility = 'All' | 'BossOnly' | 'StaffOnly';

const MessagingCenter = ({ project, currentUserRole, onSendMessage }: MessagingCenterProps) => {
  const [newMessage, setNewMessage] = useState('');
  const [visibility, setVisibility] = useState<MessageVisibility>('All');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    onSendMessage({
      author: currentUserRole, // The author is just the role string for now
      text: newMessage,
      visibleTo: visibility,
    });

    setNewMessage('');
    setVisibility(currentUserRole === 'Client' ? 'All' : 'StaffOnly');
  };
  
  const filteredMessages = project.messages.filter(msg => {
    if (currentUserRole === 'Boss') return true;
    if (currentUserRole === 'Manager') return msg.visibleTo !== 'BossOnly';
    if (currentUserRole === 'Client') return msg.visibleTo === 'All';
    // Technicians see no messages by default
    return false;
  }).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Communication Center</h3>
      
      <div className="h-64 overflow-y-auto mb-4 p-3 bg-gray-900/50 rounded-md border border-gray-700 space-y-4">
        {filteredMessages.length > 0 ? (
          filteredMessages.map(msg => (
            <div key={msg.id} className={`flex flex-col ${msg.authorRole === 'Client' ? 'items-start' : 'items-end'}`}>
              <div className={`max-w-xs lg:max-w-md p-3 rounded-lg ${msg.authorRole === 'Client' ? 'bg-gray-700' : 'bg-red-900/80'}`}>
                <p className="text-sm text-white">{msg.text}</p>
              </div>
              <p className="text-xs text-gray-500 mt-1 px-1">
                {msg.author} - {new Date(msg.createdAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                {currentUserRole === 'Boss' && msg.visibleTo !== 'All' && (
                  <span className='ml-2 inline-flex items-center text-yellow-400'>({msg.visibleTo === 'BossOnly' ? <EyeOff className='h-3 w-3 mr-1'/> : <Eye className='h-3 w-3 mr-1'/>}{msg.visibleTo})</span>
                )}
              </p>
            </div>
          ))
        ) : (
          <div className="flex items-center justify-center h-full">
            <p className="text-sm text-gray-500">No messages yet. Start the conversation!</p>
          </div>
        )}
      </div>
      
      {/* Technicians do not get a message box */}
      {currentUserRole !== 'Technician' && (
        <form onSubmit={handleSubmit}>
          <textarea
            rows={3}
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500"
            placeholder={currentUserRole === 'Client' ? "Have a question? Send a message..." : "Type your reply or internal note..."}
          />
          <div className="flex justify-between items-center mt-2">
              <div className="flex items-center space-x-2 text-sm">
                  {currentUserRole === 'Client' && (
                      <select value={visibility} onChange={e => setVisibility(e.target.value as MessageVisibility)} className="text-xs rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500">
                          <option value="All">To Boss & Manager</option>
                          <option value="BossOnly">To Boss Only (Confidential)</option>
                      </select>
                  )}
                  {currentUserRole !== 'Client' && (
                      <select value={visibility} onChange={e => setVisibility(e.target.value as MessageVisibility)} className="text-xs rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-red-500 focus:ring-red-500">
                          <option value="All">Reply to Client</option>
                          <option value="StaffOnly">Internal Note (Staff Only)</option>
                      </select>
                  )}
              </div>
              <Button type="submit" variant="primary" size="sm" disabled={!newMessage.trim()}>
                  Send <Send className="w-4 h-4 ml-2" />
              </Button>
          </div>
        </form>
      )}
    </div>
  );
};

export default MessagingCenter;

==================== components\dashboard\NotificationsCenter.tsx ====================

// [path]: components/dashboard/NotificationsCenter.tsx

'use client';

import { useState, useEffect, useMemo, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Bell, CheckSquare, MessageSquare, AlertTriangle } from 'lucide-react';
import { getProjects } from '@/lib/data-service';
import Link from 'next/link';

type NotificationType = 'Approval' | 'Message' | 'Blocked';

interface Notification {
  id: string;
  type: NotificationType;
  text: string;
  subtext: string;
  href: string;
  icon: React.ElementType;
}

const NotificationsCenter = () => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const notifications = useMemo(() => {
    const allProjects = getProjects();
    const items: Notification[] = [];

    allProjects.forEach(project => {
      // Pending Approvals
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          if (task.status === 'Awaiting Approval') {
            items.push({
              id: `approval-${task.id}`,
              type: 'Approval',
              text: `Approval needed: "${task.name}"`,
              subtext: `${project.car.year} ${project.car.make} ${project.car.model}`,
              href: `/dashboard/projects/${project.id}#progress`,
              icon: CheckSquare,
            });
          }
        });
      });

      // Recent Client Messages
      const clientMessages = project.messages.filter(m => m.authorRole === 'Client');
      if (clientMessages.length > 0) {
        const latestMessage = clientMessages.sort((a,b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())[0];
        items.push({
            id: `message-${latestMessage.id}`,
            type: 'Message',
            text: `New message from ${project.customerName}`,
            subtext: `"${latestMessage.text.substring(0, 30)}..."`,
            href: `/dashboard/projects/${project.id}#messages`,
            icon: MessageSquare,
        });
      }

      // Blocked Projects
      if (project.status === 'On Hold') {
        items.push({
            id: `blocked-${project.id}`,
            type: 'Blocked',
            text: `Project is blocked`,
            subtext: `Reason: ${project.holdReason}`,
            href: `/dashboard/projects/${project.id}`,
            icon: AlertTriangle,
        });
      }
    });

    return items.slice(0, 10); // Limit to 10 most recent for performance
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button onClick={() => setIsOpen(!isOpen)} className="relative text-gray-400 hover:text-white">
        <Bell className="h-6 w-6" />
        {notifications.length > 0 && (
          <span className="absolute -top-1 -right-1 flex h-3 w-3">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
          </span>
        )}
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute right-0 mt-2 w-80 bg-gray-800 border border-white/10 rounded-lg shadow-xl z-20"
          >
            <div className="p-3 border-b border-gray-700">
              <h3 className="font-semibold text-white">Notifications</h3>
            </div>
            <div className="max-h-96 overflow-y-auto">
              {notifications.length > 0 ? (
                <ul>
                  {notifications.map(item => {
                    const colors = {
                        Approval: 'text-blue-400',
                        Message: 'text-purple-400',
                        Blocked: 'text-red-400',
                    }
                    return (
                        <li key={item.id}>
                            <Link 
                                href={item.href}
                                onClick={() => setIsOpen(false)}
                                className="flex items-start p-3 hover:bg-gray-700/50"
                            >
                                <item.icon className={`h-5 w-5 mt-1 mr-3 flex-shrink-0 ${colors[item.type]}`} />
                                <div>
                                    <p className="text-sm text-white">{item.text}</p>
                                    <p className="text-xs text-gray-400">{item.subtext}</p>
                                </div>
                            </Link>
                        </li>
                    )
                  })}
                </ul>
              ) : (
                <p className="p-4 text-center text-sm text-gray-500">No new notifications.</p>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default NotificationsCenter;

==================== components\dashboard\PartsBoard.tsx ====================

// [path]: components/dashboard/PartsBoard.tsx

'use client';

import { Project, Part } from '@/lib/types';
import { useMemo } from 'react';
import Link from 'next/link';

interface PartWithContext extends Part {
  projectName: string;
  projectId: string;
  taskName: string;
}

interface PartsBoardProps {
  allProjects: Project[];
}

const PartsBoard = ({ allProjects }: PartsBoardProps) => {
  const allParts = useMemo(() => {
    const partsList: PartWithContext[] = [];
    const activeProjects = allProjects.filter(p => p.status === 'Active' || p.status === 'On Hold');

    activeProjects.forEach(project => {
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          if (task.parts && task.parts.length > 0) {
            task.parts.forEach(part => {
              partsList.push({
                ...part,
                projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
                projectId: project.id,
                taskName: task.name,
              });
            });
          }
        });
      });
    });
    return partsList;
  }, [allProjects]);

  const getStatusClasses = (status: Part['status']) => {
    switch (status) {
      case 'Received':
        return 'bg-green-900/50 text-green-300 border border-green-500/30';
      case 'Ordered':
        return 'bg-blue-900/50 text-blue-300 border border-blue-500/30';
      case 'Cancelled':
        return 'bg-red-900/50 text-red-300 border border-red-500/30';
      default: // Needed
        return 'bg-yellow-900/50 text-yellow-300 border border-yellow-500/30';
    }
  };

  // In a real app, this would trigger a backend update.
  const handleStatusChange = (partId: string, currentStatus: Part['status']) => {
    const statusCycle: Part['status'][] = ['Needed', 'Ordered', 'Received', 'Cancelled'];
    const currentIndex = statusCycle.indexOf(currentStatus);
    const nextIndex = (currentIndex + 1) % statusCycle.length;
    const newStatus = statusCycle[nextIndex];
    alert(`Changing status for part ${partId} from ${currentStatus} to ${newStatus}.\n(This would be a database update).`);
  };

  return (
    <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-700">
          <thead className="bg-gray-900/50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Part Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Project</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Quantity</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
            </tr>
          </thead>
          <tbody className="bg-gray-800 divide-y divide-gray-700">
            {allParts.map(part => (
              <tr key={part.id} className="hover:bg-gray-700/50 transition-colors">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-white">{part.name}</div>
                  <div className="text-xs text-gray-500">{part.partNumber || 'N/A'}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <Link href={`/dashboard/projects/${part.projectId}`} className="text-sm text-red-500 hover:underline">
                    {part.projectName}
                  </Link>
                  <div className="text-xs text-gray-500">Task: {part.taskName}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{part.qty}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <button
                    onClick={() => handleStatusChange(part.id, part.status)}
                    className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${getStatusClasses(part.status)}`}
                  >
                    {part.status}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {allParts.length === 0 && (
          <div className="text-center py-16">
            <p className="text-gray-500">No parts currently required for active projects.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default PartsBoard;

==================== components\dashboard\PendingApprovals.tsx ====================


// [path]: components/dashboard/PendingApprovals.tsx

'use client';

import { Project, SubTask } from '@/lib/types';
import { CheckSquare } from 'lucide-react';
import Link from 'next/link';
import { useMemo } from 'react';

interface PendingApprovalsProps {
  projects: Project[];
}

interface ApprovalItem extends SubTask {
  projectId: string;
  projectName: string;
}

const PendingApprovals = ({ projects }: PendingApprovalsProps) => {
  const itemsNeedingApproval = useMemo(() => {
    const items: ApprovalItem[] = [];
    projects.forEach(project => {
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          if (task.status === 'Awaiting Approval') {
            items.push({
              ...task,
              projectId: project.id,
              projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
            });
          }
        });
      });
    });
    return items;
  }, [projects]);

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft h-full">
      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
        <CheckSquare className="h-5 w-5 mr-3 text-blue-400" />
        Pending Approvals
      </h3>
      {itemsNeedingApproval.length > 0 ? (
        <ul className="space-y-4">
          {itemsNeedingApproval.map(item => (
            <li key={item.id}>
              <Link href={`/dashboard/projects/${item.projectId}`} className="block p-3 rounded-md hover:bg-gray-700/50 transition-colors">
                <p className="font-semibold text-white">{item.name}</p>
                <p className="text-sm text-gray-400">{item.projectName}</p>
              </Link>
            </li>
          ))}
        </ul>
      ) : (
        <div className="flex items-center justify-center h-48">
          <p className="text-gray-500">No items are awaiting approval.</p>
        </div>
      )}
    </div>
  );
};

export default PendingApprovals;

==================== components\dashboard\PerformanceBarChart.tsx ====================

// [path]: components/dashboard/PerformanceBarChart.tsx

'use client';

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface PerformanceData {
  name: string;
  taskHours: number;
  shiftHours: number;
}

interface PerformanceBarChartProps {
  data: PerformanceData[];
}

const PerformanceBarChart = ({ data }: PerformanceBarChartProps) => {
  return (
    <div className="h-80 bg-gray-800 p-4 rounded-lg border border-white/10">
        <ResponsiveContainer width="100%" height="100%">
            <BarChart
                data={data}
                margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
            >
                <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" />
                <XAxis dataKey="name" stroke="#A0AEC0" />
                <YAxis stroke="#A0AEC0" />
                <Tooltip 
                    cursor={{fill: 'rgba(255, 255, 255, 0.1)'}}
                    contentStyle={{ backgroundColor: '#1A202C', border: '1px solid #4A5568' }}
                />
                <Legend />
                <Bar dataKey="shiftHours" name="Shift Hours" fill="#4A5568" />
                <Bar dataKey="taskHours" name="Task Hours" fill="#DC2626" />
            </BarChart>
        </ResponsiveContainer>
    </div>
  );
};

export default PerformanceBarChart;

==================== components\dashboard\PhotoHighlights.tsx ====================

import { getRecentMedia } from '@/lib/data-service';
import Image from 'next/image';

const PhotoHighlights = () => {
  const recentMedia = getRecentMedia(4); // Get the latest 4 images

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Photo Highlights</h3>
      {recentMedia.length > 0 ? (
        <div className="grid grid-cols-2 gap-4">
          {recentMedia.map(item => (
            <div key={item.id} className="relative aspect-square rounded-md overflow-hidden group">
              <Image
                src={item.url}
                alt={item.caption}
                fill
                sizes="200px"
                className="object-cover group-hover:scale-105 transition-transform"
              />
            </div>
          ))}
        </div>
      ) : (
        <p className="text-sm text-gray-500">No recent photos uploaded.</p>
      )}
    </div>
  );
};

export default PhotoHighlights;

==================== components\dashboard\PredictiveAnalyticsChart.tsx ====================

// [path]: components/dashboard/PredictiveAnalyticsChart.tsx

'use client';

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const PredictiveAnalyticsChart = () => {
    // NOTE: This is hardcoded placeholder data for demonstration.
    const data = [
        { name: 'Last Week', completed: 2 },
        { name: 'This Week', completed: 1 },
        { name: 'Next Week', completed: 3 },
        { name: 'In 2 Weeks', completed: 2 },
        { name: 'In 3 Weeks', completed: 4 },
    ];

    return (
        <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft h-full">
            <h3 className="text-xl font-bold text-white mb-4">Project Completion Forecast</h3>
            <div className="h-72">
                 <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                        data={data}
                        margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
                    >
                        <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" />
                        <XAxis dataKey="name" stroke="#A0AEC0" fontSize={12} />
                        <YAxis stroke="#A0AEC0" fontSize={12} allowDecimals={false}/>
                        <Tooltip 
                            cursor={{fill: 'rgba(255, 255, 255, 0.1)'}}
                            contentStyle={{ backgroundColor: '#1A202C', border: '1px solid #4A5568' }}
                        />
                        <Bar dataKey="completed" name="Projects Completed" fill="#DC2626" />
                    </BarChart>
                </ResponsiveContainer>
            </div>
        </div>
    );
};

export default PredictiveAnalyticsChart;

==================== components\dashboard\ProjectStatusUpdater.tsx ====================

'use client';

import { Project } from '@/lib/types';
import { useState } from 'react';

interface ProjectStatusUpdaterProps {
  currentStatus: Project['status'];
  onStatusChange: (newStatus: Project['status'], holdReason: Project['holdReason']) => void;
}

const statusOptions: Project['status'][] = ['Active', 'On Hold', 'Completed'];
const holdReasonOptions: NonNullable<Project['holdReason']>[] = ['Awaiting Parts', 'Awaiting Payment', 'Awaiting Client Decision'];

const ProjectStatusUpdater = ({ currentStatus, onStatusChange }: ProjectStatusUpdaterProps) => {
  const [newStatus, setNewStatus] = useState(currentStatus);
  const [holdReason, setHoldReason] = useState<Project['holdReason']>('');
  
  const handleUpdate = () => {
    if (newStatus !== currentStatus) {
      // If the status is not 'On Hold', we clear the reason. Otherwise, we pass it.
      const reasonForUpdate = newStatus === 'On Hold' ? holdReason : '';
      
      // The parent component handles creating the timeline update. We just pass the data.
      onStatusChange(newStatus, reasonForUpdate);
    }
  };
  
  return (
    <div className="space-y-4">
        <div>
            <label htmlFor="status" className="block text-sm font-medium text-gray-300">
                Project Status
            </label>
            <select
                id="status"
                value={newStatus}
                onChange={(e) => setNewStatus(e.target.value as Project['status'])}
                className="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 text-white shadow-sm focus:border-red-500 focus:ring-red-500"
            >
                {statusOptions.map(option => (
                  <option key={option} value={option} className="bg-gray-800 text-white">{option}</option>
                ))}
            </select>
        </div>
        
        {newStatus === 'On Hold' && (
             <div>
                <label htmlFor="holdReason" className="block text-sm font-medium text-gray-300">
                    Reason for Hold
                </label>
                <select
                    id="holdReason"
                    value={holdReason}
                    onChange={(e) => setHoldReason(e.target.value as Project['holdReason'])}
                    className="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 text-white placeholder-gray-400 shadow-sm focus:border-red-500 focus:ring-red-500"
                    required
                >
                    <option value="" disabled>Select a reason...</option>
                    {holdReasonOptions.map(option => (
                      <option key={option} value={option} className="bg-gray-800 text-white">{option}</option>
                    ))}
                </select>
            </div>
        )}

        <button
            onClick={handleUpdate}
            disabled={newStatus === currentStatus || (newStatus === 'On Hold' && !holdReason)}
            className="w-full px-4 py-2 text-sm font-semibold text-white bg-red-600 rounded-md hover:bg-red-700 disabled:bg-gray-700 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors"
        >
            Update Status
        </button>
    </div>
  );
};

export default ProjectStatusUpdater;

==================== components\dashboard\ProjectSummaryCard.tsx ====================

import { Project } from '@/lib/types';
import Image from 'next/image';
import Link from 'next/link';
import ProgressBar from '../ui/ProgressBar';

interface ProjectSummaryCardProps {
  project: Project;
  progress: number;
}

const ProjectSummaryCard = ({ project, progress }: ProjectSummaryCardProps) => {
  const statusClasses = {
    Active: 'bg-green-900/50 text-green-300 border border-green-500/30',
    'On Hold': 'bg-yellow-900/50 text-yellow-300 border border-yellow-500/30',
    Completed: 'bg-red-900/50 text-red-300 border border-red-500/30',
  };
  const photoUrl = project.media.length > 0 ? project.media[0].url : 'https://images.unsplash.com/photo-1588258933833-28b2b5161d87?q=80&w=870&auto=format&fit=crop';

  return (
    <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft overflow-hidden transition-transform hover:-translate-y-1">
      <div className="relative h-40">
        <Image 
          src={photoUrl} 
          alt={`${project.car.make} ${project.car.model}`}
          fill
          className="object-cover"
        />
      </div>
      <div className="p-6">
        <div className="flex justify-between items-start mb-2">
          <div>
            <p className="font-bold text-lg text-white">{project.car.year} {project.car.make} {project.car.model}</p>
            <p className="text-sm text-gray-400">{project.customerName}</p>
          </div>
          <span className={`text-xs font-semibold px-2.5 py-0.5 rounded-full ${statusClasses[project.status]}`}>
            {project.status}
          </span>
        </div>
        <div className="mt-4">
          <div className="flex justify-between items-center mb-1">
            <span className="text-xs font-medium text-gray-400">Progress</span>
            <span className="text-xs font-bold text-red-500">{Math.round(progress)}%</span>
          </div>
          <ProgressBar progress={progress} />
        </div>
        <Link href={`/dashboard/projects/${project.id}`} className="block w-full text-center mt-6 bg-red-600 text-white px-4 py-2 rounded-md text-sm font-semibold hover:bg-red-700 transition-colors">
          View Details
        </Link>
      </div>
    </div>
  );
};

export default ProjectSummaryCard;

==================== components\dashboard\ProjectsKanbanView.tsx ====================

// [path]: components/dashboard/ProjectsKanbanView.tsx

'use client';

import { useMemo } from 'react';
import { Project } from '@/lib/types';
import { calculateOverallProgress } from '@/lib/utils';
import Link from 'next/link';
import Image from 'next/image';
import ProgressBar from '../ui/ProgressBar';

interface ProjectsKanbanViewProps {
  projects: Project[];
}

const STAGES = ['Intake', 'Body & Paint', 'Engine & Drivetrain', 'Chassis & Suspension', 'Interior & Electrical', 'Final Assembly', 'Completed'];

const getProjectStage = (project: Project): string => {
    if (project.status === 'Completed') {
        return 'Completed';
    }

    const inProgressTask = project.categories.flatMap(c => c.subTasks.map(t => ({...t, categoryName: c.name}))).find(t => t.status === 'In Progress');
    if (inProgressTask) {
        // A simple mapping for demonstration. This could be more complex.
        if (inProgressTask.categoryName.includes('Interior') || inProgressTask.categoryName.includes('Electrical')) return 'Interior & Electrical';
        if (STAGES.includes(inProgressTask.categoryName)) return inProgressTask.categoryName;
    }

    const pendingTask = project.categories.flatMap(c => c.subTasks.map(t => ({...t, categoryName: c.name}))).find(t => t.status === 'Pending');
    if (pendingTask) {
        if (pendingTask.categoryName.includes('Interior') || pendingTask.categoryName.includes('Electrical')) return 'Interior & Electrical';
        if (STAGES.includes(pendingTask.categoryName)) return pendingTask.categoryName;
    }
    
    // Default to Intake if no tasks have been started
    const allPending = project.categories.every(c => c.subTasks.every(t => t.status === 'Pending'));
    if(allPending) return 'Intake';

    // Fallback if logic doesn't catch a case
    return 'Final Assembly';
};

const ProjectsKanbanView = ({ projects }: ProjectsKanbanViewProps) => {

  const projectsByStage = useMemo(() => {
    const grouped = STAGES.reduce((acc, stage) => {
        acc[stage] = [];
        return acc;
    }, {} as Record<string, Project[]>);

    projects.forEach(project => {
        const stage = getProjectStage(project);
        if (grouped[stage]) {
            grouped[stage].push(project);
        }
    });

    return grouped;
  }, [projects]);

  return (
    <div className="flex space-x-4 overflow-x-auto pb-4">
      {STAGES.map(stage => (
        <div key={stage} className="w-80 flex-shrink-0 bg-gray-900/50 rounded-lg">
          <div className="p-4 border-b border-white/10">
            <h3 className="font-bold text-white">{stage} <span className="text-sm font-normal text-gray-500">{projectsByStage[stage].length}</span></h3>
          </div>
          <div className="p-2 space-y-3 h-[calc(100vh-270px)] overflow-y-auto">
            {projectsByStage[stage].map(project => {
                const progress = calculateOverallProgress(project);
                const photoUrl = project.media.length > 0 ? project.media[0].url : 'https://images.unsplash.com/photo-1588258933833-28b2b5161d87?q=80&w=870&auto=format&fit=crop';
                return (
                    <Link href={`/dashboard/projects/${project.id}`} key={project.id} className="block bg-gray-800 p-3 rounded-md border border-gray-700 shadow-soft hover:border-red-500/50 transition-colors">
                        <div className="relative h-24 rounded-md overflow-hidden mb-3">
                           <Image 
                                src={photoUrl} 
                                alt={`${project.car.make} ${project.car.model}`}
                                fill
                                className="object-cover"
                            />
                        </div>
                        <p className="text-sm font-bold text-gray-200">{`${project.car.year} ${project.car.make} ${project.car.model}`}</p>
                        <p className="text-xs text-gray-400 mb-2">{project.customerName}</p>
                        <ProgressBar progress={progress} />
                        <div className="flex justify-between items-center mt-1">
                            <span className="text-xs text-gray-500">{project.status}</span>
                            <span className="text-xs font-bold text-red-500">{Math.round(progress)}%</span>
                        </div>
                    </Link>
                );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};

export default ProjectsKanbanView;

==================== components\dashboard\ProjectsListView.tsx ====================

// [path]: components/dashboard/ProjectsListView.tsx

'use client';

import { Project } from '@/lib/types';
import { calculateOverallProgress } from '@/lib/utils';
import Link from 'next/link';
import { AlertTriangle, Wrench } from 'lucide-react';

interface ProjectsListViewProps {
  projects: Project[];
}

const StatusDisplay = ({ status, holdReason }: { status: Project['status'], holdReason: Project['holdReason'] }) => {
  const statusClasses = {
    Active: 'bg-green-900/50 text-green-300 border border-green-500/30',
    'On Hold': 'bg-yellow-900/50 text-yellow-300 border border-yellow-500/30',
    Completed: 'bg-red-900/50 text-red-300 border border-red-500/30',
  };

  const holdReasonIcons: { [key: string]: React.ReactElement } = {
    'Awaiting Parts': <Wrench className="h-3 w-3 mr-1.5" />,
    'Awaiting Payment': <span className="mr-1.5 font-bold text-lg leading-none">$</span>,
    'Awaiting Client Decision': <AlertTriangle className="h-3 w-3 mr-1.5" />,
  };

  const displayText = status === 'On Hold' && holdReason ? holdReason : status;
  return (
    <div className={`px-2 py-1 inline-flex items-center text-xs leading-5 font-semibold rounded-full ${statusClasses[status]}`}>
      {status === 'On Hold' && holdReason && holdReasonIcons[holdReason]}
      {displayText}
    </div>
  );
};

const ProjectsListView = ({ projects }: ProjectsListViewProps) => {
  return (
    <div className="bg-gray-800 border border-white/10 rounded-lg shadow-soft overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-700">
          <thead className="bg-gray-900/50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Car</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Customer</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Progress</th>
              <th scope="col" className="relative px-6 py-3"><span className="sr-only">Actions</span></th>
            </tr>
          </thead>
          <tbody className="bg-gray-800 divide-y divide-gray-700">
            {projects.map(project => {
              const progress = calculateOverallProgress(project);
              return (
                <tr key={project.id} className="hover:bg-gray-700/50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-white">{project.car.year} {project.car.make} {project.car.model}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-300">{project.customerName}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <StatusDisplay status={project.status} holdReason={project.holdReason} />
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="w-20 bg-gray-700 rounded-full h-1.5 mr-2">
                        <div className="bg-red-600 h-1.5 rounded-full" style={{ width: `${progress}%` }}></div>
                      </div>
                      <span className="text-sm text-gray-400">{Math.round(progress)}%</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Link href={`/dashboard/projects/${project.id}`} className="text-red-500 hover:text-red-400">View</Link>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ProjectsListView;

==================== components\dashboard\QuickStats.tsx ====================

// [path]: components/dashboard/QuickStats.tsx

import { Car, CheckCircle, Clock, AlertTriangle } from 'lucide-react';
import { Project } from '@/lib/types';
import StatCard from './StatCard';
import { useMemo } from 'react';

interface QuickStatsProps {
  projects: Project[];
  // --- NEW: Prop to handle clicks ---
  onCardClick: (title: string, filteredProjects: Project[]) => void;
}

const QuickStats = ({ projects, onCardClick }: QuickStatsProps) => {

  // --- NEW: Memoized lists of projects for each stat ---
  const projectLists = useMemo(() => {
    const active = projects.filter(p => p.status === 'Active');
    const onHold = projects.filter(p => p.status === 'On Hold');
    
    // NOTE: These are simplified for the demo. A real app would have more robust date logic.
    const completedThisMonth = projects.filter(p => p.status === 'Completed');
    const upcomingDeliveries = projects.filter(p => p.promisedDate && new Date(p.promisedDate) > new Date() && p.status !== 'Completed');

    return { active, onHold, completedThisMonth, upcomingDeliveries };
  }, [projects]);

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
      <StatCard 
        icon={Car} 
        title="Active Projects" 
        value={projectLists.active.length} 
        colorClass="bg-red-600"
        onClick={() => onCardClick('Active Projects', projectLists.active)}
      />
      <StatCard 
        icon={CheckCircle} 
        title="Completed This Month" 
        value={projectLists.completedThisMonth.length} 
        colorClass="bg-green-600" 
        onClick={() => onCardClick('Completed This Month', projectLists.completedThisMonth)}
      />
      <StatCard 
        icon={Clock} 
        title="Upcoming Deliveries" 
        value={projectLists.upcomingDeliveries.length} 
        colorClass="bg-blue-600" 
        onClick={() => onCardClick('Upcoming Deliveries', projectLists.upcomingDeliveries)}
      />
      <StatCard 
        icon={AlertTriangle} 
        title="Projects On Hold" 
        value={projectLists.onHold.length} 
        colorClass="bg-yellow-600"
        onClick={() => onCardClick('Projects On Hold', projectLists.onHold)}
      />
    </div>
  );
};

export default QuickStats;

==================== components\dashboard\ScheduleTaskModal.tsx ====================

// [path]: components/dashboard/ScheduleTaskModal.tsx

'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Technician, UnscheduledTask } from '@/lib/types';
import Button from '../ui/Button';
import { mockTechnicians } from '@/lib/mock-data';

interface ScheduleTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  task: UnscheduledTask | null;
  onSave: (taskId: string, details: { startDate: string; dueDate: string; assignedTo: string }) => void;
  defaults?: { startDate: string; assignedTo: string } | null;
}

const ScheduleTaskModal = ({ isOpen, onClose, task, onSave, defaults }: ScheduleTaskModalProps) => {
  const [startDate, setStartDate] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [assignedTo, setAssignedTo] = useState('');
  const [technicians, setTechnicians] = useState<Technician[]>([]);

  useEffect(() => {
    setTechnicians(mockTechnicians);
    if (task) {
      setStartDate(defaults?.startDate || '');
      setDueDate('');
      setAssignedTo(defaults?.assignedTo || '');
    }
  }, [task, defaults]);

  const handleSave = () => {
    if (!task || !startDate || !dueDate || !assignedTo) {
      alert('Please fill out all fields.');
      return;
    }
    onSave(task.id, { startDate, dueDate, assignedTo });
    onClose();
  };

  if (!task) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9, y: 20 }} animate={{ scale: 1, y: 0 }} exit={{ scale: 0.9, y: 20 }} className="relative bg-gray-800 border border-white/10 w-full max-w-lg rounded-lg shadow-xl" onClick={(e) => e.stopPropagation()}>
            <div className="p-6">
               <h2 className="text-xl font-bold text-white">Schedule Task: {task.name}</h2>
              <p className="text-sm text-gray-400 mt-1">Assign dates and a technician to this task.</p>
            </div>
            
            <div className="p-6 border-t border-gray-700 space-y-4">
              <div className="grid grid-cols-2 gap-4">
                 <div>
                  <label htmlFor="startDate" className="block text-sm font-medium text-gray-300">Start Date</label>
                  <input type="date" id="startDate" value={startDate} onChange={(e) => setStartDate(e.target.value)} className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500 sm:text-sm text-white p-2" />
                </div>
                 <div>
                  <label htmlFor="dueDate" className="block text-sm font-medium text-gray-300">Due Date</label>
                  <input type="date" id="dueDate" value={dueDate} onChange={(e) => setDueDate(e.target.value)} className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500 sm:text-sm text-white p-2" />
                </div>
              </div>
               <div>
                <label htmlFor="technician" className="block text-sm font-medium text-gray-300">Assign To</label>
                <select id="technician" value={assignedTo} onChange={(e) => setAssignedTo(e.target.value)} className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500 sm:text-sm text-white p-2">
                  <option value="">Select Technician...</option>
                   {technicians.map(tech => (
                    <option key={tech.id} value={tech.id}>{tech.name}</option>
                  ))}
                </select>
              </div>
            </div>
            
             <div className="p-4 bg-gray-900/50 flex justify-end space-x-2 rounded-b-lg">
              <Button onClick={onClose} variant="secondary" size="sm">Cancel</Button>
              <Button onClick={handleSave} variant="primary" size="sm">Save Schedule</Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ScheduleTaskModal;

==================== components\dashboard\ScheduleView.tsx ====================

// [path]: components/dashboard/ScheduleView.tsx

'use client';

import { Project, AssignedTask, UnscheduledTask, Technician } from '@/lib/types';
import { mockTechnicians } from '@/lib/mock-data';
import { useMemo, useState, Fragment, useRef } from 'react';
import { differenceInDays, format, addDays, eachDayOfInterval, isWithinInterval } from 'date-fns';
import JobCardModal from './JobCardModal';
import { useDrop, DropTargetMonitor } from 'react-dnd';
import { ItemTypes } from './DraggableTaskCard';

interface ScheduleViewProps {
    allProjects: Project[];
    onTaskDrop: (task: UnscheduledTask, technician: Technician, date: Date) => void;
}

const DAILY_CAPACITY = 8; // hours

const ScheduleView = ({ allProjects, onTaskDrop }: ScheduleViewProps) => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedTask, setSelectedTask] = useState<AssignedTask | null>(null);

    const { scheduleStartDate, totalDays, dateArray } = useMemo(() => {
        const startDate = new Date();
        const endDate = addDays(startDate, 30);
        const days = differenceInDays(endDate, startDate) + 1;
        const array = eachDayOfInterval({ start: startDate, end: endDate });
        return { scheduleStartDate: startDate, totalDays: days, dateArray: array };
    }, []);

    const scheduledTasks = useMemo(() => {
        return allProjects.flatMap(p => 
            p.categories.flatMap(c => 
                c.subTasks
                    .filter(t => t.startDate && t.dueDate && t.assignedTo)
                    .map(t => ({
                        ...t,
                        projectId: p.id,
                        projectName: `${p.car.year} ${p.car.make} ${p.car.model}`,
                        categoryName: c.name,
                        startOffset: differenceInDays(new Date(t.startDate!), scheduleStartDate),
                        duration: differenceInDays(new Date(t.dueDate!), new Date(t.startDate!)) + 1,
                    }))
            )
        );
    }, [allProjects, scheduleStartDate]);

    const workloadMap = useMemo(() => {
        const map: Record<string, number> = {};
        mockTechnicians.forEach(tech => {
            dateArray.forEach(date => {
                const dateKey = format(date, 'yyyy-MM-dd');
                const key = `${tech.id}-${dateKey}`;
                map[key] = 0;
            });
        });

        scheduledTasks.forEach(task => {
            if (!task.assignedTo || !task.startDate || !task.dueDate) return;
            const taskInterval = { start: new Date(task.startDate), end: new Date(task.dueDate) };
            const dailyHours = (task.estimateHours || 0) / (differenceInDays(taskInterval.end, taskInterval.start) + 1);

            dateArray.forEach(date => {
                if (isWithinInterval(date, taskInterval)) {
                    const dateKey = format(date, 'yyyy-MM-dd');
                    const key = `${task.assignedTo}-${dateKey}`;
                    map[key] = (map[key] || 0) + dailyHours;
                }
            });
        });

        return map;
    }, [scheduledTasks, dateArray]);

    const getWorkloadColor = (hours: number): string => {
        if (hours > DAILY_CAPACITY) return 'bg-red-900/40';
        if (hours > DAILY_CAPACITY * 0.75) return 'bg-yellow-900/40';
        return '';
    };

    const handleTaskClick = (task: AssignedTask) => {
        setSelectedTask(task);
        setIsModalOpen(true);
    };

    const ScheduleCell = ({ tech, date }: { tech: Technician, date: Date }) => {
        const ref = useRef<HTMLDivElement>(null);

        const [{ isOver }, drop] = useDrop(() => ({
            accept: ItemTypes.TASK,
            drop: (item: UnscheduledTask) => onTaskDrop(item, tech, date),
            collect: (monitor: DropTargetMonitor) => ({
                isOver: !!monitor.isOver(),
            }),
        }));

        drop(ref);
        
        const dateKey = format(date, 'yyyy-MM-dd');
        const workload = workloadMap[`${tech.id}-${dateKey}`] || 0;
        const bgColor = getWorkloadColor(workload);

        return (
            <div 
                ref={ref} 
                className={`border-l border-t border-gray-700 transition-colors ${bgColor} ${isOver ? 'bg-red-500/50' : ''}`} 
                style={{ gridRow: mockTechnicians.indexOf(tech) + 2, gridColumn: dateArray.indexOf(date) + 2 }}
                title={`${tech.name} on ${dateKey}: ${workload.toFixed(1)} / ${DAILY_CAPACITY} hours`}
            ></div>
        );
    };

    return (
        <>
            <div className="bg-gray-800 border border-white/10 rounded-lg p-4 overflow-x-auto h-full">
                <div className="grid gap-0 min-w-[1800px]" style={{ 
                    gridTemplateColumns: `150px repeat(${totalDays}, minmax(50px, 1fr))`,
                    gridTemplateRows: `auto repeat(${mockTechnicians.length}, 3.5rem)`
                }}>
                    <div className="sticky left-0 bg-gray-900/80 backdrop-blur-sm p-2 rounded-tl-md text-xs font-bold text-white z-20 flex items-center justify-center" style={{ gridRow: 1, gridColumn: 1 }}>Technician</div>
                    {dateArray.map((date, i) => (
                        <div key={i} className="text-center text-xs text-gray-400 border-l border-b border-gray-700 pt-2" style={{ gridRow: 1, gridColumn: i + 2 }}>
                            <p>{format(date, 'dd')}</p>
                            <p className="font-bold">{format(date, 'EEE')}</p>
                        </div>
                    ))}

                    {mockTechnicians.map((tech) => (
                        <Fragment key={tech.id}>
                            <div className="sticky left-0 bg-gray-900/80 backdrop-blur-sm p-2 text-sm font-semibold text-white z-20 flex items-center border-t border-gray-700" style={{ gridRow: mockTechnicians.indexOf(tech) + 2, gridColumn: 1 }}>
                                {tech.name}
                            </div>
                            {dateArray.map((date) => (
                                <ScheduleCell key={format(date, 'yyyy-MM-dd')} tech={tech} date={date} />
                            ))}
                        </Fragment>
                    ))}

                    {scheduledTasks.map(task => {
                        const techIndex = mockTechnicians.findIndex(t => t.id === task.assignedTo);
                        if (techIndex === -1 || task.startOffset < 0 || task.startOffset >= totalDays) return null;
                        
                        return (
                            <div
                                key={task.id}
                                onClick={() => handleTaskClick(task as AssignedTask)}
                                className="bg-red-600/80 hover:bg-red-500 border border-red-400 rounded p-1 text-white text-xs overflow-hidden cursor-pointer flex items-center z-10 my-1 mx-px"
                                style={{
                                    gridRow: techIndex + 2,
                                    gridColumn: `${task.startOffset + 2} / span ${Math.min(task.duration, totalDays - task.startOffset)}`,
                                }}
                                title={`${task.name} (${task.projectName})`}
                            >
                                <p className="font-bold truncate px-1">{task.name}</p>
                            </div>
                        );
                    })}
                </div>
            </div>
            <JobCardModal 
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                task={selectedTask}
                activeTimerTaskId={null}
                timerStartTime={null}
                onStartTimer={() => {}}
                onStopTimer={() => {}}
                onStatusChange={() => {}}
                onAddNote={() => {}}
            />
        </>
    );
};

export default ScheduleView;

==================== components\dashboard\ShipmentsModal.tsx ====================

// [path]: components/dashboard/ShipmentsModal.tsx

'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { X, Package, Plane, Anchor, CheckCircle } from 'lucide-react';
import Button from '../ui/Button';

interface ShipmentsModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const ShipmentsModal = ({ isOpen, onClose }: ShipmentsModalProps) => {
  // NOTE: This is the same hardcoded placeholder data from the dashboard widget.
  const shipments = [
    { id: 1, orderNum: 'USA-84621', supplier: 'Summit Racing', content: 'Engine Block & Heads', status: 'In Transit', eta: 'Sep 2, 2025', icon: Plane, location: 'Departed JFK Airport, NY' },
    { id: 2, orderNum: 'USA-84622', supplier: 'Classic Industries', content: 'Full Interior & Carpet Kit', status: 'Customs', eta: 'Sep 5, 2025', icon: Anchor, location: 'Awaiting clearance at Durban Port' },
    { id: 3, orderNum: 'DE-19945', supplier: 'NPD', content: 'Complete Chrome Trim Set', status: 'In Transit', eta: 'Sep 8, 2025', icon: Plane, location: 'Departed Frankfurt Airport, DE' },
    { id: 4, orderNum: 'LOCAL-5512', supplier: 'Brake Corp', content: 'Brake Pads (x10)', status: 'Delivered', eta: 'Aug 29, 2025', icon: CheckCircle, location: 'Signed for at reception' },
  ];

  const getStatusColor = (status: string) => {
    if (status === 'Delivered') return 'text-green-400';
    if (status === 'Customs') return 'text-yellow-400';
    return 'text-blue-400';
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9 }} animate={{ scale: 1 }} exit={{ scale: 0.9 }} className="relative bg-gray-800 border border-white/10 w-full max-w-4xl h-[80vh] rounded-lg shadow-xl flex flex-col" onClick={(e) => e.stopPropagation()}>
            <div className="p-4 bg-gray-900/50 flex justify-between items-center border-b border-white/10 flex-shrink-0">
              <h2 className="text-xl font-bold text-white flex items-center"><Package className="mr-3"/>Shipment Tracking</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white"><X className="h-6 w-6" /></button>
            </div>
            <div className="p-6 flex-grow overflow-y-auto">
                <ul className="space-y-4">
                    {shipments.map(shipment => (
                        <li key={shipment.id} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700 flex flex-col sm:flex-row">
                            <div className="flex items-center sm:border-r border-gray-700 sm:pr-4 mb-3 sm:mb-0">
                                <shipment.icon className={`h-8 w-8 mr-4 flex-shrink-0 ${getStatusColor(shipment.status)}`} />
                                <div>
                                    <p className="font-bold text-white">{shipment.content}</p>
                                    <p className="text-sm text-gray-400">From: {shipment.supplier}</p>
                                    <p className="text-xs text-gray-500 font-mono">{shipment.orderNum}</p>
                                </div>
                            </div>
                            <div className="sm:pl-4 flex-grow">
                                <p className={`text-sm font-bold ${getStatusColor(shipment.status)}`}>{shipment.status}</p>
                                <p className="text-sm text-gray-300">{shipment.location}</p>
                                <p className="text-xs text-gray-500 mt-1">Estimated Delivery: {shipment.eta}</p>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
            <div className="p-4 bg-gray-900/50 flex justify-end space-x-2 rounded-b-lg border-t border-gray-700 flex-shrink-0">
              <Button onClick={onClose} variant="secondary" size="sm">Close</Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ShipmentsModal;

==================== components\dashboard\ShipmentsTracker.tsx ====================

// [path]: components/dashboard/ShipmentsTracker.tsx

'use client';

import { Package, Plane, Anchor } from 'lucide-react';

const ShipmentsTracker = () => {
  // NOTE: This is hardcoded placeholder data.
  const shipments = [
    { id: 1, supplier: 'Summit Racing', content: 'Engine Block', status: 'In Transit', eta: 'Sep 2, 2025', icon: Plane },
    { id: 2, supplier: 'Classic Industries', content: 'Interior Kit', status: 'Customs', eta: 'Sep 5, 2025', icon: Anchor },
    { id: 3, supplier: 'NPD', content: 'Chrome Trim', status: 'In Transit', eta: 'Sep 8, 2025', icon: Plane },
  ];

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
        <Package className="h-5 w-5 mr-3 text-blue-400" />
        Shipments Tracker
      </h3>
      <ul className="space-y-4">
        {shipments.map(shipment => (
          <li key={shipment.id} className="flex items-start">
            <div className="w-8 h-8 flex-shrink-0 bg-gray-700 rounded-full flex items-center justify-center mr-3">
              <shipment.icon className="w-4 h-4 text-blue-300" />
            </div>
            <div>
              <p className="font-semibold text-white">{shipment.content}</p>
              <p className="text-sm text-gray-400">From: {shipment.supplier}</p>
              <p className="text-xs font-medium text-yellow-400">ETA: {shipment.eta} ({shipment.status})</p>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ShipmentsTracker;

==================== components\dashboard\Sidebar.tsx ====================

// [path]: components/dashboard/Sidebar.tsx

'use client';

import Link from 'next/link';
import Image from 'next/image';
import { usePathname } from 'next/navigation';
import { 
  Home, Car, Users, UserSquare, DollarSign, Package, MessageSquare, Bot, BarChart3, Settings, X, LogOut, RefreshCw 
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/app/AuthContext';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

const Sidebar = ({ isOpen, onClose }: SidebarProps) => {
  const pathname = usePathname();
  const { user, logout } = useAuth();

  const allNavItems = [
    { name: 'Dashboard', href: '/dashboard', icon: Home, roles: ['Boss', 'Manager'] },
    { name: 'Projects', href: '/dashboard/projects', icon: Car, roles: ['Boss', 'Manager'] },
    { name: 'Technicians', href: '/dashboard/technicians', icon: Users, roles: ['Boss', 'Manager'] },
    { name: 'Clients', href: '/dashboard/clients', icon: UserSquare, roles: ['Boss', 'Manager'] },
    { name: 'Finance', href: '/dashboard/financials', icon: DollarSign, roles: ['Boss'] },
    { name: 'Inventory', href: '/dashboard/inventory', icon: Package, roles: ['Boss', 'Manager'] },
    { name: 'Communication Hub', href: '/dashboard/communication-hub', icon: MessageSquare, roles: ['Boss', 'Manager'] },
    { name: 'AI Pit Chief', href: '/dashboard/ai-pit-chief', icon: Bot, roles: ['Boss'] },
    { name: 'Reports', href: '/dashboard/reports', icon: BarChart3, roles: ['Boss'] },
    { name: 'Settings', href: '/dashboard/settings', icon: Settings, roles: ['Boss'] },
  ];

  const navItems = allNavItems.filter(item => user?.role && item.roles.includes(user.role));

  const handleResetData = () => {
    if (confirm('Are you sure you want to reset all project data? This will clear any changes you have made and restore the original mock data.')) {
        localStorage.removeItem('AAM_PROJECTS');
        window.location.reload();
    }
  };

  const SidebarContent = () => (
    <div className="w-64 bg-gray-900 text-gray-300 flex flex-col h-full border-r border-white/10">
      <div className="h-20 flex items-center justify-between px-4 border-b border-white/10">
        <Link href="/dashboard" className="transition-opacity hover:opacity-80">
          <Image
            src="http://allamericanmuscle.co.za/wp-content/uploads/2025/01/AAM-Logo-3-Transparent.png"
            alt="All American Muscle Logo"
            width={150}
            height={50}
            priority
          />
        </Link>
        <button onClick={onClose} className="md:hidden text-gray-400 hover:text-white" aria-label="Close sidebar">
            <X className="h-6 w-6" />
        </button>
      </div>
      <nav className="flex-grow px-4 py-6">
        <ul>
          {navItems.map(item => (
            <li key={item.name}>
              <Link
                href={item.href}
                onClick={onClose}
                className={`flex items-center px-4 py-3 my-1 rounded-md transition-colors ${
                  (pathname === item.href ||
                  (pathname.startsWith(item.href) && item.href !== '/dashboard'))
                    ? 'bg-red-600 text-white'
                    : 'hover:bg-gray-800 hover:text-white'
                }`}
              >
                <item.icon className="h-5 w-5 mr-3" />
                <span className="font-medium">{item.name}</span>
              </Link>
            </li>
          ))}
        </ul>
      </nav>
      <div className="p-4 border-t border-white/10">
        <button
            onClick={handleResetData}
            className="flex w-full items-center px-4 py-3 my-1 rounded-md text-gray-400 hover:bg-yellow-900/50 hover:text-yellow-300 transition-colors"
        >
            <RefreshCw className="h-5 w-5 mr-3" />
            <span className="font-medium">Reset Mock Data</span>
        </button>

        <button
            onClick={logout}
            className="flex w-full items-center px-4 py-3 my-1 rounded-md text-gray-400 hover:bg-red-900/50 hover:text-red-300 transition-colors"
        >
            <LogOut className="h-5 w-5 mr-3" />
            <span className="font-medium">Logout</span>
        </button>
      </div>
    </div>
  );

  return (
    <>
      <div className="hidden md:flex md:flex-shrink-0">
        <SidebarContent />
      </div>
      <AnimatePresence>
        {isOpen && (
            <>
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.3 }} className="fixed inset-0 z-30 bg-black/50 md:hidden" onClick={onClose} />
                <motion.div initial={{ x: '-100%' }} animate={{ x: 0 }} exit={{ x: '-100%' }} transition={{ type: 'spring', stiffness: 300, damping: 30 }} className="fixed top-0 left-0 h-full z-40 md:hidden">
                    <SidebarContent />
                </motion.div>
            </>
        )}
      </AnimatePresence>
    </>
  );
};

export default Sidebar;

==================== components\dashboard\StatCard.tsx ====================

// [path]: components/dashboard/StatCard.tsx

import React from 'react';

interface StatCardProps {
  icon: React.ElementType;
  title: string;
  value: number | string;
  colorClass: string;
  // --- NEW: Add an optional onClick handler ---
  onClick?: () => void;
}

const StatCard = ({ icon: Icon, title, value, colorClass, onClick }: StatCardProps) => (
  // --- NEW: Added onClick, cursor-pointer, and transition styles ---
  <div 
    onClick={onClick}
    className={`bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft flex items-center transition-all duration-300 ${onClick ? 'cursor-pointer hover:border-red-500/50 hover:bg-gray-700/50' : ''}`}
    role={onClick ? 'button' : undefined}
    tabIndex={onClick ? 0 : undefined}
    onKeyDown={onClick ? (e) => (e.key === 'Enter' || e.key === ' ') && onClick() : undefined}
  >
    <div className={`w-12 h-12 rounded-full flex items-center justify-center mr-4 ${colorClass}`}>
      <Icon className="h-6 w-6 text-white" />
    </div>
    <div>
      <p className="text-sm text-gray-400">{title}</p>
      <p className="text-2xl font-bold text-white">{value}</p>
    </div>
  </div>
);

export default StatCard;

==================== components\dashboard\StatDetailModal.tsx ====================

// [path]: components/dashboard/StatDetailModal.tsx

'use client';

import { Project } from '@/lib/types';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import Link from 'next/link';

interface StatDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  projects: Project[];
}

const StatDetailModal = ({ isOpen, onClose, title, projects }: StatDetailModalProps) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className="relative bg-gray-800 border border-white/10 w-full max-w-3xl rounded-lg shadow-xl overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-4 bg-gray-900/50 flex justify-between items-center border-b border-white/10">
              <h2 className="text-xl font-bold text-white">{title}</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white">
                <X className="h-6 w-6" />
              </button>
            </div>
            
            <div className="p-2 max-h-[60vh] overflow-y-auto">
              {projects.length > 0 ? (
                <table className="min-w-full divide-y divide-gray-700">
                  <thead className="bg-gray-800">
                    <tr>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-400 uppercase">Vehicle</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-400 uppercase">Customer</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-400 uppercase">Details</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-400 uppercase"></th>
                    </tr>
                  </thead>
                  <tbody className="bg-gray-800 divide-y divide-gray-700">
                    {projects.map(p => (
                      <tr key={p.id} className="hover:bg-gray-700/50">
                        <td className="px-4 py-3 text-sm font-medium text-white">{`${p.car.year} ${p.car.make} ${p.car.model}`}</td>
                        <td className="px-4 py-3 text-sm text-gray-300">{p.customerName}</td>
                        <td className="px-4 py-3 text-sm text-yellow-300">{p.holdReason || p.promisedDate || p.status}</td>
                        <td className="px-4 py-3 text-right">
                          <Link href={`/dashboard/projects/${p.id}`} onClick={onClose} className="text-red-500 hover:underline text-sm font-semibold">
                            View
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <p className="text-gray-500 text-center py-10">No projects match this criteria.</p>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default StatDetailModal;

==================== components\dashboard\TechnicianDetailModal.tsx ====================

// [path]: components/dashboard/TechnicianDetailModal.tsx

'use client';

import { Project, SubTask } from '@/lib/types'; // CORRECTED: Removed unused 'Technician' import
import { motion, AnimatePresence } from 'framer-motion';
import { X, Clock, CheckSquare, Circle, Construction } from 'lucide-react';
import { useMemo } from 'react';
import Link from 'next/link';
import { startOfWeek, startOfMonth, parseISO } from 'date-fns';

type TimeRange = 'This Week' | 'This Month' | 'All Time';

interface TechnicianDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  technician: { id: string; name: string } | null;
  projects: Project[];
  timeRange: TimeRange;
}

const getStatusIndicator = (status: SubTask['status']) => {
    switch(status) {
        case 'Awaiting Approval': return { Icon: Clock, color: 'text-yellow-400' };
        case 'In Progress': return { Icon: Construction, color: 'text-blue-400' };
        default: return { Icon: Circle, color: 'text-gray-500' };
    }
};

const TechnicianDetailModal = ({ isOpen, onClose, technician, projects, timeRange }: TechnicianDetailModalProps) => {
  const taskDetails = useMemo(() => {
    if (!technician) return { completed: [], current: [] };

    const now = new Date();
    let startDate: Date;
    if (timeRange === 'This Week') startDate = startOfWeek(now, { weekStartsOn: 1 });
    else if (timeRange === 'This Month') startDate = startOfMonth(now);
    else startDate = new Date(0);

    const completed: (SubTask & { projectName: string, projectId: string })[] = [];
    const current: (SubTask & { projectName: string, projectId: string })[] = [];

    projects.forEach(project => {
      project.categories.forEach(category => {
        category.subTasks.forEach(task => {
          if (task.assignedTo === technician.id) {
            const taskWithContext = { ...task, projectName: `${project.car.year} ${project.car.make} ${project.car.model}`, projectId: project.id };
            if (task.status === 'Completed' && task.completedAt && parseISO(task.completedAt) >= startDate) {
              completed.push(taskWithContext);
            } else if (task.status !== 'Completed') {
              current.push(taskWithContext);
            }
          }
        });
      });
    });
    
    return { completed, current };
  }, [technician, projects, timeRange]);

  if (!technician) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9, y: 20 }} animate={{ scale: 1, y: 0 }} exit={{ scale: 0.9, y: 20 }} className="relative bg-gray-800 border border-white/10 w-full max-w-4xl rounded-lg shadow-xl" onClick={(e) => e.stopPropagation()}>
            <div className="p-4 bg-gray-900/50 flex justify-between items-center border-b border-white/10">
              <h2 className="text-xl font-bold text-white">Activity Deep Dive: {technician.name}</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white"><X className="h-6 w-6" /></button>
            </div>
            
            <div className="p-6 max-h-[70vh] overflow-y-auto grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="font-semibold text-lg text-white mb-3 flex items-center"><CheckSquare className="mr-3 h-5 w-5 text-green-400"/>Completed ({timeRange})</h3>
                <div className="space-y-2">
                  {taskDetails.completed.length > 0 ? taskDetails.completed.map(task => (
                    <div key={task.id} className="bg-gray-900/50 p-3 rounded-md">
                      <div className="flex justify-between items-center">
                        <p className="text-sm font-medium text-gray-300">{task.name}</p>
                        <p className="text-sm font-bold text-white">{task.actualHours?.toFixed(2) || '0'} hrs</p>
                      </div>
                      <Link href={`/dashboard/projects/${task.projectId}`} className="text-xs text-red-500 hover:underline">{task.projectName}</Link>
                    </div>
                  )) : <p className="text-sm text-gray-500 italic">No tasks completed in this period.</p>}
                </div>
              </div>

              <div>
                <h3 className="font-semibold text-lg text-white mb-3 flex items-center"><Clock className="mr-3 h-5 w-5 text-blue-400"/>Current Workload</h3>
                <div className="space-y-2">
                  {taskDetails.current.length > 0 ? taskDetails.current.map(task => {
                      const { Icon, color } = getStatusIndicator(task.status);
                      return (
                        <div key={task.id} className="bg-gray-900/50 p-3 rounded-md">
                            <p className="text-sm font-medium text-gray-300">{task.name}</p>
                            <div className="flex justify-between items-center mt-1">
                                <Link href={`/dashboard/projects/${task.projectId}`} className="text-xs text-red-500 hover:underline">{task.projectName}</Link>
                                <span className={`inline-flex items-center text-xs font-semibold ${color}`}>
                                    <Icon className="h-3 w-3 mr-1.5" />
                                    {task.status}
                                </span>
                            </div>
                        </div>
                      );
                  }) : <p className="text-sm text-gray-500 italic">No active tasks assigned.</p>}
                </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default TechnicianDetailModal;

==================== components\dashboard\TechnicianLiveFeed.tsx ====================

// [path]: components/dashboard/TechnicianLiveFeed.tsx

'use client';

import { useMemo } from 'react';
import { Project, Technician, BreakType } from '@/lib/types';
import { mockTechnicians, mockUsers } from '@/lib/mock-data';
import * as dataService from '@/lib/data-service';

interface TechnicianLiveFeedProps {
  projects: Project[];
}

type Status = 'ClockedIn' | 'ClockedOut' | 'OnBreak';

interface FeedItem {
  technician: Technician;
  status: Status;
  breakType: BreakType | null;
  // This is the corrected line:
  activeTask: {
    name: string;
    projectName: string;
  } | undefined;
}

const TechnicianLiveFeed = ({ projects }: TechnicianLiveFeedProps) => {
  const feedItems = useMemo(() => {
    const activeProjects = projects.filter(p => p.status === 'Active');

    return mockTechnicians.map(tech => {
      const user = mockUsers.find(u => u.id === tech.userId);
      if (!user) return null;

      const { status, breakType } = dataService.getUserTimeTrackingStatus(user.id);
      
      let activeTask: { name: string; projectName: string; } | undefined;
      if (status === 'ClockedIn') {
        for (const project of activeProjects) {
          for (const category of project.categories) {
            const foundTask = category.subTasks.find(
              task => task.assignedTo === tech.id && task.status === 'In Progress'
            );
            if (foundTask) {
              activeTask = {
                name: foundTask.name,
                projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
              };
              break;
            }
          }
          if (activeTask) break;
        }
      }

      return { technician: tech, status, breakType, activeTask };
    }).filter((item): item is FeedItem => item !== null);
  }, [projects]);

  const getStatusIndicator = (status: Status) => {
    switch (status) {
      case 'ClockedIn':
        return <div className="w-3 h-3 rounded-full bg-green-500 animate-pulse" title="Clocked In"></div>;
      case 'OnBreak':
        return <div className="w-3 h-3 rounded-full bg-yellow-500" title="On Break"></div>;
      default:
        return <div className="w-3 h-3 rounded-full bg-gray-600" title="Clocked Out"></div>;
    }
  };

  return (
    <div className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft">
      <h3 className="text-xl font-bold text-white mb-4">Technician Live Feed</h3>
      <ul className="space-y-4">
        {feedItems.map(item => (
          <li key={item.technician.id} className="flex items-center">
            <div className="flex-shrink-0 mr-3">
              {getStatusIndicator(item.status)}
            </div>
            <div className="flex-grow">
              <p className="font-semibold text-white">{item.technician.name}</p>
              {item.status === 'ClockedIn' && item.activeTask && (
                <p className="text-sm text-gray-400">
                  <span className="text-blue-400">{item.activeTask.name}</span> on {item.activeTask.projectName}
                </p>
              )}
              {item.status === 'OnBreak' && (
                <p className="text-sm text-yellow-400 italic">On {item.breakType} Break</p>
              )}
               {item.status === 'ClockedOut' && (
                <p className="text-sm text-gray-500 italic">Clocked Out</p>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TechnicianLiveFeed;

==================== components\dashboard\TechnicianPerformanceCard.tsx ====================

// [path]: components/dashboard/TechnicianPerformanceCard.tsx

'use client';

import { Clock, CheckSquare, Briefcase, Percent } from 'lucide-react';

interface PerformanceStats {
  technicianId: string;
  name: string;
  tasksCompleted: number;
  taskHours: number;
  shiftHours: number; // <-- ADDED
  utilization: number; // <-- ADDED
}

interface TechnicianPerformanceCardProps {
  technicianStats: PerformanceStats;
  onClick: () => void;
}

const TechnicianPerformanceCard = ({ technicianStats, onClick }: TechnicianPerformanceCardProps) => {
  return (
    <div 
      onClick={onClick}
      className="bg-gray-800 border border-white/10 p-6 rounded-lg shadow-soft transition-all duration-300 cursor-pointer hover:border-red-500/50 hover:bg-gray-700/50 hover:-translate-y-1"
    >
      <h3 className="font-bold text-xl text-white mb-4">{technicianStats.name}</h3>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
            <span className="flex items-center text-sm text-gray-400"><Briefcase className="h-4 w-4 mr-2 text-gray-500"/>Shift Hours</span>
            <span className="font-bold text-white">{technicianStats.shiftHours.toFixed(2)}</span>
        </div>
        <div className="flex items-center justify-between">
            <span className="flex items-center text-sm text-gray-400"><Clock className="h-4 w-4 mr-2 text-blue-400"/>Task Hours</span>
            <span className="font-bold text-white">{technicianStats.taskHours.toFixed(2)}</span>
        </div>
        <div className="flex items-center justify-between">
            <span className="flex items-center text-sm text-gray-400"><CheckSquare className="h-4 w-4 mr-2 text-green-400"/>Tasks Completed</span>
            <span className="font-bold text-white">{technicianStats.tasksCompleted}</span>
        </div>
         <div className="flex items-center justify-between pt-3 border-t border-gray-700">
            <span className="flex items-center text-sm font-semibold text-gray-200"><Percent className="h-4 w-4 mr-2 text-yellow-400"/>Utilization</span>
            <span className="font-bold text-lg text-yellow-400">{technicianStats.utilization.toFixed(0)}%</span>
        </div>
      </div>
    </div>
  );
};

export default TechnicianPerformanceCard;

==================== components\dashboard\UniversalSearch.tsx ====================

// [path]: components/dashboard/UniversalSearch.tsx

'use client';

import { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Car, UserSquare, Package, X } from 'lucide-react';
import { getProjects, getInventoryItems } from '@/lib/data-service';
import Link from 'next/link';

interface Client {
  name: string;
  slug: string;
}

const UniversalSearch = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  
  const allProjects = useMemo(() => getProjects(), []);
  const allInventory = useMemo(() => getInventoryItems(), []);
  
  const allClients = useMemo(() => {
    const clientsMap = new Map<string, Client>();
    allProjects.forEach(p => {
      if (!clientsMap.has(p.customerName)) {
        clientsMap.set(p.customerName, {
          name: p.customerName,
          slug: p.customerName.toLowerCase().replace(/\s+/g, '-'),
        });
      }
    });
    return Array.from(clientsMap.values());
  }, [allProjects]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        setIsOpen(!isOpen);
      }
      if (event.key === 'Escape') {
        setIsOpen(false);
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen]);

  const searchResults = useMemo(() => {
    if (!query) return null;

    const lowerCaseQuery = query.toLowerCase();

    const projects = allProjects.filter(p =>
      `${p.car.year} ${p.car.make} ${p.car.model}`.toLowerCase().includes(lowerCaseQuery) ||
      p.customerName.toLowerCase().includes(lowerCaseQuery)
    );

    const clients = allClients.filter(c =>
      c.name.toLowerCase().includes(lowerCaseQuery)
    );

    const inventory = allInventory.filter(i =>
      i.name.toLowerCase().includes(lowerCaseQuery) ||
      i.sku.toLowerCase().includes(lowerCaseQuery)
    );

    return { projects, clients, inventory };
  }, [query, allProjects, allClients, allInventory]);

  return (
    <>
      <div className="relative w-full max-w-lg">
        <button
          onClick={() => setIsOpen(true)}
          className="w-full text-left bg-gray-800 border border-white/10 rounded-md py-2 px-4 text-gray-400 flex items-center justify-between"
        >
          <div className="flex items-center">
            <Search className="h-4 w-4 mr-3" />
            <span>Find anything...</span>
          </div>
          <kbd className="text-xs font-sans border border-gray-600 rounded px-1.5 py-0.5">⌘K</kbd>
        </button>
      </div>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-start justify-center pt-20"
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              initial={{ scale: 0.95, y: -20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.95, y: -20 }}
              className="relative bg-gray-800 border border-white/10 w-full max-w-2xl rounded-lg shadow-xl"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="relative">
                <input
                  type="text"
                  value={query}
                  onChange={e => setQuery(e.target.value)}
                  placeholder="Find project, client, or part..."
                  autoFocus
                  className="w-full bg-transparent p-4 pl-12 text-white placeholder-gray-500 focus:outline-none"
                />
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                <button onClick={() => setIsOpen(false)} className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 hover:text-white">
                    <X className="h-5 w-5"/>
                </button>
              </div>

              {searchResults && (
                <div className="border-t border-gray-700 max-h-96 overflow-y-auto">
                  {searchResults.projects.length === 0 && searchResults.clients.length === 0 && searchResults.inventory.length === 0 ? (
                    <p className="p-4 text-center text-gray-500">No results found.</p>
                  ) : (
                    <>
                      {searchResults.projects.length > 0 && (
                        <div>
                          <h3 className="px-4 py-2 text-xs font-semibold text-gray-400 uppercase">Projects</h3>
                          <ul>{searchResults.projects.map(p => (
                            <li key={p.id}><Link href={`/dashboard/projects/${p.id}`} onClick={() => setIsOpen(false)} className="flex items-center p-4 hover:bg-red-900/50"><Car className="h-4 w-4 mr-3 text-red-400" /><span>{p.car.year} {p.car.make} {p.car.model}</span></Link></li>
                          ))}</ul>
                        </div>
                      )}
                      {searchResults.clients.length > 0 && (
                        <div>
                          <h3 className="px-4 py-2 text-xs font-semibold text-gray-400 uppercase">Clients</h3>
                          <ul>{searchResults.clients.map(c => (
                            <li key={c.slug}><Link href={`/dashboard/clients/${c.slug}`} onClick={() => setIsOpen(false)} className="flex items-center p-4 hover:bg-red-900/50"><UserSquare className="h-4 w-4 mr-3 text-blue-400" /><span>{c.name}</span></Link></li>
                          ))}</ul>
                        </div>
                      )}
                      {searchResults.inventory.length > 0 && (
                        <div>
                          <h3 className="px-4 py-2 text-xs font-semibold text-gray-400 uppercase">Inventory</h3>
                          <ul>{searchResults.inventory.map(i => (
                            <li key={i.id}><Link href="/dashboard/inventory" onClick={() => setIsOpen(false)} className="flex items-center p-4 hover:bg-red-900/50"><Package className="h-4 w-4 mr-3 text-yellow-400" /><span>{i.name}</span></Link></li>
                          ))}</ul>
                        </div>
                      )}
                    </>
                  )}
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default UniversalSearch;

==================== components\dashboard\UnscheduledTasksPanel.tsx ====================

// [path]: components/dashboard/UnscheduledTasksPanel.tsx

'use client';

import { UnscheduledTask } from "@/lib/types";
// Corrected import path to be more robust
import DraggableTaskCard from "@/components/dashboard/DraggableTaskCard";

interface UnscheduledTasksPanelProps {
    tasks: UnscheduledTask[];
    onTaskSelect: (task: UnscheduledTask) => void;
}

const UnscheduledTasksPanel = ({ tasks, onTaskSelect }: UnscheduledTasksPanelProps) => {
    return (
        <div className="bg-gray-800 border border-white/10 rounded-lg h-full flex flex-col">
            <div className="p-4 border-b border-white/10">
                <h3 className="text-xl font-bold text-white">Task Backlog</h3>
                <p className="text-xs text-gray-400">Drag tasks onto the schedule</p>
            </div>
            <div className="flex-grow overflow-y-auto p-2">
                {tasks.length > 0 ? (
                    <ul className="space-y-2">
                        {tasks.map(task => (
                            <DraggableTaskCard 
                                key={task.id} 
                                task={task} 
                                onSelect={() => onTaskSelect(task)}
                            />
                        ))}
                    </ul>
                ) : (
                    <div className="flex items-center justify-center h-full">
                        <p className="text-sm text-gray-500 italic">No unscheduled tasks.</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default UnscheduledTasksPanel;

==================== components\dashboard\WorkshopKanban.tsx ====================

// [path]: components/dashboard/WorkshopKanban.tsx

'use client';

import { useMemo } from 'react';
import { Project, SubTask } from '@/lib/types';
import { mockTechnicians } from '@/lib/mock-data';
import Link from 'next/link';
import { CheckCircle2, Circle, Clock, Construction } from 'lucide-react';

interface KanbanTask extends SubTask {
  projectName: string;
  projectId: string;
  categoryName: string;
}

interface WorkshopKanbanProps {
  allProjects: Project[];
}

const WorkshopKanban = ({ allProjects }: WorkshopKanbanProps) => {

  const columns = useMemo(() => {
    const activeProjects = allProjects.filter(p => p.status === 'Active');
    
    const allTasks: KanbanTask[] = activeProjects.flatMap(project =>
      project.categories.flatMap(category =>
        category.subTasks.map(task => ({
          ...task,
          projectName: `${project.car.year} ${project.car.make} ${project.car.model}`,
          projectId: project.id,
          categoryName: category.name,
        }))
      )
    );

    const tasksByTechnician = allTasks.reduce((acc, task) => {
      const techId = task.assignedTo || 'unassigned';
      if (!acc[techId]) {
        acc[techId] = [];
      }
      acc[techId].push(task);
      return acc;
    }, {} as Record<string, KanbanTask[]>);

    const techColumns = mockTechnicians.map(tech => ({
      id: tech.id,
      title: tech.name,
      tasks: tasksByTechnician[tech.id] || []
    }));
    
    return [
        { id: 'unassigned', title: 'Unassigned', tasks: tasksByTechnician['unassigned'] || [] },
        ...techColumns
    ];

  }, [allProjects]);

  // CORRECTED: This function now returns the correct icon based on the task's 'status'.
  const getStatusIndicator = (status: SubTask['status']) => {
    switch(status) {
        case 'Completed': return { 
            Icon: CheckCircle2, 
            text: 'Completed', 
            color: 'text-green-500' 
        };
        case 'Awaiting Approval': return { 
            Icon: Clock, 
            text: 'Awaiting Approval', 
            color: 'text-yellow-500' 
        };
        case 'In Progress': return { 
            Icon: Construction, 
            text: 'In Progress', 
            color: 'text-blue-500' 
        };
        default: return { 
            Icon: Circle, 
            text: 'Pending', 
            color: 'text-gray-600' 
        };
    }
  };

  return (
    <div className="flex space-x-4 overflow-x-auto pb-4">
      {columns.map(column => (
        <div key={column.id} className="w-80 flex-shrink-0 bg-gray-900/50 rounded-lg">
          <div className="p-4 border-b border-white/10">
            <h3 className="font-bold text-white">{column.title} <span className="text-sm font-normal text-gray-500">{column.tasks.length}</span></h3>
          </div>
          <div className="p-2 space-y-2 h-[calc(100vh-250px)] overflow-y-auto">
            {column.tasks.length > 0 ? column.tasks.map(task => {
              const { Icon, text, color } = getStatusIndicator(task.status);
              return (
                <div key={task.id} className="bg-gray-800 p-3 rounded-md border border-gray-700 shadow-soft">
                  <p className="text-sm font-medium text-gray-200 mb-2">{task.name}</p>
                  <div className="text-xs text-gray-400">
                    <p>{task.categoryName}</p>
                    <Link href={`/dashboard/projects/${task.projectId}`} className="text-red-500 hover:underline">
                      {task.projectName}
                    </Link>
                  </div>
                  <div className="mt-3 pt-2 border-t border-gray-700 flex items-center">
                    <Icon className={`h-4 w-4 mr-2 ${color}`} />
                    <span className={`text-xs font-semibold ${color}`}>
                      {text}
                    </span>
                  </div>
                </div>
              );
            }) : (
                <div className="flex items-center justify-center h-full p-4">
                    <p className="text-sm text-gray-600">No tasks assigned.</p>
                </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );
};

export default WorkshopKanban;

==================== components\ui\Button.tsx ====================

'use client';

import React, { ReactNode } from 'react';
import { motion } from 'framer-motion';

interface ButtonProps {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
  type?: 'submit' | 'button' | 'reset'; // Add this line
}

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  href, 
  onClick, 
  className = '',
  disabled = false,
  type = 'button' // Add this line
}: ButtonProps) => {
  const baseClasses = 'inline-flex items-center justify-center font-semibold rounded-full transition-all duration-300 focus:outline-none focus-ring';
  
  const variants = {
    primary: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 shadow-lg hover:shadow-xl shadow-red-900/40',
    secondary: 'bg-gray-700 text-white hover:bg-gray-600 focus:ring-gray-500 shadow-lg hover:shadow-xl',
    outline: 'border-2 border-red-500 text-red-500 hover:bg-red-500 hover:text-white focus:ring-red-500'
  };
  
  const sizes = {
    sm: 'px-4 py-2 text-sm',
    md: 'px-6 py-3 text-base',
    lg: 'px-8 py-4 text-lg'
  };
  
  const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`;
  
  if (href) {
    return (
      <motion.a
        href={href}
        whileHover={disabled ? {} : { scale: 1.05, y: -2 }}
        whileTap={disabled ? {} : { scale: 0.95 }}
        transition={{ type: 'spring', stiffness: 400, damping: 17 }}
        className={classes}
      >
        {children}
      </motion.a>
    );
  }

  return (
    <motion.button
      type={type} // Add this line
      onClick={disabled ? undefined : onClick}
      whileHover={disabled ? {} : { scale: 1.05, y: -2 }}
      whileTap={disabled ? {} : { scale: 0.95 }}
      transition={{ type: 'spring', stiffness: 400, damping: 17 }}
      className={classes}
      disabled={disabled}
    >
      {children}
    </motion.button>
  );
};

export default Button;

==================== components\ui\ConfirmationModal.tsx ====================

'use client';

import { motion, AnimatePresence } from 'framer-motion';
import Button from './Button';
import { AlertTriangle } from 'lucide-react';

interface ConfirmationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  message: string;
}

const ConfirmationModal = ({ isOpen, onClose, onConfirm, title, message }: ConfirmationModalProps) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className="relative bg-gray-800 border border-white/10 w-full max-w-md rounded-lg shadow-xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6 flex items-start">
                <div className="flex-shrink-0 flex h-12 w-12 items-center justify-center rounded-full bg-red-900/50 sm:mx-0 sm:h-10 sm:w-10">
                    <AlertTriangle className="h-6 w-6 text-red-400" aria-hidden="true" />
                </div>
                <div className="ml-4 text-left">
                    <h3 className="text-lg font-semibold leading-6 text-white">{title}</h3>
                    <p className="mt-2 text-sm text-gray-400">{message}</p>
                </div>
            </div>

            <div className="mt-2 p-4 bg-gray-900/50 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 rounded-b-lg">
              <Button onClick={onClose} variant="secondary" size="sm" className="mt-3 w-full sm:w-auto sm:mt-0">
                Cancel
              </Button>
              <Button onClick={onConfirm} variant="primary" size="sm" className="w-full sm:w-auto">
                Confirm
              </Button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ConfirmationModal;

==================== components\ui\Input.tsx ====================

'use client';

import React from 'react';

// Forwarding ref allows this component to be used in forms that need direct access to the input element
const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, ...props }, ref) => {
  return (
    <input
      ref={ref}
      className={`w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-shadow ${className}`}
      {...props}
    />
  );
});

Input.displayName = 'Input';

export default Input;

==================== components\ui\ProgressBar.tsx ====================

interface ProgressBarProps {
  progress: number;
  className?: string;
}

const ProgressBar = ({ progress, className = '' }: ProgressBarProps) => {
  const safeProgress = Math.max(0, Math.min(100, progress));

  return (
    <div className={`w-full bg-gray-700 rounded-full h-2.5 ${className}`}>
      <div
        className="bg-red-600 h-2.5 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${safeProgress}%` }}
      ></div>
    </div>
  );
};

export default ProgressBar;

==================== components\ui\ToggleSwitch.tsx ====================

'use client';

import { motion } from 'framer-motion';

interface ToggleSwitchProps {
  enabled: boolean;
  setEnabled: (enabled: boolean) => void;
}

const ToggleSwitch = ({ enabled, setEnabled }: ToggleSwitchProps) => {
  return (
    <div
      onClick={() => setEnabled(!enabled)}
      className={`flex items-center w-12 h-6 rounded-full cursor-pointer transition-colors ${
        enabled ? 'bg-red-600 justify-end' : 'bg-gray-300 justify-start'
      }`}
    >
      <motion.div
        layout
        transition={{ type: 'spring', stiffness: 700, damping: 30 }}
        className="w-5 h-5 bg-white rounded-full shadow-md"
      />
    </div>
  );
};

export default ToggleSwitch;

==================== components\ui\ViewSwitcher.tsx ====================

// [path]: components/ui/ViewSwitcher.tsx

'use client';

import { LayoutGrid, List } from 'lucide-react';

type View = 'kanban' | 'list';

interface ViewSwitcherProps {
  currentView: View;
  onViewChange: (view: View) => void;
}

const ViewSwitcher = ({ currentView, onViewChange }: ViewSwitcherProps) => {
  const options: { id: View; icon: React.ElementType }[] = [
    { id: 'kanban', icon: LayoutGrid },
    { id: 'list', icon: List },
  ];

  return (
    <div className="flex items-center space-x-1 bg-gray-800 border border-white/10 rounded-lg p-1">
      {options.map(option => (
        <button
          key={option.id}
          onClick={() => onViewChange(option.id)}
          className={`flex items-center justify-center px-3 py-1 text-sm font-medium rounded-md transition-colors ${
            currentView === option.id
              ? 'bg-red-600 text-white'
              : 'text-gray-400 hover:text-white hover:bg-gray-700'
          }`}
          aria-label={`Switch to ${option.id} view`}
        >
          <option.icon className="h-4 w-4" />
        </button>
      ))}
    </div>
  );
};

export default ViewSwitcher;

==================== lib\data-service.ts ====================

// [path]: lib/data-service.ts

import { mockProjects } from './mock-data';
import { mockShifts } from './mock-shifts';
import { mockInventory } from './mock-inventory';
import { Project, SubTask, Category, Invoice, InternalTaskNote, Shift, BreakType, InventoryItem, Part } from './types'; // <-- ADD Part
import { fullRestorationTemplate, majorServiceTemplate } from './project-templates';

// ... (all existing code from the top of the file remains the same) ...

const INVENTORY_STORAGE_KEY = 'AAM_INVENTORY';

const getProjectsFromStorage = (): Project[] => {
  if (typeof window === 'undefined') return mockProjects;
  try {
    const storedProjects = localStorage.getItem('AAM_PROJECTS');
    if (!storedProjects) {
      localStorage.setItem('AAM_PROJECTS', JSON.stringify(mockProjects));
      return mockProjects;
    }
    return JSON.parse(storedProjects);
  } catch (error) {
    console.error("Could not access localStorage for projects.", error);
    return mockProjects;
  }
};

const saveProjectsToStorage = (projects: Project[]) => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem('AAM_PROJECTS', JSON.stringify(projects));
    } catch (error) {
      console.error("Could not save projects to localStorage.", error);
    }
  }
};

export const getTemplates = (): Category[][] => {
  if (typeof window === 'undefined') return [fullRestorationTemplate, majorServiceTemplate];
  try {
    const storedTemplates = localStorage.getItem('AAM_TEMPLATES');
    if (!storedTemplates) {
      const defaultTemplates = [fullRestorationTemplate, majorServiceTemplate];
      defaultTemplates[0][0].name = "Full Restoration - Body & Paint";
      defaultTemplates[1][0].name = "Major Service - Engine Service";
      localStorage.setItem('AAM_TEMPLATES', JSON.stringify(defaultTemplates));
      return defaultTemplates;
    }
    return JSON.parse(storedTemplates);
  } catch (error) {
    console.error("Could not access localStorage for templates.", error);
    return [fullRestorationTemplate, majorServiceTemplate];
  }
};

export const saveTemplates = (templates: Category[][]) => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem('AAM_TEMPLATES', JSON.stringify(templates));
    } catch (error) {
      console.error("Could not save templates to localStorage.", error);
    }
  }
};

const getTimesheetsFromStorage = (): Shift[] => {
    if (typeof window === 'undefined') return [];
    try {
        const stored = localStorage.getItem('AAM_TIMESHEETS');
        if (!stored) {
            localStorage.setItem('AAM_TIMESHEETS', JSON.stringify(mockShifts));
            return mockShifts;
        }
        return JSON.parse(stored);
    } catch (error) {
        console.error("Could not access localStorage for timesheets.", error);
        return [];
    }
};

const saveTimesheetsToStorage = (shifts: Shift[]) => {
    if (typeof window !== 'undefined') {
        try {
            localStorage.setItem('AAM_TIMESHEETS', JSON.stringify(shifts));
        } catch (error) {
            console.error("Could not save timesheets to localStorage.", error);
        }
    }
};

const getInventoryFromStorage = (): InventoryItem[] => {
  if (typeof window === 'undefined') return mockInventory;
  try {
    const stored = localStorage.getItem(INVENTORY_STORAGE_KEY);
    if (!stored) {
      localStorage.setItem(INVENTORY_STORAGE_KEY, JSON.stringify(mockInventory));
      return mockInventory;
    }
    return JSON.parse(stored);
  } catch (error) {
    console.error("Could not access localStorage for inventory.", error);
    return mockInventory;
  }
};

// ... (getUserTimeTrackingStatus and clock in/out/break functions remain the same) ...

export const getUserTimeTrackingStatus = (userId: string) => {
    const shifts = getTimesheetsFromStorage();
    const lastShift = shifts
        .filter(s => s.userId === userId)
        .sort((a, b) => new Date(b.clockInTime).getTime() - new Date(a.clockInTime).getTime())[0];

    if (!lastShift || lastShift.clockOutTime) {
        return { status: 'ClockedOut' as const, shiftId: null, breakType: null };
    }

    const lastBreak = lastShift.breaks[lastShift.breaks.length - 1];
    if (lastBreak && !lastBreak.endTime) {
        return { status: 'OnBreak' as const, shiftId: lastShift.id, breakType: lastBreak.type };
    }
    
    return { status: 'ClockedIn' as const, shiftId: lastShift.id, breakType: null };
};

export const clockIn = (userId: string): Shift => {
    const shifts = getTimesheetsFromStorage();
    const newShift: Shift = {
        id: `shift-${Date.now()}`,
        userId,
        clockInTime: new Date().toISOString(),
        breaks: [],
    };
    const newShifts = [...shifts, newShift];
    saveTimesheetsToStorage(newShifts);
    return newShift;
};

export const clockOut = (shiftId: string): Shift | undefined => {
    const shifts = getTimesheetsFromStorage();
    let updatedShift: Shift | undefined;
    const newShifts = shifts.map(s => {
        if (s.id === shiftId) {
            updatedShift = { ...s, clockOutTime: new Date().toISOString() };
            return updatedShift;
        }
        return s;
    });
    saveTimesheetsToStorage(newShifts);
    return updatedShift;
};

export const startBreak = (shiftId: string, type: BreakType): Shift | undefined => {
    const shifts = getTimesheetsFromStorage();
    let updatedShift: Shift | undefined;
    const newShifts = shifts.map(s => {
        if (s.id === shiftId) {
            updatedShift = { ...s, breaks: [...s.breaks, { type, startTime: new Date().toISOString() }] };
            return updatedShift;
        }
        return s;
    });
    saveTimesheetsToStorage(newShifts);
    return updatedShift;
};

export const endBreak = (shiftId: string): Shift | undefined => {
    const shifts = getTimesheetsFromStorage();
    let updatedShift: Shift | undefined;
    const newShifts = shifts.map(s => {
        if (s.id === shiftId) {
            const lastBreakIndex = s.breaks.length - 1;
            if (lastBreakIndex >= 0 && !s.breaks[lastBreakIndex].endTime) {
                const newBreaks = [...s.breaks];
                newBreaks[lastBreakIndex] = { ...newBreaks[lastBreakIndex], endTime: new Date().toISOString() };
                updatedShift = { ...s, breaks: newBreaks };
                return updatedShift;
            }
        }
        return s;
    });
    saveTimesheetsToStorage(newShifts);
    return updatedShift;
};


export const getProjects = (): Project[] => getProjectsFromStorage();
export const getShifts = (): Shift[] => getTimesheetsFromStorage();
export const getInventoryItems = (): InventoryItem[] => getInventoryFromStorage(); 

export const getProjectById = (id: string): Project | undefined => {
  const projects = getProjectsFromStorage();
  return projects.find(p => p.id === id);
};

// ... (all existing project functions like updateProject, addProject, etc. remain the same) ...

export const updateProject = (projectId: string, updatedData: Partial<Project>): Project | undefined => {
  const projects = getProjectsFromStorage();
  let updatedProject: Project | undefined;
  const newProjects = projects.map(p => {
    if (p.id === projectId) {
      updatedProject = { ...p, ...updatedData };
      return updatedProject;
    }
    return p;
  });
  saveProjectsToStorage(newProjects);
  return updatedProject;
};

export const addProject = (newProjectData: Omit<Project, 'id'>): Project => {
  const projects = getProjectsFromStorage();
  const newProject: Project = {
    ...newProjectData,
    id: `${newProjectData.car.make.toLowerCase().replace(/\s/g, '-')}-${newProjectData.car.year}-${Date.now()}`
  };
  const updatedProjects = [...projects, newProject];
  saveProjectsToStorage(updatedProjects);
  return newProject;
};

export const addInvoiceToProject = (projectId: string, invoiceData: Omit<Invoice, 'id' | 'status' | 'dueDate'>): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            const newInvoice: Invoice = { ...invoiceData, id: `inv-${Date.now()}`, status: 'Pending', dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] };
            updatedProject = { ...p, financials: { ...p.financials, totalQuoted: p.financials.totalQuoted + newInvoice.amount, invoices: [...p.financials.invoices, newInvoice] } };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

export const deleteProject = (projectId: string): void => {
  const projects = getProjectsFromStorage();
  const updatedProjects = projects.filter(p => p.id !== projectId);
  saveProjectsToStorage(updatedProjects);
};

export const logTaskTime = (projectId: string, categoryId: string, taskId: string, hoursToAdd: number): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => cat.id === categoryId ? { ...cat, subTasks: cat.subTasks.map(task => task.id === taskId ? { ...task, actualHours: (task.actualHours || 0) + hoursToAdd } : task) } : cat) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

export const updateTaskStatus = (projectId: string, categoryId: string, taskId: string, newStatus: SubTask['status']): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => cat.id === categoryId ? { ...cat, subTasks: cat.subTasks.map(task => {
                        if (task.id === taskId) {
                            const updatedTask = { ...task, status: newStatus };
                            if (newStatus === 'Completed') {
                                updatedTask.completedAt = new Date().toISOString();
                            } else {
                                delete updatedTask.completedAt;
                            }
                            return updatedTask;
                        }
                        return task;
                    }) } : cat) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

// --- ADD THE NEW addPartToTask FUNCTION BELOW ---

export const addPartToTask = (projectId: string, categoryId: string, taskId: string, partData: Omit<Part, 'id' | 'taskId' | 'status'>): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => cat.id === categoryId ? { ...cat, subTasks: cat.subTasks.map(task => {
                if (task.id === taskId) {
                    const newPart: Part = {
                        ...partData,
                        id: `part-${Date.now()}`,
                        taskId: taskId,
                        status: 'Needed',
                    };
                    const existingParts = task.parts || [];
                    return { ...task, parts: [...existingParts, newPart] };
                }
                return task;
            }) } : cat) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

// ... (all other existing functions like declineTaskApproval, etc. remain the same) ...

export const declineTaskApproval = (projectId: string, categoryId: string, taskId: string): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => cat.id === categoryId ? { ...cat, subTasks: cat.subTasks.map(task => task.id === taskId ? { ...task, status: 'Pending', requiresClientApproval: false } : task) } : cat) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

export const updateCategoryQaStatus = (projectId: string, categoryId: string, qaPassed: boolean): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => {
                    if (cat.id === categoryId && !qaPassed) {
                        return { ...cat, subTasks: cat.subTasks.map(task => ({ ...task, status: 'Pending' as const })) };
                    }
                    return cat;
                }) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

export const addNoteToTask = (projectId: string, categoryId: string, taskId: string, note: Omit<InternalTaskNote, 'id'>): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = { ...p, categories: p.categories.map(cat => cat.id === categoryId ? { ...cat, subTasks: cat.subTasks.map(task => {
                        if (task.id === taskId) {
                            const newNote: InternalTaskNote = { ...note, id: `note-${Date.now()}` };
                            return { ...task, internalNotes: [...(task.internalNotes || []), newNote] };
                        }
                        return task;
                    }) } : cat) };
            return updatedProject;
        }
        return p;
    });
    saveProjectsToStorage(newProjects);
    return updatedProject;
};

export const scheduleTask = (
    projectId: string, 
    categoryId: string, 
    taskId: string, 
    details: { startDate: string; dueDate: string; assignedTo: string }
): Project | undefined => {
    const projects = getProjectsFromStorage();
    let updatedProject: Project | undefined;
    const newProjects = projects.map(p => {
        if (p.id === projectId) {
            updatedProject = {
                ...p,
                categories: p.categories.map(cat => cat.id === categoryId ? {
                    ...cat,
                    subTasks: cat.subTasks.map(task => task.id === taskId ? {
                        ...task,
                        startDate: details.startDate,
                        dueDate: details.dueDate,
                        assignedTo: details.assignedTo,
                    } : task)
                } : cat)
            };
            return updatedProject;
        }
        return p;
    });

    saveProjectsToStorage(newProjects);
    return updatedProject;
};

==================== lib\mock-data.ts ====================

// [path]: lib/mock-data.ts

import { Project, Technician, User } from './types';
import { subDays, addDays } from 'date-fns';

const today = new Date();

export const mockUsers: User[] = [
  { id: 'user-boss', name: 'John "Boss" Doe', role: 'Boss' },
  { id: 'user-manager', name: 'Sarah Manager', role: 'Manager' },
  { id: 'user-tech-1', name: 'Mike L.', role: 'Technician' },
  { id: 'user-tech-2', name: 'Chris P.', role: 'Technician' },
  { id: 'user-tech-3', name: 'James M.', role: 'Technician' },
  { id: 'user-client-1', name: 'John Smith', role: 'Client' },
];

export const mockTechnicians: Technician[] = [
  { id: 'tech-1', name: 'Mike L.', userId: 'user-tech-1' },
  { id: 'tech-2', name: 'Chris P.', userId: 'user-tech-2' },
  { id: 'tech-3', name: 'James M.', userId: 'user-tech-3' },
];

export const mockProjects: Project[] = [
  {
    id: 'mustang-1969-smith',
    customerName: 'John Smith',
    car: { make: 'Ford', model: 'Mustang Mach 1', year: 1969, vin: '9R02R154875' },
    status: 'Active',
    createdAt: subDays(today, 45).toISOString(),
    promisedDate: addDays(today, 60).toISOString(),
    categories: [
      { 
        id: 'bp', name: 'Body & Paint', weight: 30,
        subTasks: [
          { id: 'bp1', name: 'Media Blasting', status: 'Completed', priority: 'Normal', assignedTo: 'tech-1', estimateHours: 20, actualHours: 22, completedAt: subDays(today, 4).toISOString() },
          { id: 'bp2', name: 'Rust Repair', status: 'Completed', priority: 'High', assignedTo: 'tech-1', estimateHours: 40, actualHours: 35, completedAt: subDays(today, 2).toISOString() },
          { id: 'bp3', name: 'Body Filler & Sanding', status: 'In Progress', priority: 'High', assignedTo: 'tech-2', 
            startDate: subDays(today, 1).toISOString(), dueDate: addDays(today, 8).toISOString(),
            internalNotes: [{id: 'note-1', authorId: 'user-manager', authorName: 'Sarah Manager', note: 'Ensure feathering is perfect.', createdAt: subDays(today, 1).toISOString(), type: 'Instruction'}], 
            estimateHours: 30, actualHours: 14 },
          { id: 'bp4', name: 'Primer Application', status: 'Pending', priority: 'Normal', assignedTo: 'tech-2', estimateHours: 15, 
            startDate: addDays(today, 9).toISOString(), dueDate: addDays(today, 13).toISOString() },
          { id: 'bp5', name: 'Select Final Paint Shade', status: 'Awaiting Approval', priority: 'High', requiresClientApproval: true, estimateHours: 2, priceImpact: 8500, etaImpactDays: 3 },
        ]
      },
      { 
        id: 'en', name: 'Engine & Drivetrain', weight: 40, 
        subTasks: [ 
          { id: 'en3', name: 'Engine Assembly (351W)', status: 'In Progress', priority: 'High', assignedTo: 'tech-1', estimateHours: 24, actualHours: 18, 
            startDate: subDays(today, 1).toISOString(), dueDate: addDays(today, 4).toISOString(),
            parts: [
                { id: 'part-1', taskId: 'en3', name: 'Piston Ring Set', qty: 1, status: 'Received' },
                { id: 'part-2', taskId: 'en3', name: 'High Volume Oil Pump', qty: 1, status: 'Ordered' },
            ]
          } 
        ]
      },
      {
        id: 'cs', name: 'Chassis & Suspension', weight: 30, 
        subTasks: [ { id: 'cs2', name: 'Upgrade to Coilover Suspension', status: 'Awaiting Approval', priority: 'High', assignedTo: 'tech-3', estimateHours: 12, requiresClientApproval: true, priceImpact: 22000, etaImpactDays: 5 } ]
      }
    ],
    timeline: [ { id: 't1', date: subDays(today, 4).toISOString(), update: 'Engine block returned from machine shop.', category: 'Engine & Drivetrain' } ],
    media: [], messages: [],
    financials: { totalQuoted: 75000, totalPaid: 37500, invoices: [ { id: 'inv-1', description: 'Project Deposit (50%)', amount: 37500, status: 'Paid', dueDate: subDays(today, 45).toISOString() }, { id: 'inv-2', description: 'Final Payment', amount: 37500, status: 'Pending', dueDate: addDays(today, 60).toISOString() } ] }
  },
  {
    id: 'camaro-1969-davis',
    customerName: 'Robert Davis',
    car: { make: 'Chevrolet', model: 'Camaro Z/28', year: 1969 },
    status: 'Active',
    createdAt: subDays(today, 15).toISOString(),
    promisedDate: addDays(today, 75).toISOString(),
    categories: [
      {
        id: 'cam-int', name: 'Interior Restoration', weight: 50,
        subTasks: [
            { id: 'cam-int1', name: 'Strip Interior', status: 'Completed', priority: 'Normal', assignedTo: 'tech-2', actualHours: 8, completedAt: subDays(today, 10).toISOString() },
            { id: 'cam-int2', name: 'Install Sound Deadening', status: 'Completed', priority: 'Normal', assignedTo: 'tech-3', actualHours: 16, completedAt: subDays(today, 5).toISOString() },
            { id: 'cam-int3', name: 'Dash and Wiring', status: 'Pending', priority: 'High', assignedTo: 'tech-2',
              startDate: addDays(today, 1).toISOString(), dueDate: addDays(today, 7).toISOString() },
        ]
      }
    ],
    timeline: [ { id: 't7', date: subDays(today, 15).toISOString(), update: 'New project "1969 Camaro Z/28" has been checked in.', category: 'Project Start' } ],
    media: [], messages: [],
    financials: { totalQuoted: 120000, totalPaid: 60000, invoices: [ { id: 'inv-7', description: 'Project Deposit (50%)', amount: 60000, status: 'Paid', dueDate: subDays(today, 15).toISOString() } ] }
  },
  {
    id: 'charger-1968-chen',
    customerName: 'David Chen',
    car: { make: 'Dodge', model: 'Charger R/T', year: 1968 },
    status: 'Completed',
    createdAt: subDays(today, 60).toISOString(),
    promisedDate: subDays(today, 5).toISOString(),
    categories: [ { id: 'fa', name: 'Final Assembly', weight: 100, subTasks: [ 
        { id: 'fa1', name: 'Install chrome trim', status: 'Completed', priority: 'High', assignedTo: 'tech-3', actualHours: 15, completedAt: subDays(today, 10).toISOString()}, 
        { id: 'fa2', name: 'Install vinyl top', status: 'Completed', priority: 'Normal', assignedTo: 'tech-3', actualHours: 9, completedAt: subDays(today, 8).toISOString()}, 
    ] } ],
    timeline: [{ id: 't4', date: subDays(today, 5).toISOString(), update: 'Project complete and ready for customer pickup.', category: 'Project Status' }], 
    media: [], messages: [],
    financials: { totalQuoted: 45000, totalPaid: 45000, invoices: [ { id: 'inv-5', description: 'Full Project Payment', amount: 45000, status: 'Paid', dueDate: subDays(today, 60).toISOString() } ] }
  },
];

==================== lib\mock-inventory.ts ====================

// [path]: lib/mock-inventory.ts

import { InventoryItem } from './types';

export const mockInventory: InventoryItem[] = [
  { id: 'inv-001', sku: 'FLT-OIL-01', name: 'Premium Oil Filter', stockQty: 25, reorderPoint: 10, supplier: 'Auto Parts Pro', unitCost: 150 },
  { id: 'inv-002', sku: 'BRK-PAD-45', name: 'Ceramic Brake Pads (Set)', stockQty: 8, reorderPoint: 10, supplier: 'Brake Corp', unitCost: 800 },
  { id: 'inv-003', sku: 'SPK-PLG-B6', name: 'Spark Plug (V8 Set)', stockQty: 15, reorderPoint: 5, supplier: 'Ignition Inc.', unitCost: 450 },
  { id: 'inv-004', sku: 'SYN-OIL-5W30', name: '5W-30 Synthetic Oil (5L)', stockQty: 32, reorderPoint: 15, supplier: 'Auto Parts Pro', unitCost: 550 },
  { id: 'inv-005', sku: 'FLT-AIR-12', name: 'Performance Air Filter', stockQty: 0, reorderPoint: 5, supplier: 'Speed Systems', unitCost: 700 },
  { id: 'inv-006', sku: 'BLT-SRP-7PK', name: 'Serpentine Belt 7PK1855', stockQty: 9, reorderPoint: 8, supplier: 'Belt Masters', unitCost: 250 },
  { id: 'inv-007', sku: 'GKT-VLV-SBC', name: 'Valve Cover Gasket (SBC)', stockQty: 12, reorderPoint: 10, supplier: 'Seals & Gaskets', unitCost: 350 },
  { id: 'inv-008', sku: 'FUS-STD-10A', name: '10A Blade Fuse (50 pack)', stockQty: 5, reorderPoint: 5, supplier: 'Ignition Inc.', unitCost: 100 },
];

==================== lib\mock-shifts.ts ====================

// [path]: lib/mock-shifts.ts

import { Shift } from './types';
import { subDays, setHours, setMinutes } from 'date-fns';

const today = new Date();

// Helper to create consistent date objects
const createShiftTime = (dayOffset: number, hour: number, minute: number) => {
    return setMinutes(setHours(subDays(today, dayOffset), hour), minute).toISOString();
};

export const mockShifts: Shift[] = [
  // Mike L. (user-tech-1) - A busy week
  { id: 'shift-1', userId: 'user-tech-1', clockInTime: createShiftTime(4, 8, 0), clockOutTime: createShiftTime(4, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(4, 12, 0), endTime: createShiftTime(4, 12, 30) }] }, // Monday
  { id: 'shift-2', userId: 'user-tech-1', clockInTime: createShiftTime(3, 8, 5), clockOutTime: createShiftTime(3, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(3, 12, 0), endTime: createShiftTime(3, 13, 0) }] }, // Tuesday
  { id: 'shift-7', userId: 'user-tech-1', clockInTime: createShiftTime(2, 7, 55), clockOutTime: createShiftTime(2, 16, 30), breaks: [{ type: 'Lunch', startTime: createShiftTime(2, 12, 0), endTime: createShiftTime(2, 12, 30) }] }, // Wednesday
  { id: 'shift-8', userId: 'user-tech-1', clockInTime: createShiftTime(1, 8, 0), clockOutTime: createShiftTime(1, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(1, 12, 30), endTime: createShiftTime(1, 13, 0) }] }, // Thursday
  
  // Chris P. (user-tech-2) - A full week
  { id: 'shift-3', userId: 'user-tech-2', clockInTime: createShiftTime(4, 8, 15), clockOutTime: createShiftTime(4, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(4, 12, 30), endTime: createShiftTime(4, 13, 0) }] }, // Monday
  { id: 'shift-10', userId: 'user-tech-2', clockInTime: createShiftTime(3, 8, 0), clockOutTime: createShiftTime(3, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(3, 12, 0), endTime: createShiftTime(3, 12, 30) }] }, // Tuesday
  { id: 'shift-4', userId: 'user-tech-2', clockInTime: createShiftTime(2, 8, 0), clockOutTime: createShiftTime(2, 18, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(2, 12, 0), endTime: createShiftTime(2, 12, 30) }] }, // Wednesday

  // James M. (user-tech-3) - Some days & a past shift
  { id: 'shift-5', userId: 'user-tech-3', clockInTime: createShiftTime(1, 9, 0), clockOutTime: createShiftTime(1, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(1, 13, 0), endTime: createShiftTime(1, 13, 30) }] }, // Thursday
  { id: 'shift-14', userId: 'user-tech-3', clockInTime: createShiftTime(0, 8, 0), clockOutTime: createShiftTime(0, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(0, 12, 0), endTime: createShiftTime(0, 12, 30) }] }, // Friday (Today)
  
  // Data from previous months for "All Time" filter
  { id: 'shift-6', userId: 'user-tech-3', clockInTime: createShiftTime(35, 8, 0), clockOutTime: createShiftTime(35, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(35, 12, 0), endTime: createShiftTime(35, 12, 30) }] },
  { id: 'shift-15', userId: 'user-tech-1', clockInTime: createShiftTime(40, 8, 0), clockOutTime: createShiftTime(40, 17, 0), breaks: [{ type: 'Lunch', startTime: createShiftTime(40, 12, 0), endTime: createShiftTime(40, 12, 30) }] },
];

==================== lib\project-templates.ts ====================

// [path]: lib/project-templates.ts

import { Category } from './types';

// CORRECTED: All subtasks now have the required 'priority' and 'internalNotes' fields.
export const fullRestorationTemplate: Category[] = [
  {
    id: 'body-paint', name: 'Body & Paint', weight: 25, subTasks: [
      { id: 'bp1', name: 'Media Blasting', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'bp2', name: 'Rust Repair & Panel Replacement', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'bp3', name: 'Body Filler & Sanding', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'bp4', name: 'Primer Application', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'bp5', name: 'Final Paint', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'bp6', name: 'Clear Coat & Polishing', status: 'Pending', priority: 'Low', internalNotes: [] },
    ]
  },
  {
    id: 'chassis-suspension', name: 'Chassis & Suspension', weight: 20, subTasks: [
      { id: 'cs1', name: 'Frame Inspection & Repair', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'cs2', name: 'Front Suspension Rebuild', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'cs3', name: 'Rear Suspension Rebuild', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'cs4', name: 'Brake System Installation', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'cs5', name: 'Steering Box & Linkage', status: 'Pending', priority: 'Normal', internalNotes: [] },
    ]
  },
  {
    id: 'engine', name: 'Engine & Drivetrain', weight: 25, subTasks: [
      { id: 'en1', name: 'Engine Disassembly & Inspection', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'en2', name: 'Block Machining', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'en3', name: 'Engine Assembly', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'en4', name: 'Transmission Rebuild', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'en5', name: 'Driveshaft Balancing & Installation', status: 'Pending', priority: 'Low', internalNotes: [] },
      { id: 'en6', name: 'Engine & Transmission Installation', status: 'Pending', priority: 'Normal', internalNotes: [] },
    ]
  },
  {
    id: 'interior', name: 'Interior', weight: 15, subTasks: [
      { id: 'in1', name: 'Floor Pan Sound Deadening', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'in2', name: 'Carpet Installation', status: 'Pending', priority: 'Low', internalNotes: [] },
      { id: 'in3', name: 'Dashboard & Gauge Restoration', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'in4', name: 'Seat Upholstery', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'in5', name: 'Headliner Installation', status: 'Pending', priority: 'Normal', internalNotes: [] },
    ]
  },
  {
    id: 'electrical', name: 'Electrical & Wiring', weight: 15, subTasks: [
      { id: 'el1', name: 'Design & Layout New Wiring Harness', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'el2', name: 'Main Harness Installation', status: 'Pending', priority: 'High', internalNotes: [] },
      { id: 'el3', name: 'Lighting & Signals', status: 'Pending', priority: 'Normal', internalNotes: [] },
      { id: 'el4', name: 'Ignition System', status: 'Pending', priority: 'Normal', internalNotes: [] },
    ]
  },
];

export const majorServiceTemplate: Category[] = [
    {
        id: 'engine', name: 'Engine Service', weight: 60, subTasks: [
            { id: 'ms1', name: 'Oil & Filter Change', status: 'Pending', priority: 'Normal', internalNotes: [] },
            { id: 'ms2', name: 'Spark Plug Replacement', status: 'Pending', priority: 'Normal', internalNotes: [] },
            { id: 'ms3', name: 'Air Filter Replacement', status: 'Pending', priority: 'Normal', internalNotes: [] },
            { id: 'ms4', name: 'Coolant Flush', status: 'Pending', priority: 'Low', internalNotes: [] },
            { id: 'ms5', name: 'Carburetor Tune-up', status: 'Pending', priority: 'Normal', internalNotes: [] },
        ]
    },
    {
        id: 'chassis', name: 'Chassis Check', weight: 40, subTasks: [
            { id: 'ms6', name: 'Brake Inspection', status: 'Pending', priority: 'High', internalNotes: [] },
            { id: 'ms7', name: 'Tire Rotation & Pressure Check', status: 'Pending', priority: 'Low', internalNotes: [] },
            { id: 'ms8', name: 'Suspension Check', status: 'Pending', priority: 'Normal', internalNotes: [] },
        ]
    }
];

==================== lib\types.ts ====================

// [path]: lib/types.ts

// =======================================================================
// NEW ENTITIES - These are the new data models for our advanced features
// =======================================================================

export type QAStatus = 'Pending' | 'Passed' | 'Failed';
export type HoldReason = 'Awaiting Parts' | 'Awaiting Payment' | 'Awaiting Client Decision' | 'Internal QA' | '';

export type BreakType = 'Lunch' | 'Tea';

export interface Break {
  startTime: string;
  endTime?: string;
  type: BreakType;
}

export interface Shift {
  id: string;
  userId: string;
  clockInTime: string;
  clockOutTime?: string;
  breaks: Break[];
}

export interface Approval {
  id: string;
  taskId: string;
  title: string;
  description?: string;
  priceImpact?: number;
  etaImpactDays?: number;
  status: 'Pending'|'Approved'|'Rejected';
  decidedAt?: string;
  decidedBy?: string; // userId
}

export interface Part {
  id: string;
  taskId: string;
  name: string;
  partNumber?: string;
  supplier?: string;
  qty: number;
  unitCost?: number;
  status: 'Needed'|'Ordered'|'Received'|'Cancelled';
  eta?: string;
}

export interface PurchaseOrder {
  id: string;
  supplier: string;
  items: { partId: string; qty: number; unitCost: number }[];
  status: 'Open'|'Received'|'Cancelled';
  eta?: string;
}

export interface InventoryItem {
  id: string;
  sku: string;
  name: string;
  stockQty: number;
  reorderPoint?: number;
  supplier?: string;
  unitCost?: number;
}


// =======================================================================
// EXISTING ENTITIES - These are being extended with new fields
// =======================================================================

export interface Technician {
  id: string;
  name: string;
  userId: string; // <-- ADD THIS DIRECT LINK
}

export type UserRole = 'Boss' | 'Manager' | 'Technician' | 'Client';

export interface User {
  id: string;
  name: string;
  role: UserRole;
}

export interface Message {
  id: string;
  author: string;
  authorRole: UserRole;
  text: string;
  visibleTo: 'All' | 'BossOnly' | 'StaffOnly';
  createdAt: string;
}

export interface Invoice {
  id: string;
  amount: number;
  status: 'Pending' | 'Paid' | 'Overdue';
  dueDate: string;
  description: string;
}

export interface InternalTaskNote {
  id: string;
  authorId: string;
  authorName: string;
  note: string;
  createdAt: string;
  type: 'Instruction' | 'Feedback' | 'Log';
}

export interface SubTask {
  id: string;
  name:string;
  status: 'Pending' | 'In Progress' | 'Awaiting Approval' | 'Completed';
  priority: 'Low' | 'Normal' | 'High' | 'Urgent';
  assignedTo?: Technician['id'];
  requiresClientApproval?: boolean;
  internalNotes?: InternalTaskNote[];
  estimateHours?: number;
  actualHours?: number;
  priceImpact?: number;
  etaImpactDays?: number;
  startDate?: string;
  dueDate?: string;
  completedAt?: string;
  qaStatus?: QAStatus;
  blockedBy?: string[];
  checklist?: {label:string; value?:string|number|boolean; checked: boolean}[];
  attachments?: {mediaId:string}[];
  parts?: Part[];
  approvals?: Approval[];
}

export interface Category {
  id: string;
  name: string;
  weight: number;
  subTasks: SubTask[];
  requiresQa?: boolean;
  owner?: string; // Technician id for category lead
}

export interface TimelineUpdate {
  id: string;
  date: string;
  update: string;
  category: string;
}

export interface Media {
  id: string;
  url: string;
  caption: string;
  category: string;
}

export interface Project {
  id:string;
  customerName: string;
  car: {
    make: string;
    model: string;
    year: number;
    vin?: string;
    color?: string;
    mileageIn?: number;
    mileageOut?: number;
  };
  status: 'Active' | 'Completed' | 'On Hold';
  holdReason?: HoldReason;
  createdAt: string;
  promisedDate?: string;
  categories: Category[];
  timeline: TimelineUpdate[];
  media: Media[];
  messages: Message[];
  financials: {
    invoices: Invoice[];
    totalQuoted: number;
    totalPaid: number;
    partsCost?: number;
    laborCost?: number;
    totalCost?: number; // parts + labor
  };
  purchaseOrders?: PurchaseOrder[];
  branchId?: string;
}

export interface AssignedTask extends SubTask {
  projectId: string;
  projectName: string;
  categoryName: string;
}

// NEW: Formalized UnscheduledTask type for drag-and-drop
export interface UnscheduledTask extends SubTask {
  projectId: string;
  projectName: string;
  categoryId: string;
}

==================== lib\utils.ts ====================

// [path]: lib/utils.ts

import { Project } from './types';

// This is the main workshop labor rate in ZAR per hour.
const WORKSHOP_HOURLY_RATE = 450;

export const calculateOverallProgress = (project: Project | null): number => {
  if (!project || !project.categories || project.categories.length === 0) return 0;

  const totalProgress = project.categories.reduce((acc, category) => {
    const completedTasks = category.subTasks.filter(t => t.status === 'Completed').length;
    const categoryProgress = category.subTasks.length > 0 ? (completedTasks / category.subTasks.length) : 0;
    return acc + (categoryProgress * category.weight);
  }, 0);
  
  const totalWeight = project.categories.reduce((acc, category) => acc + category.weight, 0);

  if (totalWeight === 0) return 0;

  return (totalProgress / totalWeight) * 100;
};

// --- NEW: Financial Calculation Functions ---

export const calculateProjectCosts = (project: Project) => {
    // 1. Calculate total labor cost
    const totalHours = project.categories.reduce((acc, category) => 
        acc + category.subTasks.reduce((taskAcc, task) => taskAcc + (task.actualHours || 0), 0)
    , 0);
    const laborCost = totalHours * WORKSHOP_HOURLY_RATE;

    // 2. Calculate total parts cost
    const partsCost = project.categories.reduce((acc, category) =>
        acc + category.subTasks.reduce((taskAcc, task) =>
            taskAcc + (task.parts?.reduce((partAcc, part) => partAcc + ((part.unitCost || 0) * part.qty), 0) || 0)
        , 0)
    , 0);

    const totalCost = laborCost + partsCost;

    return { laborCost, partsCost, totalCost };
};

export const calculateProjectProfitability = (project: Project) => {
    const { totalCost } = calculateProjectCosts(project);
    const totalQuoted = project.financials.totalQuoted;
    
    const netProfit = totalQuoted - totalCost;
    const margin = totalQuoted > 0 ? (netProfit / totalQuoted) * 100 : 0;

    return { netProfit, margin };
};